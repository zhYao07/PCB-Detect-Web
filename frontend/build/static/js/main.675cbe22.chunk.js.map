{"version":3,"sources":["components/Login.js","App.js","index.js"],"names":["TabPane","Tabs","createAxiosInstance","hostname","window","location","baseURL","protocol","console","log","currentApiUrl","axios","create","withCredentials","Login","_ref","onLoginSuccess","activeTab","setActiveTab","useState","loading","setLoading","apiUrlInfo","setApiUrlInfo","loginForm","Form","useForm","registerForm","useEffect","resetFields","_jsx","className","style","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","children","_jsxs","padding","background","color","borderRadius","marginBottom","fontSize","textAlign","activeKey","onChange","centered","tab","SafetyOutlined","form","name","onFinish","async","axiosInstance","defaults","data","post","values","timeout","status","message","success","localStorage","setItem","token","JSON","stringify","user","error","code","includes","response","layout","size","Item","rules","required","Input","prefix","UserOutlined","placeholder","suffix","Tooltip","title","InfoCircleOutlined","Password","LockOutlined","Button","type","htmlType","block","username","password","email","phone","setFieldsValue","MailOutlined","pattern","PhoneOutlined","min","dependencies","_ref2","getFieldValue","validator","_","value","Promise","reject","Error","resolve","API_BASE_URL","Header","Sider","Content","Layout","App","systemStatus","setSystemStatus","cpuUsage","memoryUsage","uptime","detectionResults","setDetectionResults","defects","statistics","defect_types","selectedImage","setSelectedImage","detectionProgress","setDetectionProgress","zoomLevel","setZoomLevel","imageList","setImageList","currentImageIndex","setCurrentImageIndex","isBatchProcessing","setIsBatchProcessing","batchProgress","setBatchProgress","showNavigation","setShowNavigation","detectionHistory","setDetectionHistory","previewUrls","setPreviewUrls","isUploading","setIsUploading","isDragging","setIsDragging","dragStart","setDragStart","x","y","imagePosition","setImagePosition","scale","setScale","position","setPosition","imageWrapperRef","useRef","isPaused","setIsPaused","defectFilter","setDefectFilter","processedResults","setProcessedResults","defectTypes","setDefectTypes","isPausedRef","isCameraActive","setIsCameraActive","videoStream","setVideoStream","videoRef","isCapturing","setIsCapturing","captureInterval","setCaptureInterval","currentRunTime","setCurrentRunTime","runTimeInterval","setRunTimeInterval","defectsListRef","defectsListHover","setDefectsListHover","isLoggedIn","setIsLoggedIn","currentUser","setCurrentUser","imageDimensions","setImageDimensions","startTimeRef","fetchSystemStatus","get","cpu_usage","memory_usage","server_ip","ip","newBaseUrl","updateApiBaseUrl","statusInterval","setInterval","clearInterval","current","srcObject","play","then","catch","err","forEach","url","URL","revokeObjectURL","getTracks","track","stop","getItem","parse","resetImageAndDetectionStates","e","toggleContinuousCapture","setStartTime","setEndTime","end","Date","now","finalDuration","Math","floor","hours","minutes","info","warning","paused","ended","start","timeInterval","duration","readyState","interval","warn","playErr","capturedFrame","captureVideoFrame","videoWidth","videoHeight","newWidth","newHeight","round","captureCanvas","document","createElement","width","height","getContext","drawImage","scaleCanvas","toBlob","blob","file","File","toLocaleTimeString","result","processImage","length","resetAllStates","filterDefects","filterType","filtered","filter","defect","toLowerCase","types","push","getDefectColor","defectType","renderBoundingBoxes","videoPosition","left","top","scaleFactor","videoElement","videoRect","getComputedStyle","getBoundingClientRect","parentRect","parentElement","scaleX","scaleY","imageSize","boxOffset","map","index","bbox","x1","y1","x2","y2","offsetX","offsetY","wrapperRect","containerW","containerH","imgW","imgH","imgRatio","contentW","contentH","border","backgroundColor","pointerEvents","zIndex","whiteSpace","confidence","boxWidth","boxHeight","handleImageUpload","img","Image","onload","canvas","resizedFile","imageUrl","createObjectURL","onerror","src","debouncedHandleFolderUpload","debounce","func","delay","debounceTimer","_len","arguments","args","Array","_key","context","this","clearTimeout","setTimeout","apply","fileList","newFiles","fileObj","originFileObj","startsWith","urls","resetImagePosition","handleImageChange","selectedModel","setSelectedModel","iouThreshold","setIouThreshold","confThreshold","setConfThreshold","formData","FormData","append","params","vote_threshold","orientation_count","iou_threshold","conf_threshold","img_width","img_height","startTime","endTime","handleImageScrolling","targetElement","target","isInsideImageWrapper","preventDefault","addEventListener","passive","removeEventListener","body","overflow","documentElement","handleMouseLeave","handleLoginSuccess","resizeObserver","ResizeObserver","observe","disconnect","alt","SettingOutlined","BulbOutlined","onClick","handleLogout","removeItem","cursor","display","gap","minWidth","newPauseState","history","i","checkPauseInterval","progress","icon","LoadingOutlined","SearchOutlined","alignItems","flexDirection","marginTop","max","marginLeft","Progress","percent","showInfo","strokeColor","justifyContent","calculateUptime","Upload","accept","showUploadList","beforeUpload","disabled","UploadOutlined","directory","multiple","FolderOutlined","VideoCameraOutlined","CameraOutlined","navigator","mediaDevices","getUserMedia","stream","video","ideal","showDirectoryPicker","directoryHandle","annotatedImagesFolder","getDirectoryHandle","jsonFolder","_detectionHistory$i2","_detectionHistory$i2$","_detectionHistory$i3","_detectionHistory$i3$","imageName","split","slice","join","annotatedImageName","annotatedImageHandle","getFileHandle","writableStream","createWritable","image","_detectionHistory$i","_detectionHistory$i$r","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","write","close","jsonFileName","jsonFileHandle","jsonWritableStream","jsonResult","FileTextOutlined","handleExportReport","reportContainer","appendChild","dateStr","toLocaleDateString","timeStr","batchStatistics","totalImages","totalDefects","defectTypeCounts","imagesWithDefects","averageDefectsPerImage","toFixed","batchStatsRows","Object","entries","count","percentage","currentImageDefectsRows","positionStr","innerHTML","html2canvasModule","html2canvas","default","useCORS","logging","jsPdfModule","jsPDF","imgData","toDataURL","pdf","orientation","unit","format","imgHeight","heightLeft","addImage","addPage","filename","getTime","save","removeChild","destroy","querySelector","onMouseEnter","onMouseLeave","_imageWrapperRef$curr2","imgRect","clientX","right","clientY","bottom","ref","autoPlay","playsInline","muted","objectFit","_Fragment","onMouseDown","button","onMouseMove","newX","newY","maxOffset","boundedX","boundedY","onMouseUp","handleMouseUp","onWheel","_imageWrapperRef$curr","delta","deltaY","newScale","rect","mouseX","mouseY","centerX","centerY","scaleChange","newPosition","maxWidth","maxHeight","transform","transformOrigin","transition","userSelect","draggable","LeftOutlined","handlePrevImage","RightOutlined","handleNextImage","onDrop","dataTransfer","files","flex","fontWeight","Pagination","total","pageSize","page","showQuickJumper","showSizeChanger","Select","Option","minHeight","keys","ReactECharts","option","getChartOption","_detectionResults$sta","tooltip","trigger","legend","show","series","defectNames","colors","colorKey","formatter","orient","itemGap","radius","center","label","alignTo","margin","lineHeight","rich","b","align","labelLine","length2","minTurnAngle","maxSurfaceAngle","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","notMerge","InputNumber","step","controls","newValue","parseFloat","Slider","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.675cbe22.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, Button, message, Tabs, Tooltip } from 'antd';\r\nimport { UserOutlined, LockOutlined, MailOutlined, PhoneOutlined, SafetyOutlined, InfoCircleOutlined } from '@ant-design/icons';\r\nimport './Login.css';\r\nimport axios from 'axios';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\n// 创建一个独立的axios实例，不受全局配置影响\r\nconst createAxiosInstance = () => {\r\n      const hostname = window.location.hostname;\r\n      const protocol = window.location.protocol;\r\n      const baseURL = `${protocol}//${hostname}:5000`;\r\n      console.log('Login组件使用的API地址:', baseURL);\r\n\r\n      // 在UI上显示当前使用的API地址（调试用）\r\n      window.currentApiUrl = baseURL;\r\n\r\n      return axios.create({\r\n            baseURL,\r\n            withCredentials: true\r\n      });\r\n};\r\n\r\n// Remove mock user data; use backend APIs for auth\r\n\r\nconst Login = ({ onLoginSuccess }) => {\r\n      const [activeTab, setActiveTab] = useState('login');\r\n      const [loading, setLoading] = useState(false);\r\n      const [apiUrlInfo, setApiUrlInfo] = useState('');\r\n      // Create separate form instances for login and register\r\n      const [loginForm] = Form.useForm();\r\n      const [registerForm] = Form.useForm();\r\n\r\n      // 获取并显示API URL信息\r\n      useEffect(() => {\r\n            const hostname = window.location.hostname;\r\n            const protocol = window.location.protocol;\r\n            const baseURL = `${protocol}//${hostname}:5000`;\r\n            setApiUrlInfo(`当前API地址: ${baseURL}`);\r\n      }, []);\r\n\r\n      // Reset form fields when switching tabs\r\n      useEffect(() => {\r\n            if (activeTab === 'login') {\r\n                  loginForm.resetFields();\r\n            } else {\r\n                  registerForm.resetFields();\r\n            }\r\n      }, [activeTab, loginForm, registerForm]);\r\n\r\n      // 使用本地图片\r\n      const pcbBackgroundUrl = '/output.png';\r\n\r\n      // Real backend login\r\n      const handleLogin = async (values) => {\r\n            setLoading(true);\r\n            let axiosInstance;\r\n            try {\r\n                  // 使用独立的axios实例发起请求\r\n                  axiosInstance = createAxiosInstance();\r\n                  console.log('开始登录请求，API地址:', axiosInstance.defaults.baseURL);\r\n\r\n                  // 添加超时和错误处理\r\n                  const response = await axiosInstance.post('/api/login', values, {\r\n                        timeout: 10000  // 10秒超时\r\n                  });\r\n\r\n                  const data = response.data;\r\n                  if (data.status === 'success') {\r\n                        message.success('登录成功！');\r\n                        localStorage.setItem('token', data.token);\r\n                        localStorage.setItem('user', JSON.stringify(data.user));\r\n                        onLoginSuccess(data.user);\r\n                  } else {\r\n                        message.error(data.error || '登录失败');\r\n                  }\r\n            } catch (error) {\r\n                  console.error('登录请求出错:', error);\r\n\r\n                  // 详细的错误处理\r\n                  if (error.code === 'ECONNABORTED') {\r\n                        message.error('请求超时，服务器未响应');\r\n                  } else if (error.message && error.message.includes('Network Error')) {\r\n                        message.error(`网络错误: 无法连接到服务器 ${axiosInstance.defaults.baseURL}`);\r\n                  } else if (error.response) {\r\n                        // 服务器返回了错误状态码\r\n                        message.error(`服务器错误 (${error.response.status}): ${error.response.data.error || '未知错误'}`);\r\n                  } else {\r\n                        // 其他错误\r\n                        message.error(`登录失败: ${error.message || '未知错误'}`);\r\n                  }\r\n            } finally {\r\n                  setLoading(false);\r\n            }\r\n      };\r\n\r\n      // Real backend registration\r\n      const handleRegister = async (values) => {\r\n            setLoading(true);\r\n            let axiosInstance;\r\n            try {\r\n                  // 调用注册接口，使用独立的axios实例\r\n                  axiosInstance = createAxiosInstance();\r\n                  console.log('开始注册请求，API地址:', axiosInstance.defaults.baseURL);\r\n\r\n                  // 添加超时和错误处理\r\n                  await axiosInstance.post('/api/register', {\r\n                        username: values.username,\r\n                        password: values.password,\r\n                        email: values.email,\r\n                        phone: values.phone\r\n                  }, {\r\n                        timeout: 10000 // 10秒超时\r\n                  });\r\n\r\n                  // 注册成功后跳转到登录标签\r\n                  message.success('注册成功！请登录');\r\n                  setActiveTab('login');\r\n                  // 在切换到登录标签后，预填充表单字段\r\n                  loginForm.setFieldsValue({ username: values.username, password: values.password });\r\n            } catch (error) {\r\n                  console.error('注册请求出错:', error);\r\n\r\n                  // 详细的错误处理\r\n                  if (error.code === 'ECONNABORTED') {\r\n                        message.error('请求超时，服务器未响应');\r\n                  } else if (error.message && error.message.includes('Network Error')) {\r\n                        message.error(`网络错误: 无法连接到服务器 ${axiosInstance.defaults.baseURL}`);\r\n                  } else if (error.response) {\r\n                        // 服务器返回了错误状态码\r\n                        message.error(`服务器错误 (${error.response.status}): ${error.response.data.error || '未知错误'}`);\r\n                  } else {\r\n                        // 其他错误\r\n                        message.error(`注册失败: ${error.message || '未知错误'}`);\r\n                  }\r\n            } finally {\r\n                  setLoading(false);\r\n            }\r\n      };\r\n\r\n      return (\r\n            <div className=\"login-container\" style={{\r\n                  backgroundImage: `url(${pcbBackgroundUrl})`,\r\n                  backgroundRepeat: 'no-repeat',\r\n                  backgroundPosition: 'center center',\r\n                  backgroundSize: 'cover'\r\n            }}>\r\n                  <div className=\"login-content\">\r\n                        <div className=\"login-header\">\r\n                              <h1>欢迎使用慧眼识瑕系统</h1>\r\n                              <p className=\"login-subtitle\">基于YOLOv11和投票融合的PCB缺陷检测系统</p>\r\n                        </div>\r\n\r\n                        {/* 添加API URL显示，用于调试 */}\r\n                        <div style={{\r\n                              padding: '5px 10px',\r\n                              background: 'rgba(0,0,0,0.6)',\r\n                              color: '#fff',\r\n                              borderRadius: '4px',\r\n                              marginBottom: '10px',\r\n                              fontSize: '12px',\r\n                              textAlign: 'center'\r\n                        }}>\r\n                              {apiUrlInfo}\r\n                        </div>\r\n\r\n                        <div className=\"login-box\">\r\n                              <div className=\"light-effect\"></div>\r\n                              <div className=\"light-effect\"></div>\r\n\r\n                              <Tabs activeKey={activeTab} onChange={setActiveTab} centered className=\"login-tabs\">\r\n                                    <TabPane tab=\"登录\" key=\"login\">\r\n                                          <div className=\"login-welcome\">\r\n                                                <SafetyOutlined className=\"login-welcome-icon\" />\r\n                                                <p>请输入您的账号信息，安全登录系统</p>\r\n                                          </div>\r\n                                          <Form\r\n                                                form={loginForm}\r\n                                                name=\"login\"\r\n                                                onFinish={handleLogin}\r\n                                                layout=\"vertical\"\r\n                                                size=\"large\"\r\n                                          >\r\n                                                <Form.Item\r\n                                                      name=\"username\"\r\n                                                      rules={[{ required: true, message: '请输入用户名' }]}\r\n                                                >\r\n                                                      <Input\r\n                                                            prefix={<UserOutlined />}\r\n                                                            placeholder=\"用户名\"\r\n                                                            suffix={\r\n                                                                  <Tooltip title=\"支持字母、数字和下划线组合\">\r\n                                                                        <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\r\n                                                                  </Tooltip>\r\n                                                            }\r\n                                                      />\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                      name=\"password\"\r\n                                                      rules={[{ required: true, message: '请输入密码' }]}\r\n                                                >\r\n                                                      <Input.Password\r\n                                                            prefix={<LockOutlined />}\r\n                                                            placeholder=\"密码\"\r\n                                                      />\r\n                                                </Form.Item>\r\n                                                <Form.Item>\r\n                                                      <Button\r\n                                                            type=\"primary\"\r\n                                                            htmlType=\"submit\"\r\n                                                            block\r\n                                                            loading={loading}\r\n                                                            className=\"login-button\"\r\n                                                      >\r\n                                                            登录\r\n                                                      </Button>\r\n                                                </Form.Item>\r\n                                          </Form>\r\n                                    </TabPane>\r\n                                    <TabPane tab=\"注册\" key=\"register\">\r\n                                          <div className=\"login-welcome\">\r\n                                                <UserOutlined className=\"login-welcome-icon\" style={{ color: '#1890ff' }} />\r\n                                                <p>欢迎注册，请填写以下信息</p>\r\n                                          </div>\r\n                                          <Form\r\n                                                form={registerForm}\r\n                                                name=\"register\"\r\n                                                onFinish={handleRegister}\r\n                                                layout=\"vertical\"\r\n                                                size=\"large\"\r\n                                          >\r\n                                                <Form.Item\r\n                                                      name=\"username\"\r\n                                                      rules={[{ required: true, message: '请输入用户名' }]}\r\n                                                >\r\n                                                      <Input\r\n                                                            prefix={<UserOutlined />}\r\n                                                            placeholder=\"用户名\"\r\n                                                            suffix={\r\n                                                                  <Tooltip title=\"支持字母、数字和下划线组合\">\r\n                                                                        <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\r\n                                                                  </Tooltip>\r\n                                                            }\r\n                                                      />\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                      name=\"email\"\r\n                                                      rules={[\r\n                                                            { required: true, message: '请输入邮箱' },\r\n                                                            { type: 'email', message: '请输入有效的邮箱地址' }\r\n                                                      ]}\r\n                                                >\r\n                                                      <Input\r\n                                                            prefix={<MailOutlined />}\r\n                                                            placeholder=\"邮箱\"\r\n                                                      />\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                      name=\"phone\"\r\n                                                      rules={[\r\n                                                            { required: true, message: '请输入手机号' },\r\n                                                            { pattern: /^1[3-9]\\d{9}$/, message: '请输入有效的手机号' }\r\n                                                      ]}\r\n                                                >\r\n                                                      <Input\r\n                                                            prefix={<PhoneOutlined />}\r\n                                                            placeholder=\"手机号\"\r\n                                                      />\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                      name=\"password\"\r\n                                                      rules={[\r\n                                                            { required: true, message: '请输入密码' },\r\n                                                            { min: 6, message: '密码长度至少为6位' }\r\n                                                      ]}\r\n                                                >\r\n                                                      <Input.Password\r\n                                                            prefix={<LockOutlined />}\r\n                                                            placeholder=\"密码\"\r\n                                                      />\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                      name=\"confirmPassword\"\r\n                                                      dependencies={['password']}\r\n                                                      rules={[\r\n                                                            { required: true, message: '请确认密码' },\r\n                                                            ({ getFieldValue }) => ({\r\n                                                                  validator(_, value) {\r\n                                                                        if (!value || getFieldValue('password') === value) {\r\n                                                                              return Promise.resolve();\r\n                                                                        }\r\n                                                                        return Promise.reject(new Error('两次输入的密码不一致'));\r\n                                                                  },\r\n                                                            }),\r\n                                                      ]}\r\n                                                >\r\n                                                      <Input.Password\r\n                                                            prefix={<LockOutlined />}\r\n                                                            placeholder=\"确认密码\"\r\n                                                      />\r\n                                                </Form.Item>\r\n                                                <Form.Item>\r\n                                                      <Button\r\n                                                            type=\"primary\"\r\n                                                            htmlType=\"submit\"\r\n                                                            block\r\n                                                            loading={loading}\r\n                                                            className=\"login-button\"\r\n                                                      >\r\n                                                            注册\r\n                                                      </Button>\r\n                                                </Form.Item>\r\n                                          </Form>\r\n                                    </TabPane>\r\n                              </Tabs>\r\n\r\n                              <div className=\"login-footer\">\r\n                                    <p>技术支持: <span>从零开始的代码生活</span></p>\r\n                                    <p>系统版本: <span>V2.3.1</span></p>\r\n                              </div>\r\n                        </div>\r\n                  </div>\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default Login; ","import React, { useState, useEffect, useRef } from 'react';\nimport { Layout, Button, Card, Statistic, Progress, Tabs, Upload, message, Select, Slider, Pagination, InputNumber, Spin, Tooltip } from 'antd';\nimport { CameraOutlined, VideoCameraOutlined, UploadOutlined, ZoomInOutlined, ZoomOutOutlined, SettingOutlined, BulbOutlined, UserOutlined, SearchOutlined, FolderOutlined, LeftOutlined, RightOutlined, LoadingOutlined } from '@ant-design/icons';\nimport ReactECharts from 'echarts-for-react';\n// 在文件顶部添加图标导入\nimport { PlayCircleOutlined, PauseCircleOutlined, FileTextOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport './App.css';\nimport Login from './components/Login';\n\n// 添加API基础URL配置\nconst API_BASE_URL = (() => {\n      const hostname = window.location.hostname;\n      const protocol = window.location.protocol;\n      // 使用当前窗口访问的hostname构建API URL\n      return `${protocol}//${hostname}:5000`;\n})();\n\n// 配置axios默认值\naxios.defaults.baseURL = API_BASE_URL;\naxios.defaults.withCredentials = true; // 允许跨域请求携带凭证\n\n// 添加一个函数来更新API基础URL\nconst updateApiBaseUrl = (ip) => {\n      const newBaseUrl = `${window.location.protocol}//${ip}:5000`;\n      console.log(`更新API基础URL为: ${newBaseUrl}`);\n      axios.defaults.baseURL = newBaseUrl;\n};\n\nconst { Header, Sider, Content } = Layout;\nconst { TabPane } = Tabs;\n\nfunction App() {\n      const [systemStatus, setSystemStatus] = useState({\n            status: 'normal',\n            cpuUsage: 0,\n            memoryUsage: 0,\n            uptime: '0h 0m'\n      });\n\n      const [detectionResults, setDetectionResults] = useState({\n            defects: [],\n            statistics: {\n                  defect_types: {}\n            }\n      });\n\n      const [selectedImage, setSelectedImage] = useState(null);\n      const [loading, setLoading] = useState(false);\n      const [detectionProgress, setDetectionProgress] = useState(0);\n      const [zoomLevel, setZoomLevel] = useState(1);\n      const MIN_ZOOM = 0.5;\n      const MAX_ZOOM = 2;\n      const ZOOM_STEP = 0.1;\n\n      // 添加新的状态变量\n      const [imageList, setImageList] = useState([]); // 存储所有要处理的图片\n      const [currentImageIndex, setCurrentImageIndex] = useState(0); // 当前处理的图片索引\n      const [isBatchProcessing, setIsBatchProcessing] = useState(false); // 是否正在批量处理\n      const [batchProgress, setBatchProgress] = useState(0); // 批量处理进度\n      const [showNavigation, setShowNavigation] = useState(false);\n      const [detectionHistory, setDetectionHistory] = useState([]); // 存储所有图片的检测结果\n      const [previewUrls, setPreviewUrls] = useState([]); // 存储所有图片的URL\n      const [isUploading, setIsUploading] = useState(false);\n      const [isDragging, setIsDragging] = useState(false);\n      const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n      const [imagePosition, setImagePosition] = useState({ x: 0, y: 0 });\n      const [scale, setScale] = useState(1);\n      const [position, setPosition] = useState({ x: 0, y: 0 });\n      const imageWrapperRef = useRef(null);\n      const [isPaused, setIsPaused] = useState(false); // 是否暂停检测\n      // 添加缺陷过滤相关的状态变量\n      const [defectFilter, setDefectFilter] = useState('all');\n      const [processedResults, setProcessedResults] = useState([]);\n      const [defectTypes, setDefectTypes] = useState(['all', 'mouse_bite', 'open_circuit', 'short', 'spur', 'spurious_copper']);\n      const isPausedRef = useRef(false);\n\n      // 添加到其他state变量之后\n      const [isCameraActive, setIsCameraActive] = useState(false);\n      const [videoStream, setVideoStream] = useState(null);\n      const videoRef = useRef(null);\n      const [isCapturing, setIsCapturing] = useState(false);\n      const [captureInterval, setCaptureInterval] = useState(null);\n\n      const [currentRunTime, setCurrentRunTime] = useState('0秒');\n      const [runTimeInterval, setRunTimeInterval] = useState(null);\n\n      const prevOverflowStyle = useRef('');\n      // 添加一个防抖函数，确保同一时间只处理一次上传请求\n      const debounce = (func, delay) => {\n            let debounceTimer;\n            return function (...args) {\n                  const context = this;\n                  clearTimeout(debounceTimer);\n                  debounceTimer = setTimeout(() => func.apply(context, args), delay);\n            };\n      };\n\n      // 添加缺陷列表的ref\n      const defectsListRef = useRef(null);\n      // 添加一个标志控制缺陷列表是否可以滚动\n      const [defectsListHover, setDefectsListHover] = useState(false);\n\n      const [isLoggedIn, setIsLoggedIn] = useState(false);\n      const [currentUser, setCurrentUser] = useState(null);\n      // 添加图像尺寸状态\n      const [imageDimensions, setImageDimensions] = useState(null);\n\n      // Add this with the other refs near the top of the component\n      const startTimeRef = useRef(null);\n\n      useEffect(() => {\n            const fetchSystemStatus = async () => {\n                  try {\n                        const response = await axios.get('/api/system-status');\n                        setSystemStatus({\n                              status: response.data.status,\n                              cpuUsage: response.data.cpu_usage,\n                              memoryUsage: response.data.memory_usage,\n                              uptime: response.data.uptime\n                        });\n\n                        // 如果后端返回了服务器IP地址，并且不是localhost，则更新API基础URL\n                        if (response.data.server_ip && response.data.server_ip !== '127.0.0.1') {\n                              updateApiBaseUrl(response.data.server_ip);\n                        }\n                  } catch (error) {\n                        console.error('Error fetching system status:', error);\n                        message.error('系统状态更新失败');\n                  }\n            };\n\n            fetchSystemStatus();\n            const statusInterval = setInterval(fetchSystemStatus, 5000);\n            return () => clearInterval(statusInterval);\n      }, []);\n\n      useEffect(() => {\n            isPausedRef.current = isPaused;\n      }, [isPaused]);\n\n      useEffect(() => {\n            if (videoRef.current && videoStream) {\n                  console.log('videoStream变化，设置视频源...');\n                  videoRef.current.srcObject = videoStream;\n                  videoRef.current.play()\n                        .then(() => console.log('视频播放成功 [useEffect]'))\n                        .catch(err => {\n                              console.error('视频播放失败 [useEffect]:', err);\n                              message.error('视频播放失败: ' + err.message);\n                        });\n            }\n      }, [videoStream]);\n\n      // 添加useEffect清理资源\n      useEffect(() => {\n            return () => {\n                  previewUrls.forEach(url => URL.revokeObjectURL(url));\n            };\n      }, [previewUrls]);\n\n      // 清理视频和定时器资源\n      useEffect(() => {\n            return () => {\n                  if (runTimeInterval) {\n                        clearInterval(runTimeInterval);\n                  }\n                  if (videoStream) {\n                        videoStream.getTracks().forEach(track => track.stop());\n                  }\n                  if (captureInterval) {\n                        clearInterval(captureInterval);\n                  }\n            };\n      }, []);\n\n      useEffect(() => {\n            // Check if user is already logged in\n            const token = localStorage.getItem('token');\n            const user = localStorage.getItem('user');\n            if (token && user) {\n                  setIsLoggedIn(true);\n                  setCurrentUser(JSON.parse(user));\n            }\n      }, []);\n\n      // 打开摄像头\n      const handleOpenCamera = async () => {\n            try {\n                  console.log('开始打开/关闭摄像头操作, 当前状态:', { isCameraActive });\n\n                  if (isCameraActive) {\n                        // 关闭摄像头逻辑\n                        console.log('正在关闭摄像头...');\n                        if (videoStream) {\n                              videoStream.getTracks().forEach(track => track.stop());\n                        }\n                        setVideoStream(null);\n                        setIsCameraActive(false);\n\n                        // 停止实时检测\n                        if (isCapturing) {\n                              setIsCapturing(false);\n                              if (captureInterval) {\n                                    clearInterval(captureInterval);\n                                    setCaptureInterval(null);\n                              }\n                        }\n\n                        // 重置检测进度\n                        setDetectionProgress(0);\n\n                        // 重置所有图像相关状态\n                        setImageList([]);\n                        setPreviewUrls([]);\n                        setSelectedImage(null);\n                        setCurrentImageIndex(0);\n                        setDetectionHistory([]);\n                        setDetectionResults({\n                              defects: [],\n                              statistics: {\n                                    defect_types: {}\n                              }\n                        });\n                        setProcessedResults([]);\n                        setImageDimensions(null);\n                        setScale(1);\n                        setPosition({ x: 0, y: 0 });\n\n                        message.success('摄像头已关闭');\n                        return;\n                  }\n\n                  // 先重置图像状态，确保界面干净\n                  resetImageAndDetectionStates();\n\n                  // 检查浏览器是否支持摄像头API\n                  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n                        message.error('您的浏览器不支持访问摄像头功能');\n                        return;\n                  }\n\n                  console.log('正在请求摄像头权限...');\n                  // 尝试访问摄像头\n                  const stream = await navigator.mediaDevices.getUserMedia({\n                        video: {\n                              width: { ideal: 1280 },\n                              height: { ideal: 720 }\n                        }\n                  });\n\n                  console.log('成功获取摄像头流');\n\n                  // 重要：先设置状态再处理视频元素\n                  setIsCameraActive(true);\n                  setVideoStream(stream);\n\n                  // 等待状态更新完成\n                  await new Promise(resolve => setTimeout(resolve, 50));\n\n                  // 直接设置视频源\n                  if (videoRef.current) {\n                        console.log('设置视频元素源...');\n                        videoRef.current.srcObject = stream;\n                        try {\n                              await videoRef.current.play();\n                              console.log('视频播放成功');\n                        } catch (err) {\n                              console.error('视频播放失败:', err);\n                        }\n                  }\n\n                  message.success('摄像头已打开');\n            } catch (error) {\n                  console.error('无法访问摄像头:', error);\n\n                  // 更详细的错误信息处理\n                  if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n                        message.error('摄像头访问被拒绝，请在浏览器中允许访问摄像头');\n                  } else if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\n                        message.error('未找到摄像头设备，请确保您的设备已连接摄像头');\n                  } else if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {\n                        message.error('无法读取摄像头，可能被其他应用程序占用');\n                  } else {\n                        message.error('无法访问摄像头: ' + error.message);\n                  }\n            }\n      };\n\n\n      const resetImageAndDetectionStates = () => {\n            console.log('重置图像和检测状态开始');\n\n            // 清理URL资源\n            previewUrls.forEach(url => {\n                  try {\n                        URL.revokeObjectURL(url);\n                  } catch (e) {\n                        console.error(\"撤销URL时出错:\", e);\n                  }\n            });\n\n            // 重置图像和检测相关状态，但保留摄像头状态\n            setImageList([]);\n            setPreviewUrls([]);\n            setSelectedImage(null);\n            setCurrentImageIndex(0);\n            setDetectionHistory([]);\n            setDetectionResults({\n                  defects: [],\n                  statistics: {\n                        defect_types: {}\n                  }\n            });\n            setProcessedResults([]);\n            setDetectionProgress(0);\n            setBatchProgress(0);\n            setScale(1);\n            setPosition({ x: 0, y: 0 });\n            // 重置图像尺寸\n            setImageDimensions(null);\n\n            console.log('重置图像和检测状态完成');\n      };\n\n      // 捕获视频帧并转换为文件\n      const captureVideoFrame = () => {\n            if (!videoRef.current || !isCameraActive) {\n                  console.error('视频元素不可用或摄像头未激活');\n                  return null;\n            }\n\n            // 检查视频是否在播放\n            if (videoRef.current.paused || videoRef.current.ended) {\n                  console.warn('视频已暂停或结束，尝试重新播放');\n                  videoRef.current.play().catch(err => {\n                        console.error('无法重新播放视频:', err);\n                  });\n                  return null;\n            }\n\n            // 确保视频尺寸有效\n            const videoWidth = videoRef.current.videoWidth;\n            const videoHeight = videoRef.current.videoHeight;\n\n            if (!videoWidth || !videoHeight) {\n                  console.warn('视频尺寸无效:', videoWidth, videoHeight);\n                  return null;\n            }\n\n            console.log('捕获视频帧，原始尺寸:', videoWidth, 'x', videoHeight);\n\n            // 计算等比例缩放后的尺寸\n            let newWidth, newHeight;\n\n            if (videoWidth > 600 || videoHeight > 600) {\n                  // 固定宽度为600, 高度按比例缩放\n                  newWidth = 600;\n                  newHeight = Math.round((videoHeight / videoWidth) * 600);\n            } else {\n                  // 小尺寸视频保持原始尺寸\n                  newWidth = videoWidth;\n                  newHeight = videoHeight;\n            }\n\n            console.log('捕获视频帧，缩放后尺寸:', newWidth, 'x', newHeight);\n\n            // 创建两个画布 - 一个用于捕获原始帧，一个用于缩放\n            const captureCanvas = document.createElement('canvas');\n            captureCanvas.width = videoWidth;\n            captureCanvas.height = videoHeight;\n\n            // 先在原始尺寸画布上绘制视频帧\n            const captureCtx = captureCanvas.getContext('2d');\n            captureCtx.drawImage(videoRef.current, 0, 0, videoWidth, videoHeight);\n\n            // 创建第二个画布用于缩放\n            const scaleCanvas = document.createElement('canvas');\n            scaleCanvas.width = newWidth;\n            scaleCanvas.height = newHeight;\n\n            // 在第二个画布上绘制缩放后的图像\n            const scaleCtx = scaleCanvas.getContext('2d');\n            scaleCtx.drawImage(captureCanvas, 0, 0, videoWidth, videoHeight, 0, 0, newWidth, newHeight);\n\n            // 保存缩放后的尺寸信息到state\n            setImageDimensions({ width: newWidth, height: newHeight });\n\n            // 将缩放后的画布转换为Blob\n            return new Promise((resolve) => {\n                  scaleCanvas.toBlob((blob) => {\n                        if (!blob) {\n                              console.error('无法创建Blob');\n                              resolve(null);\n                              return;\n                        }\n\n                        // 创建File对象\n                        const file = new File([blob], 'camera-capture.jpg', { type: 'image/jpeg' });\n                        resolve(file);\n                  }, 'image/jpeg', 0.95); // 高质量JPEG\n            });\n      };\n      // 开始或暂停实时检测\n      // 开始或暂停实时检测\n      const toggleContinuousCapture = async () => {\n            // Reset runtime variables at the start of continuous capture\n            setStartTime(null);\n            startTimeRef.current = null;\n            setEndTime(null);\n            setCurrentRunTime('0秒');\n            if (isCapturing) {\n                  // 如果正在捕获，则停止\n                  if (captureInterval) {\n                        clearInterval(captureInterval);\n                        setCaptureInterval(null);\n                  }\n\n                  // 停止运行时长计时\n                  if (runTimeInterval) {\n                        clearInterval(runTimeInterval);\n                        setRunTimeInterval(null);\n                  }\n\n                  // 设置结束时间\n                  if (startTimeRef.current) {\n                        const end = Date.now();\n                        setEndTime(end);\n\n                        // 计算最终运行时长\n                        const finalDuration = Math.floor((end - startTimeRef.current) / 1000);\n                        const hours = Math.floor(finalDuration / 3600);\n                        const minutes = Math.floor((finalDuration % 3600) / 60);\n                        const seconds = finalDuration % 60;\n                        setCurrentRunTime(`${hours}小时${minutes}分钟${seconds}秒`);\n                  }\n\n                  setIsCapturing(false);\n\n                  // 重置检测结果以清除边界框，但确保不影响视频流\n                  setDetectionResults({\n                        defects: [],\n                        statistics: {\n                              defect_types: {}\n                        }\n                  });\n\n                  message.info('已停止实时检测');\n                  return;\n            }\n\n            // 开始实时捕获\n            if (!isCameraActive) {\n                  message.warning('请先打开摄像头');\n                  return;\n            }\n\n            // 确保视频元素存在且正在播放\n            if (!videoRef.current || !videoRef.current.srcObject) {\n                  console.error('视频元素未准备就绪');\n                  message.error('视频未准备就绪，请重新打开摄像头');\n                  return;\n            }\n\n            // 检查视频流是否可用\n            try {\n                  if (videoRef.current.paused || videoRef.current.ended) {\n                        await videoRef.current.play();\n                        console.log('重新开始播放视频');\n                  }\n            } catch (err) {\n                  console.error('无法播放视频:', err);\n                  message.error('无法播放视频');\n                  return;\n            }\n\n            // 设置开始时间\n            const start = Date.now();\n            setStartTime(start);\n            startTimeRef.current = start;\n            setEndTime(null);\n\n            // 启动运行时长计时器\n            const timeInterval = setInterval(() => {\n                  const now = Date.now();\n                  // Use the ref instead of the closure value\n                  const duration = Math.floor((now - startTimeRef.current) / 1000); // 秒数\n                  const hours = Math.floor(duration / 3600);\n                  const minutes = Math.floor((duration % 3600) / 60);\n                  const seconds = duration % 60;\n                  setCurrentRunTime(`${hours}小时${minutes}分钟${seconds}秒`);\n            }, 1000);\n\n            setRunTimeInterval(timeInterval);\n\n            setIsCapturing(true);\n            message.info('开始实时检测');\n            console.log('开始实时检测，视频流状态:', videoRef.current.readyState);\n\n            // 设置定期捕获和检测\n            const interval = setInterval(async () => {\n                  try {\n                        // 检查视频状态，确保检测过程中摄像头未关闭\n                        if (!videoRef.current || !videoRef.current.srcObject || !isCameraActive) {\n                              console.warn('视频元素不存在或摄像头已关闭，停止检测');\n                              clearInterval(interval);\n\n                              // 停止运行时长计时\n                              if (runTimeInterval) {\n                                    clearInterval(runTimeInterval);\n                                    setRunTimeInterval(null);\n                              }\n\n                              setIsCapturing(false);\n                              setCaptureInterval(null);\n                              message.warning('摄像头已断开，实时检测停止');\n                              return;\n                        }\n\n                        // 如果视频暂停，尝试重新播放\n                        if (videoRef.current.paused || videoRef.current.ended) {\n                              console.warn('视频暂停或结束，尝试重新播放');\n                              try {\n                                    await videoRef.current.play();\n                              } catch (playErr) {\n                                    console.error('无法重新播放视频:', playErr);\n                                    message.error('无法恢复视频播放，实时检测停止');\n                                    clearInterval(interval);\n\n                                    // 停止运行时长计时\n                                    if (runTimeInterval) {\n                                          clearInterval(runTimeInterval);\n                                          setRunTimeInterval(null);\n                                    }\n\n                                    setIsCapturing(false);\n                                    setCaptureInterval(null);\n                                    return;\n                              }\n                        }\n\n                        // 捕获视频帧\n                        const capturedFrame = await captureVideoFrame();\n                        if (capturedFrame) {\n                              console.log('成功捕获视频帧', new Date().toLocaleTimeString());\n                              setDetectionProgress(20);\n\n                              // 处理捕获的帧并检测缺陷\n                              const result = await processImage(capturedFrame);\n                              console.log('检测结果:', result.defects.length > 0 ? `发现${result.defects.length}个缺陷` : '未发现缺陷');\n\n                              // 确保在摄像头活动且视频元素存在时更新结果\n                              if (isCameraActive && videoRef.current) {\n                                    // 确认视频仍在播放\n                                    if (videoRef.current.paused) {\n                                          console.log('检测期间视频暂停，尝试恢复');\n                                          videoRef.current.play().catch(e => console.error('无法恢复视频:', e));\n                                    }\n\n                                    // 更新检测结果之前先清除之前的结果\n                                    setProcessedResults([]);\n\n                                    // 更新检测结果\n                                    setDetectionResults(result);\n                              }\n\n                              setDetectionProgress(100);\n                        } else {\n                              console.warn('未能捕获视频帧');\n                        }\n                  } catch (error) {\n                        console.error('实时检测错误:', error);\n                        message.error('实时检测出错: ' + error.message);\n                  }\n            }, 2000); // 每2秒捕获一次\n\n            setCaptureInterval(interval);\n      };\n      // 处理缺陷过滤的变化\n      const handleDefectFilterChange = (value) => {\n            setDefectFilter(value);\n            filterDefects(value);\n      };\n      const resetAllStates = () => {\n            console.log('重置所有状态开始，摄像头状态:', isCameraActive);\n            if (runTimeInterval) {\n                  clearInterval(runTimeInterval);\n                  setRunTimeInterval(null);\n            }\n\n            // 重置运行时长\n            setCurrentRunTime('0秒');\n            setStartTime(null);\n            startTimeRef.current = null;\n            setEndTime(null);\n\n            // 如果摄像头处于活动状态，只重置图像相关状态\n            if (isCameraActive) {\n                  resetImageAndDetectionStates();\n                  return;\n            }\n\n            // 否则重置所有状态包括摄像头\n            // 清理URL资源\n            previewUrls.forEach(url => {\n                  try {\n                        URL.revokeObjectURL(url);\n                  } catch (e) {\n                        console.error(\"撤销URL时出错:\", e);\n                  }\n            });\n\n            // 清理摄像头资源\n            if (videoStream) {\n                  videoStream.getTracks().forEach(track => track.stop());\n            }\n            setVideoStream(null);\n            setIsCameraActive(false);\n\n            if (captureInterval) {\n                  clearInterval(captureInterval);\n                  setCaptureInterval(null);\n            }\n\n            // 重置其他状态\n            setImageList([]);\n            setPreviewUrls([]);\n            setSelectedImage(null);\n            setCurrentImageIndex(0);\n            setDetectionHistory([]);\n            setDetectionResults({\n                  defects: [],\n                  statistics: {\n                        defect_types: {}\n                  }\n            });\n            setProcessedResults([]);\n            setDetectionProgress(0);\n            setBatchProgress(0);\n            setScale(1);\n            setPosition({ x: 0, y: 0 });\n\n            console.log('重置所有状态完成');\n      };\n      // 过滤缺陷基于选择\n      const filterDefects = (filterType) => {\n            if (!detectionResults || !detectionResults.defects) return;\n\n            if (filterType === 'all') {\n                  setProcessedResults(detectionResults.defects);\n            } else {\n                  const filtered = detectionResults.defects.filter(defect =>\n                        defect.type.toLowerCase() === filterType.toLowerCase()\n                  );\n                  setProcessedResults(filtered);\n            }\n      };\n\n      // 当检测结果改变时更新处理后的结果\n      useEffect(() => {\n            if (detectionResults && detectionResults.defects) {\n                  // 根据实际结果更新缺陷类型\n                  const types = ['all'];\n                  detectionResults.defects.forEach(defect => {\n                        if (!types.includes(defect.type.toLowerCase())) {\n                              types.push(defect.type.toLowerCase());\n                        }\n                  });\n                  setDefectTypes(types);\n\n                  // 应用当前过滤器\n                  filterDefects(defectFilter);\n            }\n      }, [detectionResults]);\n\n      // 获取每种缺陷类型的颜色\n      const getDefectColor = (defectType) => {\n            const colorMap = {\n                  'mouse_bite': '#ff7875',      // 适中红色\n                  'open_circuit': '#40a9ff',     // 适中蓝色\n                  'short': '#ffc53d',           // 适中黄色\n                  'spur': '#73d13d',           // 适中绿色\n                  'spurious_copper': '#9254de'  // 适中紫色\n            };\n\n            return colorMap[defectType.toLowerCase()] || '#ff7875'; // 默认使用适中红色\n      };\n\n      // 渲染边界框\n      const renderBoundingBoxes = () => {\n            // 修改条件判断，针对摄像头模式添加特殊处理\n            if ((!selectedImage && !isCameraActive) || !processedResults || processedResults.length === 0) {\n                  return null;\n            }\n\n            // 获取视频元素的实际位置和尺寸\n            let videoPosition = { left: 0, top: 0, width: 0, height: 0 };\n            let scaleFactor = 1;\n\n            if (isCameraActive && videoRef.current && imageDimensions) {\n                  // 获取视频元素的计算样式和几何信息\n                  const videoElement = videoRef.current;\n                  const videoComputedStyle = window.getComputedStyle(videoElement);\n                  const videoRect = videoElement.getBoundingClientRect();\n                  const parentRect = videoElement.parentElement.getBoundingClientRect();\n\n                  // 计算视频相对于父容器的位置（由于objectFit: contain会留白）\n                  // 视频元素的位置会因为居中显示而有偏移\n                  videoPosition = {\n                        width: videoRect.width,\n                        height: videoRect.height,\n                        // 计算相对于父容器的左偏移\n                        left: videoRect.left - parentRect.left,\n                        // 计算相对于父容器的顶部偏移\n                        top: videoRect.top - parentRect.top\n                  };\n\n                  // 视频显示尺寸与原始图像尺寸比例\n                  const scaleX = videoPosition.width / imageDimensions.width;\n                  const scaleY = videoPosition.height / imageDimensions.height;\n                  scaleFactor = Math.min(scaleX, scaleY);\n\n                  console.log('视频位置计算:', {\n                        videoPosition,\n                        imageSize: imageDimensions,\n                        scale: scaleFactor,\n                        boxOffset: { x: videoPosition.left, y: videoPosition.top }\n                  });\n            }\n\n            return processedResults.map((defect, index) => {\n                  // 检查是否有实际的边界框数据\n                  if (defect.bbox) {\n                        let { x1, y1, x2, y2 } = defect.bbox;\n\n                        // 应用视频帧中的缩放因子和偏移\n                        if (isCameraActive && imageDimensions) {\n                              // 基于imageWrapperRef计算视频内容的实际显示区域\n                              let scale = 1;\n                              let offsetX = 0;\n                              let offsetY = 0;\n                              if (isCameraActive && imageDimensions && imageWrapperRef.current) {\n                                    const wrapperRect = imageWrapperRef.current.getBoundingClientRect();\n                                    const containerW = wrapperRect.width;\n                                    const containerH = wrapperRect.height;\n                                    const { width: imgW, height: imgH } = imageDimensions;\n                                    const imgRatio = imgW / imgH;\n                                    const containerRatio = containerW / containerH;\n                                    let contentW, contentH;\n                                    if (imgRatio > containerRatio) {\n                                          contentW = containerW;\n                                          contentH = contentW / imgRatio;\n                                    } else {\n                                          contentH = containerH;\n                                          contentW = contentH * imgRatio;\n                                    }\n                                    // 计算内容区域的偏移量（居中留白）\n                                    offsetX = (containerW - contentW) / 2;\n                                    offsetY = (containerH - contentH) / 2;\n                                    // 计算缩放比例\n                                    scale = contentW / imgW;\n                              }\n                              x1 = x1 * scale + offsetX;\n                              y1 = y1 * scale + offsetY;\n                              x2 = x2 * scale + offsetX;\n                              y2 = y2 * scale + offsetY;\n                        }\n\n                        const width = x2 - x1;\n                        const height = y2 - y1;\n\n                        return (\n                              <div\n                                    key={index}\n                                    style={{\n                                          position: 'absolute',\n                                          left: `${x1}px`,\n                                          top: `${y1}px`,\n                                          width: `${width}px`,\n                                          height: `${height}px`,\n                                          border: `2px solid ${getDefectColor(defect.type)}`,\n                                          backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                                          pointerEvents: 'none',\n                                          zIndex: 100,\n                                    }}\n                              >\n                                    <div style={{\n                                          position: 'absolute',\n                                          top: '-20px',\n                                          left: '0',\n                                          background: getDefectColor(defect.type),\n                                          color: 'white',\n                                          padding: '0 4px',\n                                          fontSize: '10px',\n                                          whiteSpace: 'nowrap'\n                                    }}>\n                                          {defect.type} {defect.confidence ? `(${defect.confidence}%)` : ''}\n                                    </div>\n                              </div>\n                        );\n                  } else if (defect.position) {\n                        // 使用位置数据的后备选项\n                        const boxWidth = 60;\n                        const boxHeight = 40;\n                        let x = defect.position.x - (boxWidth / 2);\n                        let y = defect.position.y - (boxHeight / 2);\n\n                        // 应用视频帧中的缩放因子和偏移\n                        if (isCameraActive && imageDimensions) {\n                              x = x * scaleFactor + videoPosition.left;\n                              y = y * scaleFactor + videoPosition.top;\n                        }\n\n                        return (\n                              <div\n                                    key={index}\n                                    style={{\n                                          position: 'absolute',\n                                          left: `${x}px`,\n                                          top: `${y}px`,\n                                          width: `${boxWidth}px`,\n                                          height: `${boxHeight}px`,\n                                          border: `2px solid ${getDefectColor(defect.type)}`,\n                                          backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                                          pointerEvents: 'none',\n                                          zIndex: 100,\n                                    }}\n                              >\n                                    <div style={{\n                                          position: 'absolute',\n                                          top: '-20px',\n                                          left: '0',\n                                          background: getDefectColor(defect.type),\n                                          color: 'white',\n                                          padding: '0 4px',\n                                          fontSize: '10px',\n                                          whiteSpace: 'nowrap'\n                                    }}>\n                                          {defect.type} {defect.confidence ? `(${defect.confidence}%)` : ''}\n                                    </div>\n                              </div>\n                        );\n                  }\n                  return null;\n            });\n      };\n\n\n      // 处理单个图片上传\n      const handleImageUpload = (file) => {\n            if (!file) {\n                  return false;\n            }\n\n            setIsUploading(true);\n\n            // 使用Image API预加载图片并计算尺寸\n            const img = new Image();\n            img.onload = () => {\n                  // 计算等比例缩放后的尺寸\n                  let newWidth, newHeight;\n\n                  if (img.width > 600 || img.height > 600) {\n                        // 固定宽度为600, 高度按比例缩放\n                        newWidth = 600;\n                        newHeight = Math.round((img.height / img.width) * 600);\n                  } else {\n                        // 小图维持原尺寸\n                        newWidth = img.width;\n                        newHeight = img.height;\n                  }\n\n                  // 创建canvas进行缩放\n                  const canvas = document.createElement('canvas');\n                  canvas.width = newWidth;\n                  canvas.height = newHeight;\n                  const ctx = canvas.getContext('2d');\n                  ctx.drawImage(img, 0, 0, newWidth, newHeight);\n\n                  // 转换为blob并上传\n                  canvas.toBlob(async (blob) => {\n                        try {\n                              // 将缩放后的图像尺寸保存到状态中\n                              setImageDimensions({ width: newWidth, height: newHeight });\n\n                              // 创建新的File对象并处理\n                              const resizedFile = new File([blob], file.name, { type: file.type });\n\n                              // 在UI上显示缩放后的图\n                              const imageUrl = URL.createObjectURL(blob);\n\n                              // 更新状态\n                              setImageList([resizedFile]);\n                              setPreviewUrls([imageUrl]);\n                              setSelectedImage(imageUrl);\n                              setCurrentImageIndex(0);\n\n                              // 重置检测历史\n                              setDetectionHistory([]);\n\n                              // 重置检测结果\n                              setDetectionResults({\n                                    defects: [],\n                                    statistics: {\n                                          defect_types: {}\n                                    }\n                              });\n\n                              // 重置处理后的结果\n                              setProcessedResults([]);\n\n                              setDetectionProgress(0);\n                              setBatchProgress(0);\n                              message.success('图片导入成功');\n                        } catch (error) {\n                              console.error('图片处理错误:', error);\n                              message.error('图片处理失败');\n                        } finally {\n                              setIsUploading(false);\n                        }\n                  }, file.type, 0.95); // 高质量\n            };\n\n            img.onerror = () => {\n                  console.error('图片加载失败');\n                  message.error('图片加载失败');\n                  setIsUploading(false);\n            };\n\n            img.src = URL.createObjectURL(file);\n            return false; // 阻止默认上传行为\n      };\n\n      // 处理文件夹上传的防抖版本\n      // 处理文件夹上传的防抖版本\n      const debouncedHandleFolderUpload = debounce((info) => {\n            console.log(\"文件夹上传信息 (防抖处理):\", info);\n            setIsUploading(true);\n\n            try {\n                  // 先重置所有状态，确保干净的开始\n                  resetAllStates();\n\n                  // 确保文件列表存在且不为空\n                  if (!info || !info.fileList || info.fileList.length === 0) {\n                        message.warning('未找到文件');\n                        setIsUploading(false);\n                        return;\n                  }\n\n                  // 处理新文件\n                  const newFiles = [];\n                  info.fileList.forEach(file => {\n                        const fileObj = file.originFileObj || file;\n                        if (fileObj && fileObj.type && fileObj.type.startsWith('image/')) {\n                              newFiles.push(fileObj);\n                        }\n                  });\n\n                  console.log(\"导入的图片文件数量:\", newFiles.length);\n\n                  if (newFiles.length === 0) {\n                        message.warning('未找到图片文件');\n                        setIsUploading(false);\n                        return;\n                  }\n\n                  // 创建新URL\n                  const urls = [];\n                  for (const file of newFiles) {\n                        try {\n                              const url = URL.createObjectURL(file);\n                              urls.push(url);\n                        } catch (e) {\n                              console.error(\"无法为文件创建URL:\", file.name, e);\n                        }\n                  }\n\n                  if (urls.length === 0) {\n                        message.error('无法处理图片文件');\n                        setIsUploading(false);\n                        return;\n                  }\n\n                  // 设置新的状态\n                  setImageList(newFiles);\n                  setPreviewUrls(urls);\n                  setSelectedImage(urls[0]);\n\n                  message.success(`成功导入 ${newFiles.length} 张图片`);\n            } catch (error) {\n                  console.error('文件夹导入错误:', error);\n                  message.error('文件夹导入失败');\n                  // 出错时也重置状态\n                  resetAllStates();\n            } finally {\n                  setIsUploading(false);\n            }\n      }, 300); // 300ms的防抖延迟\n\n      // 重置图片位置（在切换图片时调用）\n      const resetImagePosition = () => {\n            setScale(1);\n            setPosition({ x: 0, y: 0 });\n      };\n\n      // 处理图片切换\n      const handleImageChange = (index) => {\n            if (index >= 0 && index < imageList.length) {\n                  setCurrentImageIndex(index);\n                  setSelectedImage(previewUrls[index]);\n                  resetImagePosition(); // 重置缩放和位置\n                  // 如果有检测结果，显示对应结果\n                  if (detectionHistory[index]) {\n                        setDetectionResults(detectionHistory[index].result);\n                  }\n            }\n      };\n\n      // 处理上一张图片\n      const handlePrevImage = () => {\n            handleImageChange(currentImageIndex - 1);\n      };\n\n      // 处理下一张图片\n      const handleNextImage = () => {\n            handleImageChange(currentImageIndex + 1);\n      };\n\n      // 处理页码变化\n      const handlePageChange = (page) => {\n            handleImageChange(page - 1);\n      };\n\n      const [selectedModel, setSelectedModel] = useState('yolov11'); // 默认选择Yolov11模型\n\n      const handleModelChange = (value) => {\n            setSelectedModel(value);\n            switch (value) {\n                  case 'yolov11':\n                        message.info('切换到 Yolov11 模型');\n                        break;\n                  case 'yolov11-vote2':\n                        message.info('切换到 Yolov11-vote2 模型');\n                        break;\n                  case 'yolov11-vote4':\n                        message.info('切换到 Yolov11-vote4 模型');\n                        break;\n                  default:\n                        message.warning('未知模型选择');\n            }\n      };\n\n      const [iouThreshold, setIouThreshold] = useState(0.45); // 默认值为 0.45\n      const [confThreshold, setConfThreshold] = useState(0.4); // 默认值为 0.4\n\n      // 修改单个图片检测逻辑，传递 iou_threshold 和 conf_threshold 参数\n      const processImage = async (file) => {\n            try {\n                  const formData = new FormData();\n                  formData.append('image', file);\n\n                  // 添加图像尺寸信息到请求参数中\n                  const params = {\n                        vote_threshold: selectedModel === 'yolov11-vote2' ? 1 : selectedModel === 'yolov11-vote4' ? 2 : 1,\n                        orientation_count: selectedModel === 'yolov11-vote2' ? 2 : selectedModel === 'yolov11-vote4' ? 4 : 1,\n                        iou_threshold: iouThreshold,\n                        conf_threshold: confThreshold,\n                  };\n\n                  // 如果有图像尺寸信息，也传递给后端\n                  if (imageDimensions) {\n                        params.img_width = imageDimensions.width;\n                        params.img_height = imageDimensions.height;\n                  }\n\n                  const detectResponse = await axios.post('/api/detect', formData, {\n                        params: params,\n                  });\n\n                  return detectResponse.data;\n            } catch (error) {\n                  throw new Error(`检测失败: ${error.message}`);\n            }\n      };\n\n      // 批量检测处理\n      const [startTime, setStartTime] = useState(null); // 检测开始时间\n      const [endTime, setEndTime] = useState(null); // 检测结束时间\n\n      // 计算运行时长\n      const calculateUptime = () => {\n            if (!startTime || !endTime) return 'N/A';\n            const duration = Math.floor((endTime - startTime) / 1000); // 秒数\n            const hours = Math.floor(duration / 3600);\n            const minutes = Math.floor((duration % 3600) / 60);\n            const seconds = duration % 60;\n            return `${hours}小时${minutes}分钟${seconds}秒`;\n      };\n\n      // 修改 handleBatchDetection 函数，记录开始和结束时间\n      const handleBatchDetection = async () => {\n            // Reset runtime variables at the start of batch detection\n            setStartTime(null);\n            startTimeRef.current = null;\n            setEndTime(null);\n            setCurrentRunTime('0秒');\n            if (isCameraActive) {\n                  toggleContinuousCapture();\n                  return;\n            }\n            if (imageList.length === 0) {\n                  message.warning('请先导入图片');\n                  return;\n            }\n\n            if (isBatchProcessing) {\n                  const newPauseState = !isPaused;\n                  setIsPaused(newPauseState);\n                  isPausedRef.current = newPauseState;\n                  message.info(newPauseState ? '暂停检测' : '继续检测');\n                  return;\n            }\n\n            setIsBatchProcessing(true);\n            setLoading(true);\n            setIsPaused(false);\n            isPausedRef.current = false;\n\n            // 记录检测开始时间\n            const start = Date.now();\n            setStartTime(start);\n            startTimeRef.current = start;\n            setEndTime(null);\n\n            // 启动运行时长计时器\n            const interval = setInterval(() => {\n                  const now = Date.now();\n                  // Use the ref instead of the closure value\n                  const duration = Math.floor((now - startTimeRef.current) / 1000); // 秒数\n                  const hours = Math.floor(duration / 3600);\n                  const minutes = Math.floor((duration % 3600) / 60);\n                  const seconds = duration % 60;\n                  setCurrentRunTime(`${hours}小时${minutes}分钟${seconds}秒`);\n            }, 1000);\n\n            setRunTimeInterval(interval);\n\n            let history = [];\n            let i = 0;\n\n            try {\n                  setDetectionProgress(1);\n\n                  while (i < imageList.length) {\n                        if (isPausedRef.current) {\n                              await new Promise(resolve => {\n                                    const checkPauseInterval = setInterval(() => {\n                                          if (!isPausedRef.current) {\n                                                clearInterval(checkPauseInterval);\n                                                resolve();\n                                          }\n                                    }, 100);\n                              });\n                              continue;\n                        }\n\n                        setDetectionResults({\n                              defects: [],\n                              statistics: {\n                                    defect_types: {}\n                              }\n                        });\n\n                        setProcessedResults([]);\n                        setCurrentImageIndex(i);\n                        setSelectedImage(previewUrls[i]);\n\n                        const progress = Math.round(((i + 1) / imageList.length) * 100);\n                        setBatchProgress(progress);\n                        setDetectionProgress(progress);\n\n                        const result = await processImage(imageList[i]);\n\n                        history.push({\n                              imageUrl: previewUrls[i],\n                              result: result\n                        });\n\n                        setDetectionResults(result);\n\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n\n                        if (!isPausedRef.current) {\n                              i++;\n                        }\n                  }\n\n                  setDetectionHistory(history);\n\n                  // 停止计时器并记录结束时间\n                  clearInterval(runTimeInterval);\n                  setRunTimeInterval(null);\n                  const end = Date.now();\n                  setEndTime(end);\n\n                  // 计算并设置最终运行时长\n                  const finalDuration = Math.floor((end - startTimeRef.current) / 1000);\n                  const hours = Math.floor(finalDuration / 3600);\n                  const minutes = Math.floor((finalDuration % 3600) / 60);\n                  const seconds = finalDuration % 60;\n                  setCurrentRunTime(`${hours}小时${minutes}分钟${seconds}秒`);\n\n                  message.success('检测完成');\n                  setIsBatchProcessing(false);\n            } catch (error) {\n                  // 停止计时器\n                  clearInterval(runTimeInterval);\n                  setRunTimeInterval(null);\n\n                  message.error(error.message);\n                  setIsBatchProcessing(false);\n            } finally {\n                  setLoading(false);\n            }\n      };\n      // 修改useEffect中的全局滚轮事件处理\n      useEffect(() => {\n            if (selectedImage) {\n                  // 我们只需要为图片区域添加滚轮处理，不影响全局滚动\n                  const handleImageScrolling = (e) => {\n                        // 检查事件是否发生在图片容器内\n                        let targetElement = e.target;\n                        let isInsideImageWrapper = false;\n\n                        while (targetElement) {\n                              if (targetElement === imageWrapperRef.current) {\n                                    isInsideImageWrapper = true;\n                                    break;\n                              }\n                              targetElement = targetElement.parentElement;\n                        }\n\n                        // 仅当在图片区域内才阻止默认行为\n                        if (isInsideImageWrapper) {\n                              e.preventDefault();\n                        }\n                  };\n\n                  // 添加事件监听器到图片容器\n                  if (imageWrapperRef.current) {\n                        imageWrapperRef.current.addEventListener('wheel', handleImageScrolling, { passive: false });\n                  }\n\n                  return () => {\n                        // 移除事件监听器\n                        if (imageWrapperRef.current) {\n                              imageWrapperRef.current.removeEventListener('wheel', handleImageScrolling);\n                        }\n                  };\n            }\n      }, [selectedImage]);\n\n      // 移除之前的全局滚轮事件监听代码，改为下面的代码\n      // 这个处理只针对图片容器，允许其他区域正常滚动\n      useEffect(() => {\n            // 清理之前的样式\n            document.body.style.overflow = '';\n            document.documentElement.style.overflow = '';\n      }, []);\n\n      // 修改handleWheel函数，只处理图片缩放，不影响其他区域的滚动\n      const handleWheel = (e) => {\n            // 获取图片元素\n            const img = imageWrapperRef.current?.querySelector('img');\n            if (!img) return;\n\n            // 阻止默认行为，这样图片容器的滚轮操作不会引起页面滚动\n            e.preventDefault();\n\n            // 减小缩放系数，使缩放更平滑\n            const delta = e.deltaY * -0.005;\n            const newScale = Math.min(Math.max(scale + delta, MIN_ZOOM), MAX_ZOOM);\n\n            if (newScale === scale) return;\n\n            // 获取鼠标在图片容器中的相对位置\n            const rect = imageWrapperRef.current.getBoundingClientRect();\n            const mouseX = e.clientX - rect.left;\n            const mouseY = e.clientY - rect.top;\n\n            // 计算鼠标位置相对于图片中心的偏移\n            const centerX = rect.width / 2;\n            const centerY = rect.height / 2;\n\n            // 计算新的位置\n            const scaleChange = newScale - scale;\n            let newPosition = position;\n\n            if (delta > 0) { // 放大时\n                  // 以鼠标位置为中心进行放大\n                  newPosition = {\n                        x: position.x - (mouseX - centerX) * (scaleChange / scale),\n                        y: position.y - (mouseY - centerY) * (scaleChange / scale)\n                  };\n            } else { // 缩小时\n                  // 以图片中心为基准点进行缩小\n                  newPosition = {\n                        x: position.x * (newScale / scale),\n                        y: position.y * (newScale / scale)\n                  };\n            }\n\n            // 更新状态\n            setScale(newScale);\n            setPosition(newPosition);\n      };\n\n      // 处理鼠标拖动\n      const handleMouseDown = (e) => {\n            if (e.button === 0) {\n                  setIsDragging(true);\n                  setDragStart({\n                        x: e.clientX - position.x,\n                        y: e.clientY - position.y\n                  });\n            }\n      };\n\n      const handleMouseMove = (e) => {\n            if (isDragging) {\n                  const newX = e.clientX - dragStart.x;\n                  const newY = e.clientY - dragStart.y;\n\n                  // 限制拖动范围\n                  const maxOffset = 300 * (scale - 1);\n                  const boundedX = Math.max(Math.min(newX, maxOffset), -maxOffset);\n                  const boundedY = Math.max(Math.min(newY, maxOffset), -maxOffset);\n\n                  setPosition({\n                        x: boundedX,\n                        y: boundedY\n                  });\n            }\n      };\n\n      // 处理鼠标释放事件\n      const handleMouseUp = () => {\n            setIsDragging(false);\n      };\n\n      // 处理鼠标离开事件\n      const handleMouseLeave = () => {\n            setIsDragging(false);\n      };\n\n      // 修改缩放处理函数，添加位置重置\n      const handleZoomIn = () => {\n            setZoomLevel(prev => {\n                  const newZoom = Math.min(prev + ZOOM_STEP, MAX_ZOOM);\n                  if (newZoom === 1) {\n                        resetImagePosition();\n                  }\n                  return newZoom;\n            });\n      };\n\n      const handleZoomOut = () => {\n            setZoomLevel(prev => {\n                  const newZoom = Math.max(prev - ZOOM_STEP, MIN_ZOOM);\n                  if (newZoom === 1) {\n                        resetImagePosition();\n                  }\n                  return newZoom;\n            });\n      };\n\n      const handleExportResults = async () => {\n            if (!detectionResults.defects.length) {\n                  message.warning('没有可导出的检测结果');\n                  return;\n            }\n\n            try {\n                  // 检查浏览器是否支持文件系统访问 API\n                  if (!window.showDirectoryPicker) {\n                        message.error('当前浏览器不支持文件夹选择功能');\n                        return;\n                  }\n\n                  // 弹出文件夹选择器\n                  const directoryHandle = await window.showDirectoryPicker();\n\n                  // 创建子文件夹：标注图片和 JSON 文件\n                  const annotatedImagesFolder = await directoryHandle.getDirectoryHandle('Annotated_Images', { create: true });\n                  const jsonFolder = await directoryHandle.getDirectoryHandle('JSON_Files', { create: true });\n\n                  // 遍历所有图片，导出标注图片和对应的 JSON 文件\n                  for (let i = 0; i < imageList.length; i++) {\n                        const imageFile = imageList[i];\n                        const imageName = imageFile.name.split('.').slice(0, -1).join('.'); // 去掉文件扩展名\n\n                        // 导出标注图片\n                        const annotatedImageName = `${imageName}_annotated.png`;\n                        const annotatedImageHandle = await annotatedImagesFolder.getFileHandle(annotatedImageName, { create: true });\n                        const writableStream = await annotatedImageHandle.createWritable();\n\n                        // 创建标注图片的 Canvas\n                        const canvas = document.createElement('canvas');\n                        const context = canvas.getContext('2d');\n                        const image = new Image();\n\n                        // 加载图片并绘制到 Canvas 上\n                        image.src = previewUrls[i];\n                        await new Promise((resolve) => {\n                              image.onload = () => {\n                                    canvas.width = image.width;\n                                    canvas.height = image.height;\n                                    context.drawImage(image, 0, 0);\n\n                                    // 绘制检测框\n                                    detectionHistory[i]?.result?.defects.forEach((defect) => {\n                                          if (defect.bbox) {\n                                                const { x1, y1, x2, y2 } = defect.bbox;\n                                                context.strokeStyle = getDefectColor(defect.type);\n                                                context.lineWidth = 2;\n                                                context.strokeRect(x1, y1, x2 - x1, y2 - y1);\n\n                                                // 绘制缺陷类型标签\n                                                context.fillStyle = getDefectColor(defect.type);\n                                                context.font = '16px Arial';\n                                                context.fillText(defect.type, x1, y1 - 5);\n                                          }\n                                    });\n\n                                    resolve();\n                              };\n                        });\n\n                        // 将 Canvas 转换为 Blob 并写入文件\n                        const blob = await new Promise((resolve) => canvas.toBlob(resolve, 'image/png'));\n                        await writableStream.write(blob);\n                        await writableStream.close();\n\n                        // 导出对应的 JSON 文件\n                        const jsonFileName = `${imageName}_result.json`;\n                        const jsonFileHandle = await jsonFolder.getFileHandle(jsonFileName, { create: true });\n                        const jsonWritableStream = await jsonFileHandle.createWritable();\n\n                        const jsonResult = {\n                              image: imageName,\n                              defects: detectionHistory[i]?.result?.defects || [],\n                              statistics: detectionHistory[i]?.result?.statistics || {},\n                        };\n\n                        await jsonWritableStream.write(JSON.stringify(jsonResult, null, 2));\n                        await jsonWritableStream.close();\n                  }\n\n                  message.success('检测结果已成功导出');\n            } catch (error) {\n                  console.error('导出结果失败:', error);\n                  message.error('导出结果失败');\n            }\n      };\n\n      const handleExportReport = () => {\n            // 检查是否有检测结果可供导出\n            if (!detectionHistory || detectionHistory.length === 0) {\n                  message.warning('没有检测结果可供导出');\n                  return;\n            }\n\n            message.loading('正在生成报告...', 0);\n\n            try {\n                  // 创建一个临时的隐藏div来渲染HTML内容\n                  const reportContainer = document.createElement('div');\n                  reportContainer.style.position = 'absolute';\n                  reportContainer.style.left = '-9999px';\n                  reportContainer.style.top = '-9999px';\n                  reportContainer.style.width = '794px'; // A4宽度 (mm到px的近似值)\n                  document.body.appendChild(reportContainer);\n\n                  // 获取当前日期和时间\n                  const now = new Date();\n                  const dateStr = now.toLocaleDateString('zh-CN');\n                  const timeStr = now.toLocaleTimeString('zh-CN');\n\n                  // 计算批次统计数据\n                  const batchStatistics = {\n                        totalImages: imageList.length,\n                        totalDefects: 0,\n                        defectTypeCounts: {},\n                        imagesWithDefects: 0,\n                        averageDefectsPerImage: 0\n                  };\n\n                  // 遍历所有检测历史计算统计数据\n                  detectionHistory.forEach(history => {\n                        if (history.result && history.result.defects) {\n                              const defects = history.result.defects;\n                              if (defects.length > 0) {\n                                    batchStatistics.imagesWithDefects++;\n                              }\n                              batchStatistics.totalDefects += defects.length;\n\n                              defects.forEach(defect => {\n                                    if (!batchStatistics.defectTypeCounts[defect.type]) {\n                                          batchStatistics.defectTypeCounts[defect.type] = 0;\n                                    }\n                                    batchStatistics.defectTypeCounts[defect.type]++;\n                              });\n                        }\n                  });\n\n                  // 计算平均每张图片的缺陷数\n                  batchStatistics.averageDefectsPerImage = (batchStatistics.totalDefects / batchStatistics.totalImages).toFixed(2);\n\n                  // 准备批次统计表格\n                  let batchStatsRows = '';\n                  Object.entries(batchStatistics.defectTypeCounts).forEach(([type, count]) => {\n                        const percentage = ((count / batchStatistics.totalDefects) * 100).toFixed(1);\n                        batchStatsRows += `\n                  <tr>\n                        <td>${type}</td>\n                        <td>${count}</td>\n                        <td>${percentage}%</td>\n                  </tr>`;\n                  });\n\n                  // 准备当前图片的检测结果表格\n                  let currentImageDefectsRows = '';\n                  if (detectionResults && detectionResults.defects) {\n                        detectionResults.defects.forEach((defect, index) => {\n                              const positionStr = defect.bbox ?\n                                    `(${defect.bbox.x1.toFixed(0)},${defect.bbox.y1.toFixed(0)},${defect.bbox.x2.toFixed(0)},${defect.bbox.y2.toFixed(0)})` :\n                                    '未知';\n                              const confidence = defect.confidence ? `${defect.confidence}%` : '未知';\n\n                              currentImageDefectsRows += `\n                  <tr>\n                        <td>${index + 1}</td>\n                        <td>${defect.type}</td>\n                        <td>${positionStr}</td>\n                        <td>${confidence}</td>\n                  </tr>`;\n                        });\n                  }\n\n                  // 使用HTML创建报告内容\n                  reportContainer.innerHTML = `\n                  <div style=\"font-family: 'Microsoft YaHei', 'SimHei', sans-serif; padding: 20px; color: #333;\">\n                        <style>\n                              table {\n                                    width: 100%;\n                                    border-collapse: collapse;\n                                    margin: 15px 0;\n                              }\n                              th, td {\n                                    border: 1px solid #ddd;\n                                    padding: 8px;\n                                    text-align: center;\n                              }\n                              th {\n                                    background-color: #00539c;\n                                    color: white;\n                                    font-weight: bold;\n                              }\n                              tr:nth-child(even) {\n                                    background-color: #f2f2f2;\n                              }\n                              h1, h2, h3 {\n                                    color: #00539c;\n                                    margin-bottom: 10px;\n                              }\n                              .report-header {\n                                    text-align: center;\n                                    margin-bottom: 20px;\n                              }\n                              .report-date {\n                                    text-align: right;\n                                    color: #666;\n                                    font-size: 12px;\n                                    margin-bottom: 15px;\n                              }\n                              .section {\n                                    margin-bottom: 25px;\n                              }\n                              .footer {\n                                    text-align: center;\n                                    margin-top: 30px;\n                                    font-size: 10px;\n                                    color: #999;\n                                    position: absolute;\n                                    bottom: 20px;\n                                    width: 100%;\n                              }\n                              hr {\n                                    border: 0;\n                                    height: 1px;\n                                    background: #ddd;\n                                    margin: 20px 0;\n                              }\n                              .stats-card {\n                                    background: #f8f9fa;\n                                    border-radius: 8px;\n                                    padding: 15px;\n                                    margin: 10px 0;\n                                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                              }\n                              .stats-grid {\n                                    display: grid;\n                                    grid-template-columns: repeat(3, 1fr);\n                                    gap: 15px;\n                                    margin: 15px 0;\n                              }\n                              .stat-item {\n                                    background: white;\n                                    padding: 10px;\n                                    border-radius: 6px;\n                                    text-align: center;\n                              }\n                              .stat-value {\n                                    font-size: 24px;\n                                    font-weight: bold;\n                                    color: #00539c;\n                              }\n                              .stat-label {\n                                    font-size: 14px;\n                                    color: #666;\n                              }\n                        </style>\n                        \n                        <div class=\"report-header\">\n                              <h1>PCB缺陷检测报告</h1>\n                        </div>\n                        \n                        <div class=\"report-date\">\n                              报告生成时间: ${dateStr} ${timeStr}\n                        </div>\n                        \n                        <hr>\n                        \n                        <div class=\"section\">\n                              <h2>批次检测概述</h2>\n                              <div class=\"stats-grid\">\n                                    <div class=\"stat-item\">\n                                          <div class=\"stat-value\">${batchStatistics.totalImages}</div>\n                                          <div class=\"stat-label\">检测总图片数</div>\n                                    </div>\n                                    <div class=\"stat-item\">\n                                          <div class=\"stat-value\">${batchStatistics.totalDefects}</div>\n                                          <div class=\"stat-label\">检出总缺陷数</div>\n                                    </div>\n                                    <div class=\"stat-item\">\n                                          <div class=\"stat-value\">${batchStatistics.averageDefectsPerImage}</div>\n                                          <div class=\"stat-label\">平均每图缺陷数</div>\n                                    </div>\n                              </div>\n                              \n                              <div class=\"stats-card\">\n                                    <h3>批次缺陷类型分布</h3>\n                                    <table>\n                                          <thead>\n                                                <tr>\n                                                      <th>缺陷类型</th>\n                                                      <th>数量</th>\n                                                      <th>占比</th>\n                                                </tr>\n                                          </thead>\n                                          <tbody>\n                                                ${batchStatsRows}\n                                          </tbody>\n                                    </table>\n                              </div>\n                        </div>\n                        \n                        <hr>\n                        \n                        <div class=\"section\">\n                              <h2>当前图片检测详情</h2>\n                              <p>图片序号: ${currentImageIndex + 1}/${imageList.length}</p>\n                              <table>\n                                    <thead>\n                                          <tr>\n                                                <th>缺陷ID</th>\n                                                <th>缺陷类型</th>\n                                                <th>位置坐标(x1,y1,x2,y2)</th>\n                                                <th>置信度</th>\n                                          </tr>\n                                    </thead>\n                                    <tbody>\n                                          ${currentImageDefectsRows}\n                                    </tbody>\n                              </table>\n                        </div>\n                        \n                        <div class=\"footer\">\n                              PCB缺陷检测系统\n                        </div>\n                  </div>\n                  `;\n\n                  // 使用html2canvas将HTML转换为canvas\n                  import('html2canvas').then(html2canvasModule => {\n                        const html2canvas = html2canvasModule.default;\n                        html2canvas(reportContainer, {\n                              scale: 2, // 提高清晰度\n                              useCORS: true,\n                              logging: false\n                        }).then(canvas => {\n                              // 创建PDF\n                              import('jspdf').then(jsPdfModule => {\n                                    const { jsPDF } = jsPdfModule;\n\n                                    const imgData = canvas.toDataURL('image/png');\n                                    const pdf = new jsPDF({\n                                          orientation: 'portrait',\n                                          unit: 'mm',\n                                          format: 'a4'\n                                    });\n\n                                    // 计算合适的图像尺寸以适合A4页面\n                                    const imgWidth = 210; // A4宽度，单位mm\n                                    const pageHeight = 297; // A4高度，单位mm\n                                    const imgHeight = canvas.height * imgWidth / canvas.width;\n\n                                    let heightLeft = imgHeight;\n                                    let position = 0;\n\n                                    // 添加第一页\n                                    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n                                    heightLeft -= pageHeight;\n\n                                    // 如果内容超过一页，添加更多页面\n                                    while (heightLeft > 0) {\n                                          position = heightLeft - imgHeight;\n                                          pdf.addPage();\n                                          pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n                                          heightLeft -= pageHeight;\n                                    }\n\n                                    // 添加文件名，包含时间戳以避免重复\n                                    const timestamp = now.getTime();\n                                    const filename = `PCB缺陷检测报告_${timestamp}.pdf`;\n\n                                    // 保存PDF文件\n                                    pdf.save(filename);\n\n                                    // 清理临时DOM元素\n                                    document.body.removeChild(reportContainer);\n\n                                    // 关闭加载提示并显示成功消息\n                                    message.destroy();\n                                    message.success('报告已成功导出');\n                              });\n                        });\n                  });\n            } catch (error) {\n                  // 发生错误时关闭加载提示并显示错误消息\n                  message.destroy();\n                  console.error(\"导出报告出错:\", error);\n                  message.error('导出报告失败: ' + error.message);\n\n                  // 确保清理可能的临时DOM元素\n                  const reportContainer = document.querySelector('div[style*=\"-9999px\"]');\n                  if (reportContainer) {\n                        document.body.removeChild(reportContainer);\n                  }\n            }\n      };\n\n      const getChartOption = () => {\n            // 检查是否有有效的统计数据\n            const defectTypes = detectionResults?.statistics?.defect_types;\n            if (!defectTypes || Object.keys(defectTypes).length === 0) {\n                  return {\n                        tooltip: { trigger: 'item' },\n                        legend: { show: false },\n                        series: [] // 返回空的 series，避免绘制灰色圆\n                  };\n            }\n\n            // 获取所有缺陷类型\n            const defectNames = Object.keys(defectTypes);\n\n            // 为每种缺陷类型生成对应的颜色\n            const colors = defectNames.map(name => {\n                  // 将中文名称映射到英文键名以获取颜色\n                  const colorKey = (() => {\n                        switch (name) {\n                              case '鼠咬': return 'mouse_bite';\n                              case '开路': return 'open_circuit';\n                              case '短路': return 'short';\n                              case '毛刺': return 'spur';\n                              case '杂铜': return 'spurious_copper';\n                              default: return name.toLowerCase();\n                        }\n                  })();\n\n                  return getDefectColor(colorKey);\n            });\n\n            return {\n                  tooltip: {\n                        trigger: 'item',\n                        formatter: '{a} <br/>{b}: {c} ({d}%)'\n                  },\n                  legend: {\n                        orient: 'horizontal',\n                        bottom: 10,\n                        left: 'center',\n                        data: defectNames,\n                        itemGap: 15,\n                        height: 50\n                  },\n                  color: colors,\n                  series: [\n                        {\n                              name: '缺陷类型',\n                              type: 'pie',\n                              radius: '65%',\n                              center: ['50%', '40%'],\n                              data: Object.entries(defectTypes).map(([name, value]) => ({\n                                    value,\n                                    name\n                              })),\n                              label: {\n                                    show: true,\n                                    position: 'outside',\n                                    alignTo: 'labelLine',\n                                    margin: 20,\n                                    formatter: '{b}\\n{c} ({d}%)',\n                                    lineHeight: 15,\n                                    rich: {\n                                          b: {\n                                                width: 60,\n                                                align: 'left'\n                                          }\n                                    }\n                              },\n                              labelLine: {\n                                    show: true,\n                                    length: 15,\n                                    length2: 20,\n                                    minTurnAngle: 120,\n                                    maxSurfaceAngle: 80\n                              },\n                              emphasis: {\n                                    itemStyle: {\n                                          shadowBlur: 10,\n                                          shadowOffsetX: 0,\n                                          shadowColor: 'rgba(0, 0, 0, 0.5)'\n                                    }\n                              }\n                        }\n                  ]\n            };\n      };\n      const handleImageWrapperClick = (e) => {\n            // 获取图片元素\n            const img = imageWrapperRef.current?.querySelector('img');\n            if (!img) return;\n\n            // 获取图片元素的位置和尺寸\n            const imgRect = img.getBoundingClientRect();\n\n            // 检查点击是否在图片区域外\n            const isOutsideImage = (\n                  e.clientX < imgRect.left ||\n                  e.clientX > imgRect.right ||\n                  e.clientY < imgRect.top ||\n                  e.clientY > imgRect.bottom\n            );\n\n            if (isOutsideImage) {\n                  // 重置缩放和位置\n                  setScale(1);\n                  setPosition({ x: 0, y: 0 });\n            }\n      };\n\n      const handleLoginSuccess = (user) => {\n            setIsLoggedIn(true);\n            setCurrentUser(user);\n      };\n\n      const handleLogout = () => {\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            setIsLoggedIn(false);\n            setCurrentUser(null);\n      };\n\n      // 添加在其他useEffect之后\n      // 监听imageDimensions的变化，确保在渲染边界框前已获取图像尺寸\n      useEffect(() => {\n            // 当imageDimensions变化时，重新计算和应用边界框\n            if (imageDimensions && detectionResults && detectionResults.defects) {\n                  console.log('图像尺寸更新，重新应用边界框:', imageDimensions);\n                  // 触发边界框重新应用\n                  filterDefects(defectFilter);\n            }\n      }, [imageDimensions]);\n\n      // 添加一个useEffect来监听视频元素的大小和位置变化\n      useEffect(() => {\n            if (isCameraActive && videoRef.current) {\n                  // 创建一个ResizeObserver来监听视频元素的大小变化\n                  const resizeObserver = new ResizeObserver(() => {\n                        // 触发边界框重新渲染\n                        if (processedResults && processedResults.length > 0) {\n                              console.log('视频元素尺寸变化，重新应用边界框');\n                              // 创建一个新的过滤结果副本以触发渲染\n                              setProcessedResults([...processedResults]);\n                        }\n                  });\n\n                  // 开始观察视频元素\n                  resizeObserver.observe(videoRef.current);\n\n                  // 清理函数\n                  return () => {\n                        resizeObserver.disconnect();\n                  };\n            }\n      }, [isCameraActive, videoRef.current, processedResults]);\n\n      if (!isLoggedIn) {\n            return <Login onLoginSuccess={handleLoginSuccess} />;\n      }\n\n      return (\n            <Layout className=\"app-container\">\n                  <Header className=\"header\">\n                        <div className=\"header-left\">\n                              <img src=\"/logo.svg\" alt=\"logo\" className=\"logo\" />\n                              <h1>基于YOLOv11和投票融合的PCB缺陷检测系统</h1>\n                        </div>\n                        <div className=\"header-right\">\n                              <SettingOutlined className=\"header-icon\" />\n                              <BulbOutlined className=\"header-icon\" />\n                              <Tooltip title=\"退出登录\">\n                                    <UserOutlined className=\"header-icon\" onClick={handleLogout} style={{ cursor: 'pointer' }} />\n                              </Tooltip>\n                        </div>\n                  </Header>\n                  <Layout style={{ padding: '24px', background: '#f0f2f5' }}>\n                        <div style={{ display: 'flex', gap: '24px', minWidth: 'fit-content' }}>\n                              <div className=\"sidebar\">\n                                    <Button\n                                          type=\"primary\"\n                                          className=\"start-detection-button\"\n                                          style={{\n                                                background: (isBatchProcessing && !isPaused) || isCapturing ? '#f5222d' : '#37c537',\n                                                border: 'none',\n                                          }}\n                                          onClick={handleBatchDetection}\n                                          icon={isBatchProcessing && !isPaused ? <LoadingOutlined /> : <SearchOutlined />}\n                                    >\n                                          {isCameraActive && isCapturing ? '停止检测' :\n                                                isCameraActive ? '开始检测' :\n                                                      isBatchProcessing ? (isPaused ? '继续检测' : '暂停检测') : '开始检测'}\n                                    </Button>\n                                    <div className=\"system-status-section\">\n                                          <h3>系统状态</h3>\n                                          <div className=\"status-item status-cpu\" style={{ display: 'flex', alignItems: 'flex-start' }}>\n                                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '50px' }}>\n                                                      <div className=\"status-icon status-icon-cpu\"></div>\n                                                      <span className=\"status-value\" style={{\n                                                            marginTop: '5px',\n                                                            backgroundColor: 'rgba(24, 144, 255, 0.2)',\n                                                            padding: '2px 8px',\n                                                            borderRadius: '10px',\n                                                            fontSize: '12px',\n                                                            color: '#1890ff',\n                                                            textAlign: 'center'\n                                                      }}>\n                                                            {Math.min(Math.max(Math.round(systemStatus.cpuUsage || 0), 0), 100)}%\n                                                      </span>\n                                                </div>\n                                                <div className=\"status-content\" style={{ marginLeft: '10px', marginTop: '2px' }}>\n                                                      <div className=\"status-header\">\n                                                            <span className=\"status-label\">CPU使用率</span>\n                                                      </div>\n                                                      <div style={{ position: 'relative' }}>\n                                                            <Progress\n                                                                  percent={Math.min(Math.max(Math.round(systemStatus.cpuUsage || 0), 0), 100)}\n                                                                  size=\"small\"\n                                                                  status={systemStatus.cpuUsage > 80 ? 'exception' : 'normal'}\n                                                                  showInfo={false}\n                                                                  strokeColor={{\n                                                                        '0%': '#108ee9',\n                                                                        '100%': systemStatus.cpuUsage > 80 ? '#f5222d' : '#52c41a',\n                                                                  }}\n                                                            />\n                                                      </div>\n                                                </div>\n                                          </div>\n                                          <div className=\"status-item status-memory\" style={{ display: 'flex', alignItems: 'flex-start' }}>\n                                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '50px' }}>\n                                                      <div className=\"status-icon status-icon-memory\"></div>\n                                                      <span className=\"status-value\" style={{\n                                                            marginTop: '5px',\n                                                            backgroundColor: 'rgba(114, 46, 209, 0.2)',\n                                                            padding: '2px 8px',\n                                                            borderRadius: '10px',\n                                                            fontSize: '12px',\n                                                            color: '#722ed1',\n                                                            textAlign: 'center'\n                                                      }}>\n                                                            {Math.min(Math.max(Math.round(systemStatus.memoryUsage || 0), 0), 100)}%\n                                                      </span>\n                                                </div>\n                                                <div className=\"status-content\" style={{ marginLeft: '10px', marginTop: '2px' }}>\n                                                      <div className=\"status-header\">\n                                                            <span className=\"status-label\">内存使用率</span>\n                                                      </div>\n                                                      <div style={{ position: 'relative' }}>\n                                                            <Progress\n                                                                  percent={Math.min(Math.max(Math.round(systemStatus.memoryUsage || 0), 0), 100)}\n                                                                  size=\"small\"\n                                                                  status={systemStatus.memoryUsage > 80 ? 'exception' : 'normal'}\n                                                                  showInfo={false}\n                                                                  strokeColor={{\n                                                                        '0%': '#722ed1',\n                                                                        '100%': systemStatus.memoryUsage > 80 ? '#f5222d' : '#13c2c2',\n                                                                  }}\n                                                            />\n                                                      </div>\n                                                </div>\n                                          </div>\n                                          <div className=\"status-item status-time\" style={{ display: 'flex', alignItems: 'flex-start' }}>\n                                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '50px' }}>\n                                                      <div className=\"status-icon status-icon-time\"></div>\n                                                </div>\n                                                <div className=\"status-content\" style={{ marginLeft: '10px', marginTop: '2px' }}>\n                                                      <div className=\"status-header\">\n                                                            <span className=\"status-label\">运行时长</span>\n                                                      </div>\n                                                      <div style={{\n                                                            display: 'flex',\n                                                            justifyContent: 'center',\n                                                            marginTop: '5px'\n                                                      }}>\n                                                            <span className=\"status-time-value\" style={{\n                                                                  backgroundColor: 'rgba(250, 173, 20, 0.2)',\n                                                                  padding: '4px 12px',\n                                                                  borderRadius: '30px',\n                                                                  fontSize: '12px',\n                                                                  color: '#faad14',\n                                                                  whiteSpace: 'nowrap',\n                                                                  textAlign: 'center'\n                                                            }}>\n                                                                  {isBatchProcessing || isCapturing ? currentRunTime : (endTime && startTime ? calculateUptime() : '0秒')}\n                                                            </span>\n                                                      </div>\n                                                </div>\n                                          </div>\n                                    </div>\n                                    <div className=\"sidebar-actions\">\n                                          <Upload\n                                                accept=\"image/*\"\n                                                showUploadList={false}\n                                                beforeUpload={handleImageUpload}\n                                                disabled={isUploading || loading || isCameraActive}\n                                          >\n                                                <Button className=\"action-btn\" style={{ width: '160px' }} icon={<UploadOutlined className=\"btn-icon\" />} disabled={isUploading || loading || isCameraActive}>\n                                                      导入图像\n                                                </Button>\n                                          </Upload>\n                                          <Upload\n                                                directory\n                                                multiple\n                                                accept=\"image/*\"\n                                                showUploadList={false}\n                                                beforeUpload={() => false}\n                                                onChange={debouncedHandleFolderUpload}\n                                                disabled={isUploading || loading || isCameraActive}\n                                                fileList={[]}\n                                          >\n                                                <Button className=\"action-btn\" style={{ width: '160px' }} icon={<FolderOutlined className=\"btn-icon\" />} disabled={isUploading || loading || isCameraActive}>\n                                                      导入文件夹\n                                                </Button>\n                                          </Upload>\n                                          {/* 添加摄像头按钮 */}\n                                          <Button\n                                                className=\"action-btn\"\n                                                icon={isCameraActive ? <VideoCameraOutlined className=\"btn-icon\" /> : <CameraOutlined className=\"btn-icon\" />}\n                                                onClick={handleOpenCamera}\n                                                style={{ width: '160px', color: isCameraActive ? '#f5222d' : '' }}\n                                          >\n                                                {isCameraActive ? '关闭摄像头' : '打开摄像头'}\n                                          </Button>\n                                          <Button className=\"action-btn\" style={{ width: '160px' }} icon={<SearchOutlined className=\"btn-icon\" />} onClick={handleExportResults}>\n                                                导出结果\n                                          </Button>\n                                          <Button className=\"action-btn\" style={{ width: '160px' }} icon={<FileTextOutlined className=\"btn-icon\" />} onClick={handleExportReport}>\n                                                导出报告\n                                          </Button>\n                                    </div>\n                              </div>\n\n                              <div className=\"image-section\">\n                                    <div className=\"image-container\" style={\n                                          {\n                                                height: '100%',\n                                                width: '100%',\n                                                overflow: 'hidden'\n                                          }\n                                    }>\n                                          <div className=\"image-wrapper\"\n                                                onMouseEnter={() => setShowNavigation(true)}\n                                                onMouseLeave={() => {\n                                                      setShowNavigation(false);\n                                                      handleMouseLeave();\n                                                }}\n                                                onClick={handleImageWrapperClick}\n                                          >\n                                                {isCameraActive ? (\n                                                      // 摄像头模式保持不变\n                                                      <div\n                                                            ref={imageWrapperRef}\n                                                            className=\"image-scale-wrapper camera-active\"\n                                                            style={{\n                                                                  position: 'relative',\n                                                                  width: '100%',\n                                                                  height: '100%',\n                                                                  backgroundColor: '#000',\n                                                                  overflow: 'hidden'\n                                                            }}\n                                                      >\n                                                            {/* 视频元素 */}\n                                                            <video\n                                                                  ref={videoRef}\n                                                                  autoPlay\n                                                                  playsInline\n                                                                  muted\n                                                                  style={{\n                                                                        position: 'absolute',\n                                                                        top: 0,\n                                                                        left: 0,\n                                                                        width: '100%',\n                                                                        height: '100%',\n                                                                        objectFit: 'contain',\n                                                                        display: 'block',\n                                                                        zIndex: 10\n                                                                  }}\n                                                            />\n\n                                                            {/* 边界框层 */}\n                                                            <div\n                                                                  style={{\n                                                                        position: 'absolute',\n                                                                        top: 0,\n                                                                        left: 0,\n                                                                        width: '100%',\n                                                                        height: '100%',\n                                                                        pointerEvents: 'none',\n                                                                        zIndex: 20\n                                                                  }}\n                                                            >\n                                                                  {renderBoundingBoxes()}\n                                                            </div>\n\n                                                            {/* 检测状态指示 */}\n                                                            {isCapturing && (\n                                                                  <div\n                                                                        style={{\n                                                                              position: 'absolute',\n                                                                              top: 10,\n                                                                              right: 10,\n                                                                              backgroundColor: 'rgba(24, 144, 255, 0.8)',\n                                                                              color: 'white',\n                                                                              padding: '4px 8px',\n                                                                              borderRadius: '4px',\n                                                                              fontSize: '12px',\n                                                                              zIndex: 30\n                                                                        }}\n                                                                  >\n                                                                        实时检测中...\n                                                                  </div>\n                                                            )}\n                                                      </div>\n                                                ) : selectedImage ? (\n                                                      <>\n                                                            <div\n                                                                  ref={imageWrapperRef}\n                                                                  className=\"image-scale-wrapper\"\n                                                                  onMouseDown={handleMouseDown}\n                                                                  onMouseMove={handleMouseMove}\n                                                                  onMouseUp={handleMouseUp}\n                                                                  onMouseLeave={handleMouseLeave}\n                                                                  onWheel={handleWheel}\n                                                                  style={{\n                                                                        cursor: isDragging ? 'grabbing' : 'grab',\n                                                                        position: 'relative',\n                                                                        width: imageDimensions?.width || 'auto',\n                                                                        height: imageDimensions?.height || 'auto',\n                                                                        maxWidth: '600px',\n                                                                        maxHeight: '600px'\n                                                                  }}\n                                                            >\n                                                                  {/* 使用相对定位，并在transform中应用缩放和平移 */}\n                                                                  <div style={{\n                                                                        position: 'relative',\n                                                                        width: '100%',\n                                                                        height: '100%',\n                                                                        transform: `scale(${scale}) translate(${position.x / scale}px, ${position.y / scale}px)`,\n                                                                        transformOrigin: 'center',\n                                                                        transition: isDragging ? 'none' : 'transform 0.1s ease',\n                                                                  }}>\n                                                                        <img\n                                                                              src={selectedImage}\n                                                                              alt=\"PCB\"\n                                                                              style={{\n                                                                                    width: '100%',\n                                                                                    height: '100%',\n                                                                                    objectFit: 'contain',\n                                                                                    userSelect: 'none'\n                                                                              }}\n                                                                              draggable={false}\n                                                                        />\n                                                                        {/* 边界框相对于图像定位 */}\n                                                                        {renderBoundingBoxes()}\n                                                                  </div>\n                                                            </div>\n                                                            {imageList.length > 1 && showNavigation && (\n                                                                  <div className=\"image-navigation\">\n                                                                        <Button\n                                                                              icon={<LeftOutlined />}\n                                                                              onClick={handlePrevImage}\n                                                                              disabled={currentImageIndex === 0}\n                                                                        />\n                                                                        <Button\n                                                                              icon={<RightOutlined />}\n                                                                              onClick={handleNextImage}\n                                                                              disabled={currentImageIndex === imageList.length - 1}\n                                                                        />\n                                                                  </div>\n                                                            )}\n                                                      </>\n                                                ) : (\n                                                      <div className=\"upload-placeholder\">\n                                                            <Upload\n                                                                  accept=\"image/*\"\n                                                                  showUploadList={false}\n                                                                  beforeUpload={handleImageUpload} // 处理单个图片上传\n                                                                  onDrop={(e) => {\n                                                                        const file = e.dataTransfer.files[0];\n                                                                        if (file) {\n                                                                              handleImageUpload(file);\n                                                                        }\n                                                                  }}\n                                                            >\n                                                                  <div style={{ textAlign: 'center', cursor: 'pointer' }}>\n                                                                        <UploadOutlined style={{ fontSize: '24px', marginBottom: '8px' }} />\n                                                                        <p>点击或拖拽上传图片</p>\n                                                                  </div>\n                                                            </Upload>\n                                                      </div>\n                                                )}\n                                          </div>\n                                          <div className=\"detection-progress\">\n                                                <span>检测进度:</span>\n                                                <div style={{\n                                                      display: 'flex',\n                                                      alignItems: 'center',\n                                                      marginTop: '5px',\n                                                      gap: '10px'\n                                                }}>\n                                                      <div style={{ flex: 1, position: 'relative' }}>\n                                                            <Progress\n                                                                  percent={detectionProgress}\n                                                                  showInfo={false}\n                                                            />\n                                                      </div>\n                                                      <span style={{\n                                                            fontSize: '14px',\n                                                            color: '#1890ff',\n                                                            fontWeight: '500'\n                                                      }}>\n                                                            {detectionProgress}%\n                                                      </span>\n                                                </div>\n                                          </div>\n                                          {imageList.length > 1 && (\n                                                <div className=\"image-pagination\">\n                                                      <Pagination\n                                                            current={currentImageIndex + 1}\n                                                            total={imageList.length}\n                                                            pageSize={1}\n                                                            onChange={handlePageChange}\n                                                            size=\"small\"\n                                                            showQuickJumper\n                                                            showSizeChanger={false}\n                                                      />\n                                                </div>\n                                          )}\n                                    </div>\n                              </div>\n\n                              <div className=\"results-section\" >\n                                    <div className=\"results-header\">\n                                          <h2>检测结果</h2>\n                                          <Select\n                                                style={{ width: '100%', marginTop: '8px' }}\n                                                value={defectFilter}\n                                                onChange={handleDefectFilterChange}\n                                          >\n                                                {defectTypes.map(type => (\n                                                      <Select.Option key={type} value={type}>\n                                                            {type === 'all' ? '全部缺陷' : type}\n                                                      </Select.Option>\n                                                ))}\n                                          </Select>\n                                    </div>\n                                    {/* 检测结果列表部分 */}\n                                    <div\n                                          className=\"defects-container\"\n                                          style={{\n                                                height: '350px', // 固定高度\n                                                overflow: 'auto',\n                                                marginBottom: '16px',\n                                          }}\n                                    >\n                                          <div\n                                                className=\"defects-list\"\n                                                ref={defectsListRef}\n                                          >\n                                                {processedResults.length > 0 ? (\n                                                      processedResults.map((defect, index) => (\n                                                            <div key={index} className=\"defect-item\">\n                                                                  <div className=\"defect-info\">\n                                                                        <h4><span className=\"label-width\">类别:</span> {defect.type}</h4>\n                                                                        {defect.bbox && (\n                                                                              <p className=\"coordinates-info\">\n                                                                                    <span className=\"coord-row\">\n                                                                                          <span className=\"label-width\">坐标:</span>\n                                                                                          <span className=\"coord-pair\">x1={defect.bbox.x1}</span>\n                                                                                          <span className=\"coord-pair\">y1={defect.bbox.y1}</span>\n                                                                                    </span>\n                                                                                    <span className=\"coord-row\">\n                                                                                          <span className=\"label-width\"></span>\n                                                                                          <span className=\"coord-pair\">x2={defect.bbox.x2}</span>\n                                                                                          <span className=\"coord-pair\">y2={defect.bbox.y2}</span>\n                                                                                    </span>\n                                                                              </p>\n                                                                        )}\n                                                                        {defect.confidence && <p><span className=\"label-width\">置信度:</span> {defect.confidence}%</p>}\n                                                                  </div>\n                                                            </div>\n                                                      ))\n                                                ) : (\n                                                      <div className=\"defect-item empty-defect\">\n                                                            <div className=\"defect-info\">\n                                                                  <h4>暂无检测结果</h4>\n                                                                  <p>开始检测后将在此显示详细信息</p>\n                                                            </div>\n                                                      </div>\n                                                )}\n                                          </div>\n                                    </div>\n                                    {/* 饼图和图例部分 */}\n                                    <div className=\"statistics-section\" style={{ flex: '2', minHeight: '300px', display: 'flex', flexDirection: 'column' }}>\n                                          {detectionResults.statistics.defect_types && Object.keys(detectionResults.statistics.defect_types).length > 0 ? (\n                                                <ReactECharts\n                                                      option={getChartOption()}\n                                                      style={{ height: '100%', flex: 1 }}\n                                                      notMerge={true}\n                                                />\n                                          ) : (\n                                                <div style={{\n                                                      display: 'flex',\n                                                      flexDirection: 'column',\n                                                      justifyContent: 'center',\n                                                      alignItems: 'center',\n                                                      height: '100%',\n                                                      color: '#aaa'\n                                                }}>\n                                                      <p style={{ margin: 0 }}>检测完成后将在此显示统计数据</p>\n                                                      <p style={{ margin: 0 }}>\n                                                            可检测: 鼠咬, 开路, 短路, 毛刺和杂铜等\n                                                      </p>\n                                                </div>\n                                          )}\n                                    </div>\n                              </div>\n\n                              <div className=\"model-section\">\n                                    <div className=\"model-header\">\n                                          <h2>模型管理</h2>\n                                          <Select\n                                                value={selectedModel}\n                                                onChange={handleModelChange}\n                                                style={{ width: '100%' }}\n                                          >\n                                                <Select.Option value=\"yolov11\">Yolov11</Select.Option>\n                                                <Select.Option value=\"yolov11-vote2\">Yolov11-vote2</Select.Option>\n                                                <Select.Option value=\"yolov11-vote4\">Yolov11-vote4</Select.Option>\n                                          </Select>\n                                    </div>\n                                    <div className=\"metrics\">\n                                          <div className=\"metric-item\">\n                                                <span>Precision</span>\n                                                <span className=\"metric-value\">\n                                                      {selectedModel === 'yolov11' ? '97.72%' :\n                                                            selectedModel === 'yolov11-vote2' ? '97.45%' :\n                                                                  '96.99%'}\n                                                </span>\n                                          </div>\n                                          <div className=\"metric-item\">\n                                                <span>Recall</span>\n                                                <span className=\"metric-value\">\n                                                      {selectedModel === 'yolov11' ? '84.41%' :\n                                                            selectedModel === 'yolov11-vote2' ? '85.97%' :\n                                                                  '87.32%'}\n                                                </span>\n                                          </div>\n                                          <div className=\"metric-item\">\n                                                <span>mAP@0.5</span>\n                                                <span className=\"metric-value\">\n                                                      {selectedModel === 'yolov11' ? '92.39%' :\n                                                            selectedModel === 'yolov11-vote2' ? '93.02%' :\n                                                                  '93.58%'}\n                                                </span>\n                                          </div>\n                                          <div className=\"metric-item\">\n                                                <span>mAP@0.5:0.95</span>\n                                                <span className=\"metric-value\">\n                                                      {selectedModel === 'yolov11' ? '68.18%' :\n                                                            selectedModel === 'yolov11-vote2' ? '69.20%' :\n                                                                  '69.49%'}\n                                                </span>\n                                          </div>\n                                    </div>\n                                    <div className=\"threshold-settings\">\n                                          <h3>阈值设置</h3>\n                                          <div className=\"threshold-item\">\n                                                <span>IoU 阈值</span>\n                                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                                                      {/* 左侧显示当前值并支持用户输入 */}\n                                                      <div className=\"custom-input-number\">\n                                                            <InputNumber\n                                                                  min={0.1}\n                                                                  max={1.0}\n                                                                  step={0.01}\n                                                                  value={iouThreshold}\n                                                                  onChange={(value) => setIouThreshold(value || 0.1)} // 防止输入为空\n                                                                  style={{ width: '80px' }}\n                                                                  controls={false}\n                                                                  className=\"threshold-input\"\n                                                            />\n                                                            <div className=\"custom-controls\">\n                                                                  <div className=\"control-up\" onClick={() => {\n                                                                        const newValue = parseFloat((iouThreshold + 0.01).toFixed(2));\n                                                                        if (newValue <= 1.0) setIouThreshold(newValue);\n                                                                  }}>\n                                                                        <div className=\"control-icon\">+</div>\n                                                                  </div>\n                                                                  <div className=\"control-down\" onClick={() => {\n                                                                        const newValue = parseFloat((iouThreshold - 0.01).toFixed(2));\n                                                                        if (newValue >= 0.1) setIouThreshold(newValue);\n                                                                  }}>\n                                                                        <div className=\"control-icon\">-</div>\n                                                                  </div>\n                                                            </div>\n                                                      </div>\n                                                      {/* 右侧滑动条 */}\n                                                      <Slider\n                                                            min={0.1}\n                                                            max={1.0}\n                                                            step={0.01}\n                                                            value={iouThreshold}\n                                                            onChange={(value) => setIouThreshold(value)}\n                                                            tooltip={{ formatter: (value) => `IoU: ${value.toFixed(2)}` }}\n                                                            style={{ flex: 1 }}\n                                                      />\n                                                </div>\n                                          </div>\n                                          <div className=\"threshold-item\">\n                                                <span>置信度阈值</span>\n                                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                                                      {/* 左侧显示当前值并支持用户输入 */}\n                                                      <div className=\"custom-input-number\">\n                                                            <InputNumber\n                                                                  min={0.1}\n                                                                  max={1.0}\n                                                                  step={0.01}\n                                                                  value={confThreshold}\n                                                                  onChange={(value) => setConfThreshold(value || 0.1)} // 防止输入为空\n                                                                  style={{ width: '80px' }}\n                                                                  controls={false}\n                                                                  className=\"threshold-input\"\n                                                            />\n                                                            <div className=\"custom-controls\">\n                                                                  <div className=\"control-up\" onClick={() => {\n                                                                        const newValue = parseFloat((confThreshold + 0.01).toFixed(2));\n                                                                        if (newValue <= 1.0) setConfThreshold(newValue);\n                                                                  }}>\n                                                                        <div className=\"control-icon\">+</div>\n                                                                  </div>\n                                                                  <div className=\"control-down\" onClick={() => {\n                                                                        const newValue = parseFloat((confThreshold - 0.01).toFixed(2));\n                                                                        if (newValue >= 0.1) setConfThreshold(newValue);\n                                                                  }}>\n                                                                        <div className=\"control-icon\">-</div>\n                                                                  </div>\n                                                            </div>\n                                                      </div>\n                                                      {/* 右侧滑动条 */}\n                                                      <Slider\n                                                            min={0.1}\n                                                            max={1.0}\n                                                            step={0.01}\n                                                            value={confThreshold}\n                                                            onChange={(value) => setConfThreshold(value)}\n                                                            tooltip={{ formatter: (value) => `Conf: ${value.toFixed(2)}` }}\n                                                            style={{ flex: 1 }}\n                                                      />\n                                                </div>\n                                          </div>\n                                    </div>\n                              </div>\n                        </div>\n                  </Layout>\n            </Layout>\n      );\n}\n\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n      <React.StrictMode>\r\n            <App />\r\n      </React.StrictMode>,\r\n      document.getElementById('root')\r\n);"],"sourceRoot":""}