{"version":3,"sources":["components/Login.js","App.js","index.js"],"names":["TabPane","Tabs","Login","_ref","onLoginSuccess","activeTab","setActiveTab","useState","loading","setLoading","loginForm","Form","useForm","registerForm","useEffect","resetFields","_jsx","className","style","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","children","_jsxs","activeKey","onChange","centered","tab","SafetyOutlined","form","name","onFinish","async","data","axios","post","values","status","message","success","localStorage","setItem","token","JSON","stringify","user","error","_error$response","_error$response$data","errMsg","response","layout","size","Item","rules","required","Input","prefix","UserOutlined","placeholder","suffix","Tooltip","title","InfoCircleOutlined","color","Password","LockOutlined","Button","type","htmlType","block","username","password","email","phone","setFieldsValue","_error$response2","_error$response2$data","MailOutlined","pattern","PhoneOutlined","min","dependencies","_ref2","getFieldValue","validator","_","value","Promise","reject","Error","resolve","API_BASE_URL","process","REACT_APP_API_URL","defaults","baseURL","Header","Sider","Content","Layout","App","systemStatus","setSystemStatus","cpuUsage","memoryUsage","uptime","detectionResults","setDetectionResults","defects","statistics","defect_types","selectedImage","setSelectedImage","detectionProgress","setDetectionProgress","zoomLevel","setZoomLevel","imageList","setImageList","currentImageIndex","setCurrentImageIndex","isBatchProcessing","setIsBatchProcessing","batchProgress","setBatchProgress","showNavigation","setShowNavigation","detectionHistory","setDetectionHistory","previewUrls","setPreviewUrls","isUploading","setIsUploading","isDragging","setIsDragging","dragStart","setDragStart","x","y","imagePosition","setImagePosition","scale","setScale","position","setPosition","imageWrapperRef","useRef","isPaused","setIsPaused","defectFilter","setDefectFilter","processedResults","setProcessedResults","defectTypes","setDefectTypes","isPausedRef","isCameraActive","setIsCameraActive","videoStream","setVideoStream","videoRef","isCapturing","setIsCapturing","captureInterval","setCaptureInterval","currentRunTime","setCurrentRunTime","runTimeInterval","setRunTimeInterval","defectsListRef","defectsListHover","setDefectsListHover","isLoggedIn","setIsLoggedIn","currentUser","setCurrentUser","imageDimensions","setImageDimensions","startTimeRef","fetchSystemStatus","get","cpu_usage","memory_usage","console","statusInterval","setInterval","clearInterval","current","log","srcObject","play","then","catch","err","forEach","url","URL","revokeObjectURL","getTracks","track","stop","getItem","parse","resetImageAndDetectionStates","e","toggleContinuousCapture","setStartTime","setEndTime","end","Date","now","finalDuration","Math","floor","hours","minutes","info","warning","paused","ended","start","timeInterval","duration","readyState","interval","warn","playErr","capturedFrame","captureVideoFrame","videoWidth","videoHeight","newWidth","newHeight","round","captureCanvas","document","createElement","width","height","getContext","drawImage","scaleCanvas","toBlob","blob","file","File","toLocaleTimeString","result","processImage","length","resetAllStates","filterDefects","filterType","filtered","filter","defect","toLowerCase","types","includes","push","getDefectColor","defectType","renderBoundingBoxes","videoPosition","left","top","scaleFactor","videoElement","videoRect","window","getComputedStyle","getBoundingClientRect","parentRect","parentElement","scaleX","scaleY","imageSize","boxOffset","map","index","bbox","x1","y1","x2","y2","offsetX","offsetY","wrapperRect","containerW","containerH","imgW","imgH","imgRatio","contentW","contentH","border","backgroundColor","pointerEvents","zIndex","background","padding","fontSize","whiteSpace","confidence","boxWidth","boxHeight","handleImageUpload","img","Image","onload","canvas","resizedFile","imageUrl","createObjectURL","onerror","src","debouncedHandleFolderUpload","debounce","func","delay","debounceTimer","_len","arguments","args","Array","_key","context","this","clearTimeout","setTimeout","apply","fileList","newFiles","fileObj","originFileObj","startsWith","urls","resetImagePosition","handleImageChange","selectedModel","setSelectedModel","iouThreshold","setIouThreshold","confThreshold","setConfThreshold","formData","FormData","append","params","vote_threshold","orientation_count","iou_threshold","conf_threshold","img_width","img_height","startTime","endTime","handleImageScrolling","targetElement","target","isInsideImageWrapper","preventDefault","addEventListener","passive","removeEventListener","body","overflow","documentElement","handleMouseLeave","handleLoginSuccess","resizeObserver","ResizeObserver","observe","disconnect","alt","SettingOutlined","BulbOutlined","onClick","handleLogout","removeItem","cursor","display","gap","minWidth","newPauseState","history","i","checkPauseInterval","progress","icon","LoadingOutlined","SearchOutlined","alignItems","flexDirection","marginTop","borderRadius","textAlign","max","marginLeft","Progress","percent","showInfo","strokeColor","justifyContent","calculateUptime","Upload","accept","showUploadList","beforeUpload","disabled","UploadOutlined","directory","multiple","FolderOutlined","VideoCameraOutlined","CameraOutlined","navigator","mediaDevices","getUserMedia","stream","video","ideal","showDirectoryPicker","directoryHandle","annotatedImagesFolder","getDirectoryHandle","create","jsonFolder","_detectionHistory$i2","_detectionHistory$i2$","_detectionHistory$i3","_detectionHistory$i3$","imageName","split","slice","join","annotatedImageName","annotatedImageHandle","getFileHandle","writableStream","createWritable","image","_detectionHistory$i","_detectionHistory$i$r","strokeStyle","lineWidth","strokeRect","fillStyle","font","fillText","write","close","jsonFileName","jsonFileHandle","jsonWritableStream","jsonResult","FileTextOutlined","handleExportReport","reportContainer","appendChild","dateStr","toLocaleDateString","timeStr","batchStatistics","totalImages","totalDefects","defectTypeCounts","imagesWithDefects","averageDefectsPerImage","toFixed","batchStatsRows","Object","entries","count","percentage","currentImageDefectsRows","positionStr","innerHTML","html2canvasModule","html2canvas","default","useCORS","logging","jsPdfModule","jsPDF","imgData","toDataURL","pdf","orientation","unit","format","imgHeight","heightLeft","addImage","addPage","filename","getTime","save","removeChild","destroy","querySelector","onMouseEnter","onMouseLeave","_imageWrapperRef$curr2","imgRect","clientX","right","clientY","bottom","ref","autoPlay","playsInline","muted","objectFit","_Fragment","onMouseDown","button","onMouseMove","newX","newY","maxOffset","boundedX","boundedY","onMouseUp","handleMouseUp","onWheel","_imageWrapperRef$curr","delta","deltaY","newScale","rect","mouseX","mouseY","centerX","centerY","scaleChange","newPosition","maxWidth","maxHeight","transform","transformOrigin","transition","userSelect","draggable","LeftOutlined","handlePrevImage","RightOutlined","handleNextImage","onDrop","dataTransfer","files","marginBottom","flex","fontWeight","Pagination","total","pageSize","page","showQuickJumper","showSizeChanger","Select","Option","minHeight","keys","ReactECharts","option","getChartOption","_detectionResults$sta","tooltip","trigger","legend","show","series","defectNames","colors","colorKey","formatter","orient","itemGap","radius","center","label","alignTo","margin","lineHeight","rich","b","align","labelLine","length2","minTurnAngle","maxSurfaceAngle","emphasis","itemStyle","shadowBlur","shadowOffsetX","shadowColor","notMerge","InputNumber","step","controls","newValue","parseFloat","Slider","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"kkBAMA,MAAM,QAAEA,GAAYC,IAkPLC,MA9ODC,IAAyB,IAAxB,eAAEC,GAAgBD,EAC3B,MAAOE,EAAWC,GAAgBC,mBAAS,UACpCC,EAASC,GAAcF,oBAAS,IAEhCG,GAAaC,IAAKC,WAClBC,GAAgBF,IAAKC,UAG5BE,qBAAU,KACc,UAAdT,EACEK,EAAUK,cAEVF,EAAaE,aACnB,GACH,CAACV,EAAWK,EAAWG,IAmD1B,OACMG,cAAA,OAAKC,UAAU,kBAAkBC,MAAO,CAClCC,gBAAiB,mBACjBC,iBAAkB,YAClBC,mBAAoB,gBACpBC,eAAgB,SACpBC,SACIC,eAAA,OAAKP,UAAU,gBAAeM,SAAA,CACxBC,eAAA,OAAKP,UAAU,eAAcM,SAAA,CACvBP,cAAA,MAAAO,SAAI,iEACJP,cAAA,KAAGC,UAAU,iBAAgBM,SAAC,sGAGpCC,eAAA,OAAKP,UAAU,YAAWM,SAAA,CACpBP,cAAA,OAAKC,UAAU,iBACfD,cAAA,OAAKC,UAAU,iBAEfO,eAACvB,IAAI,CAACwB,UAAWpB,EAAWqB,SAAUpB,EAAcqB,UAAQ,EAACV,UAAU,aAAYM,SAAA,CAC7EC,eAACxB,EAAO,CAAC4B,IAAI,eAAIL,SAAA,CACXC,eAAA,OAAKP,UAAU,gBAAeM,SAAA,CACxBP,cAACa,IAAc,CAACZ,UAAU,uBAC1BD,cAAA,KAAAO,SAAG,wGAETC,eAACb,IAAI,CACCmB,KAAMpB,EACNqB,KAAK,QACLC,SAvEtBC,UACdxB,GAAW,GACX,IACM,MACMyB,SADiBC,IAAMC,KAAK,kCAAmCC,IAC/CH,KACF,YAAhBA,EAAKI,QACHC,IAAQC,QAAQ,kCAChBC,aAAaC,QAAQ,QAASR,EAAKS,OACnCF,aAAaC,QAAQ,OAAQE,KAAKC,UAAUX,EAAKY,OACjD1C,EAAe8B,EAAKY,OAEpBP,IAAQQ,MAAMb,EAAKa,OAAS,2BAExC,CAAE,MAAOA,GAAQ,IAADC,EAAAC,EACV,MAAMC,GAAuB,QAAdF,EAAAD,EAAMI,gBAAQ,IAAAH,GAAM,QAANC,EAAdD,EAAgBd,YAAI,IAAAe,OAAN,EAAdA,EAAsBF,QAAS,mDAC9CR,IAAQQ,MAAMG,EACpB,CAAC,QACKzC,GAAW,EACjB,GAsDoC2C,OAAO,WACPC,KAAK,QAAO9B,SAAA,CAEZP,cAACL,IAAK2C,KAAI,CACJvB,KAAK,WACLwB,MAAO,CAAC,CAAEC,UAAU,EAAMjB,QAAS,yCAAYhB,SAE/CP,cAACyC,IAAK,CACAC,OAAQ1C,cAAC2C,IAAY,IACrBC,YAAY,qBACZC,OACM7C,cAAC8C,IAAO,CAACC,MAAM,iFAAexC,SACxBP,cAACgD,IAAkB,CAAC9C,MAAO,CAAE+C,MAAO,2BAK5DjD,cAACL,IAAK2C,KAAI,CACJvB,KAAK,WACLwB,MAAO,CAAC,CAAEC,UAAU,EAAMjB,QAAS,mCAAWhB,SAE9CP,cAACyC,IAAMS,SAAQ,CACTR,OAAQ1C,cAACmD,IAAY,IACrBP,YAAY,mBAGxB5C,cAACL,IAAK2C,KAAI,CAAA/B,SACJP,cAACoD,IAAM,CACDC,KAAK,UACLC,SAAS,SACTC,OAAK,EACL/D,QAASA,EACTS,UAAU,eAAcM,SAC7B,wBA1CG,SAgDtBC,eAACxB,EAAO,CAAC4B,IAAI,eAAIL,SAAA,CACXC,eAAA,OAAKP,UAAU,gBAAeM,SAAA,CACxBP,cAAC2C,IAAY,CAAC1C,UAAU,qBAAqBC,MAAO,CAAE+C,MAAO,aAC7DjD,cAAA,KAAAO,SAAG,gFAETC,eAACb,IAAI,CACCmB,KAAMjB,EACNkB,KAAK,WACLC,SAjGnBC,UACjBxB,GAAW,GACX,UAEY0B,IAAMC,KAAK,qCAAsC,CACjDoC,SAAUnC,EAAOmC,SACjBC,SAAUpC,EAAOoC,SACjBC,MAAOrC,EAAOqC,MACdC,MAAOtC,EAAOsC,QAGpBpC,IAAQC,QAAQ,oDAChBlC,EAAa,SAEbI,EAAUkE,eAAe,CAAEJ,SAAUnC,EAAOmC,SAAUC,SAAUpC,EAAOoC,UAC7E,CAAE,MAAO1B,GAAQ,IAAD8B,EAAAC,EACV,MAAM5B,GAAuB,QAAd2B,EAAA9B,EAAMI,gBAAQ,IAAA0B,GAAM,QAANC,EAAdD,EAAgB3C,YAAI,IAAA4C,OAAN,EAAdA,EAAsB/B,QAAS,mDAC9CR,IAAQQ,MAAMG,EACpB,CAAC,QACKzC,GAAW,EACjB,GA8EoC2C,OAAO,WACPC,KAAK,QAAO9B,SAAA,CAEZP,cAACL,IAAK2C,KAAI,CACJvB,KAAK,WACLwB,MAAO,CAAC,CAAEC,UAAU,EAAMjB,QAAS,yCAAYhB,SAE/CP,cAACyC,IAAK,CACAC,OAAQ1C,cAAC2C,IAAY,IACrBC,YAAY,qBACZC,OACM7C,cAAC8C,IAAO,CAACC,MAAM,iFAAexC,SACxBP,cAACgD,IAAkB,CAAC9C,MAAO,CAAE+C,MAAO,2BAK5DjD,cAACL,IAAK2C,KAAI,CACJvB,KAAK,QACLwB,MAAO,CACD,CAAEC,UAAU,EAAMjB,QAAS,kCAC3B,CAAE8B,KAAM,QAAS9B,QAAS,iEAC9BhB,SAEFP,cAACyC,IAAK,CACAC,OAAQ1C,cAAC+D,IAAY,IACrBnB,YAAY,mBAGxB5C,cAACL,IAAK2C,KAAI,CACJvB,KAAK,QACLwB,MAAO,CACD,CAAEC,UAAU,EAAMjB,QAAS,wCAC3B,CAAEyC,QAAS,gBAAiBzC,QAAS,2DACzChB,SAEFP,cAACyC,IAAK,CACAC,OAAQ1C,cAACiE,IAAa,IACtBrB,YAAY,yBAGxB5C,cAACL,IAAK2C,KAAI,CACJvB,KAAK,WACLwB,MAAO,CACD,CAAEC,UAAU,EAAMjB,QAAS,kCAC3B,CAAE2C,IAAK,EAAG3C,QAAS,sDACvBhB,SAEFP,cAACyC,IAAMS,SAAQ,CACTR,OAAQ1C,cAACmD,IAAY,IACrBP,YAAY,mBAGxB5C,cAACL,IAAK2C,KAAI,CACJvB,KAAK,kBACLoD,aAAc,CAAC,YACf5B,MAAO,CACD,CAAEC,UAAU,EAAMjB,QAAS,kCAC3B6C,IAAA,IAAC,cAAEC,GAAeD,EAAA,MAAM,CAClBE,UAASA,CAACC,EAAGC,IACFA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OAAO,IAAIC,MAAM,iEAFnBF,QAAQG,UAIhC,GACLrE,SAEFP,cAACyC,IAAMS,SAAQ,CACTR,OAAQ1C,cAACmD,IAAY,IACrBP,YAAY,+BAGxB5C,cAACL,IAAK2C,KAAI,CAAA/B,SACJP,cAACoD,IAAM,CACDC,KAAK,UACLC,SAAS,SACTC,OAAK,EACL/D,QAASA,EACTS,UAAU,eAAcM,SAC7B,wBAzFG,eAiG5BC,eAAA,OAAKP,UAAU,eAAcM,SAAA,CACvBC,eAAA,KAAAD,SAAA,CAAG,6BAAMP,cAAA,QAAAO,SAAM,8DACfC,eAAA,KAAAD,SAAA,CAAG,6BAAMP,cAAA,QAAAO,SAAM,wBAIjC,ECvOlB,MAAMsE,EAAeC,mIAAYC,mBAAqB,4BAGtD5D,IAAM6D,SAASC,QAAUJ,EAEzB,MAAM,OAAEK,EAAM,MAAEC,EAAK,QAAEC,GAAYC,KAC3BrG,QAAQ,GAAIC,IA+6ELqG,MA76Ef,WACM,MAAOC,EAAcC,GAAmBjG,mBAAS,CAC3C+B,OAAQ,SACRmE,SAAU,EACVC,YAAa,EACbC,OAAQ,WAGPC,EAAkBC,GAAuBtG,mBAAS,CACnDuG,QAAS,GACTC,WAAY,CACNC,aAAc,CAAC,MAIpBC,EAAeC,GAAoB3G,mBAAS,OAC5CC,EAASC,GAAcF,oBAAS,IAChC4G,EAAmBC,GAAwB7G,mBAAS,IACpD8G,EAAWC,GAAgB/G,mBAAS,IAMpCgH,EAAWC,GAAgBjH,mBAAS,KACpCkH,EAAmBC,GAAwBnH,mBAAS,IACpDoH,EAAmBC,GAAwBrH,oBAAS,IACpDsH,EAAeC,GAAoBvH,mBAAS,IAC5CwH,EAAgBC,GAAqBzH,oBAAS,IAC9C0H,EAAkBC,GAAuB3H,mBAAS,KAClD4H,EAAaC,IAAkB7H,mBAAS,KACxC8H,GAAaC,IAAkB/H,oBAAS,IACxCgI,GAAYC,IAAiBjI,oBAAS,IACtCkI,GAAWC,IAAgBnI,mBAAS,CAAEoI,EAAG,EAAGC,EAAG,KAC/CC,GAAeC,IAAoBvI,mBAAS,CAAEoI,EAAG,EAAGC,EAAG,KACvDG,GAAOC,IAAYzI,mBAAS,IAC5B0I,GAAUC,IAAe3I,mBAAS,CAAEoI,EAAG,EAAGC,EAAG,IAC9CO,GAAkBC,iBAAO,OACxBC,GAAUC,IAAe/I,oBAAS,IAElCgJ,GAAcC,IAAmBjJ,mBAAS,QAC1CkJ,GAAkBC,IAAuBnJ,mBAAS,KAClDoJ,GAAaC,IAAkBrJ,mBAAS,CAAC,MAAO,aAAc,eAAgB,QAAS,OAAQ,oBAChGsJ,GAAcT,kBAAO,IAGpBU,GAAgBC,IAAqBxJ,oBAAS,IAC9CyJ,GAAaC,IAAkB1J,mBAAS,MACzC2J,GAAWd,iBAAO,OACjBe,GAAaC,IAAkB7J,oBAAS,IACxC8J,GAAiBC,IAAsB/J,mBAAS,OAEhDgK,GAAgBC,IAAqBjK,mBAAS,YAC9CkK,GAAiBC,IAAsBnK,mBAAS,MAcjDoK,IAZoBvB,iBAAO,IAYVA,iBAAO,QAEvBwB,GAAkBC,IAAuBtK,oBAAS,IAElDuK,GAAYC,IAAiBxK,oBAAS,IACtCyK,GAAaC,IAAkB1K,mBAAS,OAExC2K,GAAiBC,IAAsB5K,mBAAS,MAGjD6K,GAAehC,iBAAO,MAE5BtI,qBAAU,KACJ,MAAMuK,EAAoBpJ,UACpB,IACM,MAAMkB,QAAiBhB,IAAMmJ,IAAI,sBACjC9E,EAAgB,CACVlE,OAAQa,EAASjB,KAAKI,OACtBmE,SAAUtD,EAASjB,KAAKqJ,UACxB7E,YAAavD,EAASjB,KAAKsJ,aAC3B7E,OAAQxD,EAASjB,KAAKyE,QAElC,CAAE,MAAO5D,GACH0I,QAAQ1I,MAAM,gCAAiCA,GAC/CR,IAAQQ,MAAM,mDACpB,GAGNsI,IACA,MAAMK,EAAiBC,YAAYN,EAAmB,KACtD,MAAO,IAAMO,cAAcF,EAAe,GAC7C,IAEH5K,qBAAU,KACJ+I,GAAYgC,QAAUxC,EAAQ,GACjC,CAACA,KAEJvI,qBAAU,KACAoJ,GAAS2B,SAAW7B,KAClByB,QAAQK,IAAI,kEACZ5B,GAAS2B,QAAQE,UAAY/B,GAC7BE,GAAS2B,QAAQG,OACVC,MAAK,IAAMR,QAAQK,IAAI,sDACvBI,OAAMC,IACDV,QAAQ1I,MAAM,oDAAuBoJ,GACrC5J,IAAQQ,MAAM,yCAAaoJ,EAAI5J,QAAQ,IAEzD,GACH,CAACyH,KAGJlJ,qBAAU,IACG,KACDqH,EAAYiE,SAAQC,GAAOC,IAAIC,gBAAgBF,IAAK,GAE7D,CAAClE,IAGJrH,qBAAU,IACG,KACG2J,IACEmB,cAAcnB,IAEhBT,IACEA,GAAYwC,YAAYJ,SAAQK,GAASA,EAAMC,SAEjDrC,IACEuB,cAAcvB,GACpB,GAET,IAEHvJ,qBAAU,KAEJ,MAAM6B,EAAQF,aAAakK,QAAQ,SAC7B7J,EAAOL,aAAakK,QAAQ,QAC9BhK,GAASG,IACPiI,IAAc,GACdE,GAAerI,KAAKgK,MAAM9J,IAChC,GACH,IAGH,MAsFM+J,GAA+BA,KAC/BpB,QAAQK,IAAI,sEAGZ3D,EAAYiE,SAAQC,IACd,IACMC,IAAIC,gBAAgBF,EAC1B,CAAE,MAAOS,GACHrB,QAAQ1I,MAAM,qCAAa+J,EACjC,KAINtF,EAAa,IACbY,GAAe,IACflB,EAAiB,MACjBQ,EAAqB,GACrBQ,EAAoB,IACpBrB,EAAoB,CACdC,QAAS,GACTC,WAAY,CACNC,aAAc,CAAC,KAG3B0C,GAAoB,IACpBtC,EAAqB,GACrBU,EAAiB,GACjBkB,GAAS,GACTE,GAAY,CAAEP,EAAG,EAAGC,EAAG,IAEvBuC,GAAmB,MAEnBM,QAAQK,IAAI,qEAAc,EAmF1BiB,GAA0B9K,UAM1B,GAJA+K,GAAa,MACb5B,GAAaS,QAAU,KACvBoB,GAAW,MACXzC,GAAkB,WACdL,GAAa,CAcX,GAZIE,KACEuB,cAAcvB,IACdC,GAAmB,OAIrBG,KACEmB,cAAcnB,IACdC,GAAmB,OAIrBU,GAAaS,QAAS,CACpB,MAAMqB,EAAMC,KAAKC,MACjBH,GAAWC,GAGX,MAAMG,EAAgBC,KAAKC,OAAOL,EAAM9B,GAAaS,SAAW,KAC1D2B,EAAQF,KAAKC,MAAMF,EAAgB,MACnCI,EAAUH,KAAKC,MAAOF,EAAgB,KAAQ,IAEpD7C,GAAkB,GAAGgD,gBAAUC,gBADfJ,EAAgB,WAEtC,CAaA,OAXAjD,IAAe,GAGfvD,EAAoB,CACdC,QAAS,GACTC,WAAY,CACNC,aAAc,CAAC,UAI3BzE,IAAQmL,KAAK,6CAEnB,CAGA,IAAK5D,GAEC,YADAvH,IAAQoL,QAAQ,8CAKtB,IAAKzD,GAAS2B,UAAY3B,GAAS2B,QAAQE,UAGrC,OAFAN,QAAQ1I,MAAM,+DACdR,IAAQQ,MAAM,oGAKpB,KACUmH,GAAS2B,QAAQ+B,QAAU1D,GAAS2B,QAAQgC,eACpC3D,GAAS2B,QAAQG,OACvBP,QAAQK,IAAI,oDAExB,CAAE,MAAOK,GAGH,OAFAV,QAAQ1I,MAAM,wCAAWoJ,QACzB5J,IAAQQ,MAAM,uCAEpB,CAGA,MAAM+K,EAAQX,KAAKC,MACnBJ,GAAac,GACb1C,GAAaS,QAAUiC,EACvBb,GAAW,MAGX,MAAMc,EAAepC,aAAY,KAC3B,MAAMyB,EAAMD,KAAKC,MAEXY,EAAWV,KAAKC,OAAOH,EAAMhC,GAAaS,SAAW,KACrD2B,EAAQF,KAAKC,MAAMS,EAAW,MAC9BP,EAAUH,KAAKC,MAAOS,EAAW,KAAQ,IAE/CxD,GAAkB,GAAGgD,gBAAUC,gBADfO,EAAW,WAC2B,GACzD,KAEHtD,GAAmBqD,GAEnB3D,IAAe,GACf7H,IAAQmL,KAAK,wCACbjC,QAAQK,IAAI,4EAAiB5B,GAAS2B,QAAQoC,YAG9C,MAAMC,EAAWvC,aAAY1J,UACvB,IAEM,IAAKiI,GAAS2B,UAAY3B,GAAS2B,QAAQE,YAAcjC,GAanD,OAZA2B,QAAQ0C,KAAK,sHACbvC,cAAcsC,GAGVzD,KACEmB,cAAcnB,IACdC,GAAmB,OAGzBN,IAAe,GACfE,GAAmB,WACnB/H,IAAQoL,QAAQ,kFAKtB,GAAIzD,GAAS2B,QAAQ+B,QAAU1D,GAAS2B,QAAQgC,MAAO,CACjDpC,QAAQ0C,KAAK,wFACb,UACYjE,GAAS2B,QAAQG,MAC7B,CAAE,MAAOoC,GAaH,OAZA3C,QAAQ1I,MAAM,oDAAaqL,GAC3B7L,IAAQQ,MAAM,8FACd6I,cAAcsC,GAGVzD,KACEmB,cAAcnB,IACdC,GAAmB,OAGzBN,IAAe,QACfE,GAAmB,KAEzB,CACN,CAGA,MAAM+D,OAxNEC,MACpB,IAAKpE,GAAS2B,UAAY/B,GAEpB,OADA2B,QAAQ1I,MAAM,wFACP,KAIb,GAAImH,GAAS2B,QAAQ+B,QAAU1D,GAAS2B,QAAQgC,MAK1C,OAJApC,QAAQ0C,KAAK,8FACbjE,GAAS2B,QAAQG,OAAOE,OAAMC,IACxBV,QAAQ1I,MAAM,oDAAaoJ,EAAI,IAE9B,KAIb,MAAMoC,EAAarE,GAAS2B,QAAQ0C,WAC9BC,EAActE,GAAS2B,QAAQ2C,YAErC,IAAKD,IAAeC,EAEd,OADA/C,QAAQ0C,KAAK,wCAAWI,EAAYC,GAC7B,KAMb,IAAIC,EAAUC,EAHdjD,QAAQK,IAAI,gEAAeyC,EAAY,IAAKC,GAKxCD,EAAa,KAAOC,EAAc,KAEhCC,EAAW,IACXC,EAAYpB,KAAKqB,MAAOH,EAAcD,EAAc,OAGpDE,EAAWF,EACXG,EAAYF,GAGlB/C,QAAQK,IAAI,sEAAgB2C,EAAU,IAAKC,GAG3C,MAAME,EAAgBC,SAASC,cAAc,UAC7CF,EAAcG,MAAQR,EACtBK,EAAcI,OAASR,EAGJI,EAAcK,WAAW,MACjCC,UAAUhF,GAAS2B,QAAS,EAAG,EAAG0C,EAAYC,GAGzD,MAAMW,EAAcN,SAASC,cAAc,UAY3C,OAXAK,EAAYJ,MAAQN,EACpBU,EAAYH,OAASN,EAGJS,EAAYF,WAAW,MAC/BC,UAAUN,EAAe,EAAG,EAAGL,EAAYC,EAAa,EAAG,EAAGC,EAAUC,GAGjFvD,GAAmB,CAAE4D,MAAON,EAAUO,OAAQN,IAGvC,IAAIjJ,SAASG,IACduJ,EAAYC,QAAQC,IACd,IAAKA,EAGC,OAFA5D,QAAQ1I,MAAM,qCACd6C,EAAQ,MAKd,MAAM0J,EAAO,IAAIC,KAAK,CAACF,GAAO,qBAAsB,CAAEhL,KAAM,eAC5DuB,EAAQ0J,EAAK,GAChB,aAAc,IAAK,GAC1B,EA6IsChB,GAC5B,GAAID,EAAe,CACb5C,QAAQK,IAAI,8CAAW,IAAIqB,MAAOqC,sBAClCpI,EAAqB,IAGrB,MAAMqI,QAAeC,GAAarB,GAClC5C,QAAQK,IAAI,4BAAS2D,EAAO3I,QAAQ6I,OAAS,EAAI,eAAKF,EAAO3I,QAAQ6I,2BAAc,kCAG/E7F,IAAkBI,GAAS2B,UAErB3B,GAAS2B,QAAQ+B,SACfnC,QAAQK,IAAI,kFACZ5B,GAAS2B,QAAQG,OAAOE,OAAMY,GAAKrB,QAAQ1I,MAAM,wCAAW+J,MAIlEpD,GAAoB,IAGpB7C,EAAoB4I,IAG1BrI,EAAqB,IAC3B,MACMqE,QAAQ0C,KAAK,6CAEzB,CAAE,MAAOpL,GACH0I,QAAQ1I,MAAM,wCAAWA,GACzBR,IAAQQ,MAAM,yCAAaA,EAAMR,QACvC,IACH,KAEH+H,GAAmB4D,EAAS,EAO5B0B,GAAiBA,KACjBnE,QAAQK,IAAI,wFAAmBhC,IAC3BW,KACEmB,cAAcnB,IACdC,GAAmB,OAIzBF,GAAkB,WAClBwC,GAAa,MACb5B,GAAaS,QAAU,KACvBoB,GAAW,MAGPnD,GACE+C,MAMN1E,EAAYiE,SAAQC,IACd,IACMC,IAAIC,gBAAgBF,EAC1B,CAAE,MAAOS,GACHrB,QAAQ1I,MAAM,qCAAa+J,EACjC,KAIF9C,IACEA,GAAYwC,YAAYJ,SAAQK,GAASA,EAAMC,SAErDzC,GAAe,MACfF,IAAkB,GAEdM,KACEuB,cAAcvB,IACdC,GAAmB,OAIzB9C,EAAa,IACbY,GAAe,IACflB,EAAiB,MACjBQ,EAAqB,GACrBQ,EAAoB,IACpBrB,EAAoB,CACdC,QAAS,GACTC,WAAY,CACNC,aAAc,CAAC,KAG3B0C,GAAoB,IACpBtC,EAAqB,GACrBU,EAAiB,GACjBkB,GAAS,GACTE,GAAY,CAAEP,EAAG,EAAGC,EAAG,IAEvB6C,QAAQK,IAAI,oDAAW,EAGvB+D,GAAiBC,IACjB,GAAKlJ,GAAqBA,EAAiBE,QAE3C,GAAmB,QAAfgJ,EACEpG,GAAoB9C,EAAiBE,aACpC,CACD,MAAMiJ,EAAWnJ,EAAiBE,QAAQkJ,QAAOC,GAC3CA,EAAO5L,KAAK6L,gBAAkBJ,EAAWI,gBAE/CxG,GAAoBqG,EAC1B,GAINjP,qBAAU,KACJ,GAAI8F,GAAoBA,EAAiBE,QAAS,CAE5C,MAAMqJ,EAAQ,CAAC,OACfvJ,EAAiBE,QAAQsF,SAAQ6D,IACtBE,EAAMC,SAASH,EAAO5L,KAAK6L,gBAC1BC,EAAME,KAAKJ,EAAO5L,KAAK6L,cAC7B,IAENtG,GAAeuG,GAGfN,GAActG,GACpB,IACH,CAAC3C,IAGJ,MAAM0J,GAAkBC,IACD,CACX,WAAc,UACd,aAAgB,UAChB,MAAS,UACT,KAAQ,UACR,gBAAmB,WAGTA,EAAWL,gBAAkB,WAI7CM,GAAsBA,KAEtB,IAAMvJ,IAAkB6C,KAAoBL,IAAgD,IAA5BA,GAAiBkG,OAC3E,OAAO,KAIb,IAAIc,EAAgB,CAAEC,KAAM,EAAGC,IAAK,EAAG5B,MAAO,EAAGC,OAAQ,GACrD4B,EAAc,EAElB,GAAI9G,IAAkBI,GAAS2B,SAAWX,GAAiB,CAErD,MAAM2F,EAAe3G,GAAS2B,QAExBiF,GADqBC,OAAOC,iBAAiBH,GACjCA,EAAaI,yBACzBC,EAAaL,EAAaM,cAAcF,wBAI9CR,EAAgB,CACV1B,MAAO+B,EAAU/B,MACjBC,OAAQ8B,EAAU9B,OAElB0B,KAAMI,EAAUJ,KAAOQ,EAAWR,KAElCC,IAAKG,EAAUH,IAAMO,EAAWP,KAItC,MAAMS,EAASX,EAAc1B,MAAQ7D,GAAgB6D,MAC/CsC,EAASZ,EAAczB,OAAS9D,GAAgB8D,OACtD4B,EAActD,KAAKpI,IAAIkM,EAAQC,GAE/B5F,QAAQK,IAAI,wCAAW,CACjB2E,gBACAa,UAAWpG,GACXnC,MAAO6H,EACPW,UAAW,CAAE5I,EAAG8H,EAAcC,KAAM9H,EAAG6H,EAAcE,MAEjE,CAEA,OAAOlH,GAAiB+H,KAAI,CAACvB,EAAQwB,KAE/B,GAAIxB,EAAOyB,KAAM,CACX,IAAI,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,GAAO7B,EAAOyB,KAGhC,GAAI5H,IAAkBoB,GAAiB,CAEjC,IAAInC,EAAQ,EACRgJ,EAAU,EACVC,EAAU,EACd,GAAIlI,IAAkBoB,IAAmB/B,GAAgB0C,QAAS,CAC5D,MAAMoG,EAAc9I,GAAgB0C,QAAQoF,wBACtCiB,EAAaD,EAAYlD,MACzBoD,EAAaF,EAAYjD,QACvBD,MAAOqD,EAAMpD,OAAQqD,GAASnH,GAChCoH,EAAWF,EAAOC,EAExB,IAAIE,EAAUC,EACVF,EAFmBJ,EAAaC,GAG9BI,EAAWL,EACXM,EAAWD,EAAWD,IAEtBE,EAAWL,EACXI,EAAWC,EAAWF,GAG5BP,GAAWG,EAAaK,GAAY,EACpCP,GAAWG,EAAaK,GAAY,EAEpCzJ,EAAQwJ,EAAWH,CACzB,CACAT,EAAKA,EAAK5I,EAAQgJ,EAClBH,EAAKA,EAAK7I,EAAQiJ,EAClBH,EAAKA,EAAK9I,EAAQgJ,EAClBD,EAAKA,EAAK/I,EAAQiJ,CACxB,CAEA,MAAMjD,EAAQ8C,EAAKF,EACb3C,EAAS8C,EAAKF,EAEpB,OACM5Q,cAAA,OAEME,MAAO,CACD+H,SAAU,WACVyH,KAAM,GAAGiB,MACThB,IAAK,GAAGiB,MACR7C,MAAO,GAAGA,MACVC,OAAQ,GAAGA,MACXyD,OAAQ,aAAanC,GAAeL,EAAO5L,QAC3CqO,gBAAiB,2BACjBC,cAAe,OACfC,OAAQ,KACZrR,SAEFC,eAAA,OAAKN,MAAO,CACN+H,SAAU,WACV0H,IAAK,QACLD,KAAM,IACNmC,WAAYvC,GAAeL,EAAO5L,MAClCJ,MAAO,QACP6O,QAAS,QACTC,SAAU,OACVC,WAAY,UAChBzR,SAAA,CACK0O,EAAO5L,KAAK,IAAE4L,EAAOgD,WAAa,IAAIhD,EAAOgD,eAAiB,OAvBhExB,EA2BvB,CAAO,GAAIxB,EAAOhH,SAAU,CAEtB,MAAMiK,EAAW,GACXC,EAAY,GAClB,IAAIxK,EAAIsH,EAAOhH,SAASN,EAAKuK,EAAW,EACpCtK,EAAIqH,EAAOhH,SAASL,EAAKuK,EAAY,EAQzC,OALIrJ,IAAkBoB,KAChBvC,EAAIA,EAAIiI,EAAcH,EAAcC,KACpC9H,EAAIA,EAAIgI,EAAcH,EAAcE,KAIpC3P,cAAA,OAEME,MAAO,CACD+H,SAAU,WACVyH,KAAM,GAAG/H,MACTgI,IAAK,GAAG/H,MACRmG,MAAO,GAAGmE,MACVlE,OAAQ,GAAGmE,MACXV,OAAQ,aAAanC,GAAeL,EAAO5L,QAC3CqO,gBAAiB,2BACjBC,cAAe,OACfC,OAAQ,KACZrR,SAEFC,eAAA,OAAKN,MAAO,CACN+H,SAAU,WACV0H,IAAK,QACLD,KAAM,IACNmC,WAAYvC,GAAeL,EAAO5L,MAClCJ,MAAO,QACP6O,QAAS,QACTC,SAAU,OACVC,WAAY,UAChBzR,SAAA,CACK0O,EAAO5L,KAAK,IAAE4L,EAAOgD,WAAa,IAAIhD,EAAOgD,eAAiB,OAvBhExB,EA2BvB,CACA,OAAO,IAAI,GACf,EAKF2B,GAAqB9D,IACrB,IAAKA,EACC,OAAO,EAGbhH,IAAe,GAGf,MAAM+K,EAAM,IAAIC,MAyEhB,OAxEAD,EAAIE,OAAS,KAEP,IAAI9E,EAAUC,EAEV2E,EAAItE,MAAQ,KAAOsE,EAAIrE,OAAS,KAE9BP,EAAW,IACXC,EAAYpB,KAAKqB,MAAO0E,EAAIrE,OAASqE,EAAItE,MAAS,OAGlDN,EAAW4E,EAAItE,MACfL,EAAY2E,EAAIrE,QAItB,MAAMwE,EAAS3E,SAASC,cAAc,UACtC0E,EAAOzE,MAAQN,EACf+E,EAAOxE,OAASN,EACJ8E,EAAOvE,WAAW,MAC1BC,UAAUmE,EAAK,EAAG,EAAG5E,EAAUC,GAGnC8E,EAAOpE,QAAOnN,UACR,IAEMkJ,GAAmB,CAAE4D,MAAON,EAAUO,OAAQN,IAG9C,MAAM+E,EAAc,IAAIlE,KAAK,CAACF,GAAOC,EAAKvN,KAAM,CAAEsC,KAAMiL,EAAKjL,OAGvDqP,EAAWpH,IAAIqH,gBAAgBtE,GAGrC7H,EAAa,CAACiM,IACdrL,GAAe,CAACsL,IAChBxM,EAAiBwM,GACjBhM,EAAqB,GAGrBQ,EAAoB,IAGpBrB,EAAoB,CACdC,QAAS,GACTC,WAAY,CACNC,aAAc,CAAC,KAK3B0C,GAAoB,IAEpBtC,EAAqB,GACrBU,EAAiB,GACjBvF,IAAQC,QAAQ,uCACtB,CAAE,MAAOO,GACH0I,QAAQ1I,MAAM,wCAAWA,GACzBR,IAAQQ,MAAM,uCACpB,CAAC,QACKuF,IAAe,EACrB,IACHgH,EAAKjL,KAAM,IAAK,EAGzBgP,EAAIO,QAAU,KACRnI,QAAQ1I,MAAM,wCACdR,IAAQQ,MAAM,wCACduF,IAAe,EAAM,EAG3B+K,EAAIQ,IAAMvH,IAAIqH,gBAAgBrE,IACvB,CAAK,EAKZwE,GAxzBWC,EAACC,EAAMC,KAClB,IAAIC,EACJ,OAAO,WAAoB,IAAD,IAAAC,EAAAC,UAAAzE,OAAN0E,EAAI,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAJF,EAAIE,GAAAH,UAAAG,GAClB,MAAMC,EAAUC,KAChBC,aAAaR,GACbA,EAAgBS,YAAW,IAAMX,EAAKY,MAAMJ,EAASH,IAAOJ,EAClE,CAAC,EAkzB6BF,EAAUrG,IACxCjC,QAAQK,IAAI,yEAAmB4B,GAC/BpF,IAAe,GAEf,IAKM,GAHAsH,MAGKlC,IAASA,EAAKmH,UAAqC,IAAzBnH,EAAKmH,SAASlF,OAGvC,OAFApN,IAAQoL,QAAQ,uCAChBrF,IAAe,GAKrB,MAAMwM,EAAW,GAUjB,GATApH,EAAKmH,SAASzI,SAAQkD,IAChB,MAAMyF,EAAUzF,EAAK0F,eAAiB1F,EAClCyF,GAAWA,EAAQ1Q,MAAQ0Q,EAAQ1Q,KAAK4Q,WAAW,WACjDH,EAASzE,KAAK0E,EACpB,IAGNtJ,QAAQK,IAAI,0DAAcgJ,EAASnF,QAEX,IAApBmF,EAASnF,OAGP,OAFApN,IAAQoL,QAAQ,mDAChBrF,IAAe,GAKrB,MAAM4M,EAAO,GACb,IAAK,MAAM5F,KAAQwF,EACb,IACM,MAAMzI,EAAMC,IAAIqH,gBAAgBrE,GAChC4F,EAAK7E,KAAKhE,EAChB,CAAE,MAAOS,GACHrB,QAAQ1I,MAAM,iDAAeuM,EAAKvN,KAAM+K,EAC9C,CAGN,GAAoB,IAAhBoI,EAAKvF,OAGH,OAFApN,IAAQQ,MAAM,yDACduF,IAAe,GAKrBd,EAAasN,GACb1M,GAAe8M,GACfhO,EAAiBgO,EAAK,IAEtB3S,IAAQC,QAAQ,4BAAQsS,EAASnF,4BACvC,CAAE,MAAO5M,GACH0I,QAAQ1I,MAAM,8CAAYA,GAC1BR,IAAQQ,MAAM,8CAEd6M,IACN,CAAC,QACKtH,IAAe,EACrB,IACH,KAGG6M,GAAqBA,KACrBnM,GAAS,GACTE,GAAY,CAAEP,EAAG,EAAGC,EAAG,GAAI,EAI3BwM,GAAqB3D,IACjBA,GAAS,GAAKA,EAAQlK,EAAUoI,SAC9BjI,EAAqB+J,GACrBvK,EAAiBiB,EAAYsJ,IAC7B0D,KAEIlN,EAAiBwJ,IACf5K,EAAoBoB,EAAiBwJ,GAAOhC,QAExD,GAkBC4F,GAAeC,IAAoB/U,mBAAS,YAmB5CgV,GAAcC,IAAmBjV,mBAAS,MAC1CkV,GAAeC,IAAoBnV,mBAAS,IAG7CmP,GAAezN,UACf,IACM,MAAM0T,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASvG,GAGzB,MAAMwG,EAAS,CACTC,eAAkC,kBAAlBV,GAAoC,EAAsB,kBAAlBA,GAAoC,EAAI,EAChGW,kBAAqC,kBAAlBX,GAAoC,EAAsB,kBAAlBA,GAAoC,EAAI,EACnGY,cAAeV,GACfW,eAAgBT,IAIlBvK,KACE4K,EAAOK,UAAYjL,GAAgB6D,MACnC+G,EAAOM,WAAalL,GAAgB8D,QAO1C,aAJ6B7M,IAAMC,KAAK,cAAeuT,EAAU,CAC3DG,OAAQA,KAGQ5T,IAC5B,CAAE,MAAOa,GACH,MAAM,IAAI4C,MAAM,6BAAS5C,EAAMR,UACrC,IAIC8T,GAAWrJ,IAAgBzM,mBAAS,OACpC+V,GAASrJ,IAAc1M,mBAAS,MA2IvCO,qBAAU,KACJ,GAAImG,EAAe,CAEb,MAAMsP,EAAwBzJ,IAExB,IAAI0J,EAAgB1J,EAAE2J,OAClBC,GAAuB,EAE3B,KAAOF,GAAe,CAChB,GAAIA,IAAkBrN,GAAgB0C,QAAS,CACzC6K,GAAuB,EACvB,KACN,CACAF,EAAgBA,EAAcrF,aACpC,CAGIuF,GACE5J,EAAE6J,gBACR,EAQN,OAJIxN,GAAgB0C,SACd1C,GAAgB0C,QAAQ+K,iBAAiB,QAASL,EAAsB,CAAEM,SAAS,IAGlF,KAEG1N,GAAgB0C,SACd1C,GAAgB0C,QAAQiL,oBAAoB,QAASP,EAC3D,CAEZ,IACH,CAACtP,IAIJnG,qBAAU,KAEJ+N,SAASkI,KAAK7V,MAAM8V,SAAW,GAC/BnI,SAASoI,gBAAgB/V,MAAM8V,SAAW,EAAE,GAC/C,IAGH,MAgFME,GAAmBA,KACnB1O,IAAc,EAAM,EAkhBpB2O,GAAsBrU,IACtBiI,IAAc,GACdE,GAAenI,EAAK,EA4C1B,OAhCAhC,qBAAU,KAEAoK,IAAmBtE,GAAoBA,EAAiBE,UACtD2E,QAAQK,IAAI,wFAAmBZ,IAE/B2E,GAActG,IACpB,GACH,CAAC2B,KAGJpK,qBAAU,KACJ,GAAIgJ,IAAkBI,GAAS2B,QAAS,CAElC,MAAMuL,EAAiB,IAAIC,gBAAe,KAEhC5N,IAAoBA,GAAiBkG,OAAS,IAC5ClE,QAAQK,IAAI,oGAEZpC,GAAoB,IAAID,KAC9B,IAON,OAHA2N,EAAeE,QAAQpN,GAAS2B,SAGzB,KACDuL,EAAeG,YAAY,CAEvC,IACH,CAACzN,GAAgBI,GAAS2B,QAASpC,KAEjCqB,GAKCtJ,eAAC6E,IAAM,CAACpF,UAAU,gBAAeM,SAAA,CAC3BC,eAAC0E,EAAM,CAACjF,UAAU,SAAQM,SAAA,CACpBC,eAAA,OAAKP,UAAU,cAAaM,SAAA,CACtBP,cAAA,OAAK6S,IAAI,YAAY2D,IAAI,OAAOvW,UAAU,SAC1CD,cAAA,MAAAO,SAAI,sGAEVC,eAAA,OAAKP,UAAU,eAAcM,SAAA,CACvBP,cAACyW,IAAe,CAACxW,UAAU,gBAC3BD,cAAC0W,IAAY,CAACzW,UAAU,gBACxBD,cAAC8C,IAAO,CAACC,MAAM,2BAAMxC,SACfP,cAAC2C,IAAY,CAAC1C,UAAU,cAAc0W,QAxD/CC,KACfnV,aAAaoV,WAAW,SACxBpV,aAAaoV,WAAW,QACxB9M,IAAc,GACdE,GAAe,KAAK,EAoDiE/J,MAAO,CAAE4W,OAAQ,qBAIhG9W,cAACqF,IAAM,CAACnF,MAAO,CAAE4R,QAAS,OAAQD,WAAY,WAAYtR,SACpDC,eAAA,OAAKN,MAAO,CAAE6W,QAAS,OAAQC,IAAK,OAAQC,SAAU,eAAgB1W,SAAA,CAChEC,eAAA,OAAKP,UAAU,UAASM,SAAA,CAClBP,cAACoD,IAAM,CACDC,KAAK,UACLpD,UAAU,yBACVC,MAAO,CACD2R,WAAalL,IAAsB0B,IAAac,GAAc,UAAY,UAC1EsI,OAAQ,QAEdkF,QAz1BP1V,UAMvB,GAJA+K,GAAa,MACb5B,GAAaS,QAAU,KACvBoB,GAAW,MACXzC,GAAkB,WACdV,GAEE,YADAiD,KAGN,GAAyB,IAArBxF,EAAUoI,OAER,YADApN,IAAQoL,QAAQ,wCAItB,GAAIhG,EAAmB,CACjB,MAAMuQ,GAAiB7O,GAIvB,OAHAC,GAAY4O,GACZrO,GAAYgC,QAAUqM,OACtB3V,IAAQmL,KAAKwK,EAAgB,2BAAS,2BAE5C,CAEAtQ,GAAqB,GACrBnH,GAAW,GACX6I,IAAY,GACZO,GAAYgC,SAAU,EAGtB,MAAMiC,EAAQX,KAAKC,MACnBJ,GAAac,GACb1C,GAAaS,QAAUiC,EACvBb,GAAW,MAGX,MAAMiB,EAAWvC,aAAY,KACvB,MAAMyB,EAAMD,KAAKC,MAEXY,EAAWV,KAAKC,OAAOH,EAAMhC,GAAaS,SAAW,KACrD2B,EAAQF,KAAKC,MAAMS,EAAW,MAC9BP,EAAUH,KAAKC,MAAOS,EAAW,KAAQ,IAE/CxD,GAAkB,GAAGgD,gBAAUC,gBADfO,EAAW,WAC2B,GACzD,KAEHtD,GAAmBwD,GAEnB,IAAIiK,EAAU,GACVC,EAAI,EAER,IAGM,IAFAhR,EAAqB,GAEdgR,EAAI7Q,EAAUoI,QAAQ,CACvB,GAAI9F,GAAYgC,QAAS,OACb,IAAIpG,SAAQG,IACZ,MAAMyS,EAAqB1M,aAAY,KAC5B9B,GAAYgC,UACXD,cAAcyM,GACdzS,IACN,GACH,IAAI,IAEb,QACN,CAEAiB,EAAoB,CACdC,QAAS,GACTC,WAAY,CACNC,aAAc,CAAC,KAI3B0C,GAAoB,IACpBhC,EAAqB0Q,GACrBlR,EAAiBiB,EAAYiQ,IAE7B,MAAME,EAAWhL,KAAKqB,OAAQyJ,EAAI,GAAK7Q,EAAUoI,OAAU,KAC3D7H,EAAiBwQ,GACjBlR,EAAqBkR,GAErB,MAAM7I,QAAeC,GAAanI,EAAU6Q,IAE5CD,EAAQ9H,KAAK,CACPqD,SAAUvL,EAAYiQ,GACtB3I,OAAQA,IAGd5I,EAAoB4I,SAEd,IAAIhK,SAAQG,GAAW+O,WAAW/O,EAAS,OAE5CiE,GAAYgC,SACXuM,GAEZ,CAEAlQ,EAAoBiQ,GAGpBvM,cAAcnB,IACdC,GAAmB,MACnB,MAAMwC,EAAMC,KAAKC,MACjBH,GAAWC,GAGX,MAAMG,EAAgBC,KAAKC,OAAOL,EAAM9B,GAAaS,SAAW,KAC1D2B,EAAQF,KAAKC,MAAMF,EAAgB,MACnCI,EAAUH,KAAKC,MAAOF,EAAgB,KAAQ,IAEpD7C,GAAkB,GAAGgD,gBAAUC,gBADfJ,EAAgB,YAGhC9K,IAAQC,QAAQ,4BAChBoF,GAAqB,EAC3B,CAAE,MAAO7E,GAEH6I,cAAcnB,IACdC,GAAmB,MAEnBnI,IAAQQ,MAAMA,EAAMR,SACpBqF,GAAqB,EAC3B,CAAC,QACKnH,GAAW,EACjB,GA+tB8B8X,KAAM5Q,IAAsB0B,GAAWrI,cAACwX,IAAe,IAAMxX,cAACyX,IAAc,IAAIlX,SAE/EuI,IAAkBK,GAAc,2BAC3BL,GAAiB,2BACXnC,EAAqB0B,GAAW,2BAAS,2BAAU,6BAErE7H,eAAA,OAAKP,UAAU,wBAAuBM,SAAA,CAChCP,cAAA,MAAAO,SAAI,6BACJC,eAAA,OAAKP,UAAU,yBAAyBC,MAAO,CAAE6W,QAAS,OAAQW,WAAY,cAAenX,SAAA,CACvFC,eAAA,OAAKN,MAAO,CAAE6W,QAAS,OAAQY,cAAe,SAAUD,WAAY,SAAU3J,MAAO,QAASxN,SAAA,CACxFP,cAAA,OAAKC,UAAU,gCACfO,eAAA,QAAMP,UAAU,eAAeC,MAAO,CAChC0X,UAAW,MACXlG,gBAAiB,0BACjBI,QAAS,UACT+F,aAAc,OACd9F,SAAU,OACV9O,MAAO,UACP6U,UAAW,UACfvX,SAAA,CACK+L,KAAKpI,IAAIoI,KAAKyL,IAAIzL,KAAKqB,MAAMpI,EAAaE,UAAY,GAAI,GAAI,KAAK,UAGhFjF,eAAA,OAAKP,UAAU,iBAAiBC,MAAO,CAAE8X,WAAY,OAAQJ,UAAW,OAAQrX,SAAA,CAC1EP,cAAA,OAAKC,UAAU,gBAAeM,SACxBP,cAAA,QAAMC,UAAU,eAAcM,SAAC,4BAErCP,cAAA,OAAKE,MAAO,CAAE+H,SAAU,YAAa1H,SAC/BP,cAACiY,IAAQ,CACHC,QAAS5L,KAAKpI,IAAIoI,KAAKyL,IAAIzL,KAAKqB,MAAMpI,EAAaE,UAAY,GAAI,GAAI,KACvEpD,KAAK,QACLf,OAAQiE,EAAaE,SAAW,GAAK,YAAc,SACnD0S,UAAU,EACVC,YAAa,CACP,KAAM,UACN,OAAQ7S,EAAaE,SAAW,GAAK,UAAY,qBAM/EjF,eAAA,OAAKP,UAAU,4BAA4BC,MAAO,CAAE6W,QAAS,OAAQW,WAAY,cAAenX,SAAA,CAC1FC,eAAA,OAAKN,MAAO,CAAE6W,QAAS,OAAQY,cAAe,SAAUD,WAAY,SAAU3J,MAAO,QAASxN,SAAA,CACxFP,cAAA,OAAKC,UAAU,mCACfO,eAAA,QAAMP,UAAU,eAAeC,MAAO,CAChC0X,UAAW,MACXlG,gBAAiB,0BACjBI,QAAS,UACT+F,aAAc,OACd9F,SAAU,OACV9O,MAAO,UACP6U,UAAW,UACfvX,SAAA,CACK+L,KAAKpI,IAAIoI,KAAKyL,IAAIzL,KAAKqB,MAAMpI,EAAaG,aAAe,GAAI,GAAI,KAAK,UAGnFlF,eAAA,OAAKP,UAAU,iBAAiBC,MAAO,CAAE8X,WAAY,OAAQJ,UAAW,OAAQrX,SAAA,CAC1EP,cAAA,OAAKC,UAAU,gBAAeM,SACxBP,cAAA,QAAMC,UAAU,eAAcM,SAAC,qCAErCP,cAAA,OAAKE,MAAO,CAAE+H,SAAU,YAAa1H,SAC/BP,cAACiY,IAAQ,CACHC,QAAS5L,KAAKpI,IAAIoI,KAAKyL,IAAIzL,KAAKqB,MAAMpI,EAAaG,aAAe,GAAI,GAAI,KAC1ErD,KAAK,QACLf,OAAQiE,EAAaG,YAAc,GAAK,YAAc,SACtDyS,UAAU,EACVC,YAAa,CACP,KAAM,UACN,OAAQ7S,EAAaG,YAAc,GAAK,UAAY,qBAMlFlF,eAAA,OAAKP,UAAU,0BAA0BC,MAAO,CAAE6W,QAAS,OAAQW,WAAY,cAAenX,SAAA,CACxFP,cAAA,OAAKE,MAAO,CAAE6W,QAAS,OAAQY,cAAe,SAAUD,WAAY,SAAU3J,MAAO,QAASxN,SACxFP,cAAA,OAAKC,UAAU,mCAErBO,eAAA,OAAKP,UAAU,iBAAiBC,MAAO,CAAE8X,WAAY,OAAQJ,UAAW,OAAQrX,SAAA,CAC1EP,cAAA,OAAKC,UAAU,gBAAeM,SACxBP,cAAA,QAAMC,UAAU,eAAcM,SAAC,+BAErCP,cAAA,OAAKE,MAAO,CACN6W,QAAS,OACTsB,eAAgB,SAChBT,UAAW,OACfrX,SACIP,cAAA,QAAMC,UAAU,oBAAoBC,MAAO,CACrCwR,gBAAiB,0BACjBI,QAAS,WACT+F,aAAc,OACd9F,SAAU,OACV9O,MAAO,UACP+O,WAAY,SACZ8F,UAAW,UACfvX,SACKoG,GAAqBwC,GAAcI,GAAkB+L,IAAWD,GAp8BrGiD,MAClB,IAAKjD,KAAcC,GAAS,MAAO,MACnC,MAAMtI,EAAWV,KAAKC,OAAO+I,GAAUD,IAAa,KAIpD,MAAO,GAHO/I,KAAKC,MAAMS,EAAW,oBACpBV,KAAKC,MAAOS,EAAW,KAAQ,kBAC/BA,EAAW,UACe,EA87ByFsL,GAAoB,uBAM/H9X,eAAA,OAAKP,UAAU,kBAAiBM,SAAA,CAC1BP,cAACuY,IAAM,CACDC,OAAO,UACPC,gBAAgB,EAChBC,aAActG,GACduG,SAAUtR,IAAe7H,GAAWsJ,GAAevI,SAEnDP,cAACoD,IAAM,CAACnD,UAAU,aAAaC,MAAO,CAAE6N,MAAO,SAAWwJ,KAAMvX,cAAC4Y,IAAc,CAAC3Y,UAAU,aAAe0Y,SAAUtR,IAAe7H,GAAWsJ,GAAevI,SAAC,+BAInKP,cAACuY,IAAM,CACDM,WAAS,EACTC,UAAQ,EACRN,OAAO,UACPC,gBAAgB,EAChBC,aAAcA,KAAM,EACpBhY,SAAUoS,GACV6F,SAAUtR,IAAe7H,GAAWsJ,GACpC+K,SAAU,GAAGtT,SAEbP,cAACoD,IAAM,CAACnD,UAAU,aAAaC,MAAO,CAAE6N,MAAO,SAAWwJ,KAAMvX,cAAC+Y,IAAc,CAAC9Y,UAAU,aAAe0Y,SAAUtR,IAAe7H,GAAWsJ,GAAevI,SAAC,qCAKnKP,cAACoD,IAAM,CACDnD,UAAU,aACVsX,KAAMzO,GAAiB9I,cAACgZ,IAAmB,CAAC/Y,UAAU,aAAgBD,cAACiZ,IAAc,CAAChZ,UAAU,aAChG0W,QA91DjB1V,UACnB,IAGM,GAFAwJ,QAAQK,IAAI,iGAAuB,CAAEhC,oBAEjCA,GAsBE,OApBA2B,QAAQK,IAAI,iDACR9B,IACEA,GAAYwC,YAAYJ,SAAQK,GAASA,EAAMC,SAErDzC,GAAe,MACfF,IAAkB,GAGdI,KACEC,IAAe,GACXC,KACEuB,cAAcvB,IACdC,GAAmB,QAK/BlD,EAAqB,QAErB7E,IAAQC,QAAQ,wCAQtB,GAHAqK,MAGKqN,UAAUC,eAAiBD,UAAUC,aAAaC,aAEjD,YADA7X,IAAQQ,MAAM,8FAIpB0I,QAAQK,IAAI,6DAEZ,MAAMuO,QAAeH,UAAUC,aAAaC,aAAa,CACnDE,MAAO,CACDvL,MAAO,CAAEwL,MAAO,MAChBvL,OAAQ,CAAEuL,MAAO,QAc7B,GAVA9O,QAAQK,IAAI,oDAGZ/B,IAAkB,GAClBE,GAAeoQ,SAGT,IAAI5U,SAAQG,GAAW+O,WAAW/O,EAAS,MAG7CsE,GAAS2B,QAAS,CAChBJ,QAAQK,IAAI,iDACZ5B,GAAS2B,QAAQE,UAAYsO,EAC7B,UACYnQ,GAAS2B,QAAQG,OACvBP,QAAQK,IAAI,uCAClB,CAAE,MAAOK,GACHV,QAAQ1I,MAAM,wCAAWoJ,EAC/B,CACN,CAEA5J,IAAQC,QAAQ,uCACtB,CAAE,MAAOO,GACH0I,QAAQ1I,MAAM,8CAAYA,GAGP,oBAAfA,EAAMhB,MAA6C,0BAAfgB,EAAMhB,KACxCQ,IAAQQ,MAAM,wIACM,kBAAfA,EAAMhB,MAA2C,yBAAfgB,EAAMhB,KAC7CQ,IAAQQ,MAAM,wIACM,qBAAfA,EAAMhB,MAA8C,oBAAfgB,EAAMhB,KAChDQ,IAAQQ,MAAM,sHAEdR,IAAQQ,MAAM,+CAAcA,EAAMR,QAE9C,GA6wDoCrB,MAAO,CAAE6N,MAAO,QAAS9K,MAAO6F,GAAiB,UAAY,IAAKvI,SAEjEuI,GAAiB,iCAAU,mCAElC9I,cAACoD,IAAM,CAACnD,UAAU,aAAaC,MAAO,CAAE6N,MAAO,SAAWwJ,KAAMvX,cAACyX,IAAc,CAACxX,UAAU,aAAe0W,QA9sBjH1V,UACtB,GAAK2E,EAAiBE,QAAQ6I,OAK9B,IAEM,IAAKoB,OAAOyJ,oBAEN,YADAjY,IAAQQ,MAAM,8FAKpB,MAAM0X,QAAwB1J,OAAOyJ,sBAG/BE,QAA8BD,EAAgBE,mBAAmB,mBAAoB,CAAEC,QAAQ,IAC/FC,QAAmBJ,EAAgBE,mBAAmB,aAAc,CAAEC,QAAQ,IAGpF,IAAK,IAAIxC,EAAI,EAAGA,EAAI7Q,EAAUoI,OAAQyI,IAAK,CAAC,IAAD0C,EAAAC,EAAAC,EAAAC,EACrC,MACMC,EADY3T,EAAU6Q,GACArW,KAAKoZ,MAAM,KAAKC,MAAM,GAAI,GAAGC,KAAK,KAGxDC,EAAqB,GAAGJ,kBACxBK,QAA6Bb,EAAsBc,cAAcF,EAAoB,CAAEV,QAAQ,IAC/Fa,QAAuBF,EAAqBG,iBAG5ClI,EAAS3E,SAASC,cAAc,UAChC0F,EAAUhB,EAAOvE,WAAW,MAC5B0M,EAAQ,IAAIrI,MAGlBqI,EAAM9H,IAAM1L,EAAYiQ,SAClB,IAAI3S,SAASG,IACb+V,EAAMpI,OAAS,KAAO,IAADqI,EAAAC,EACfrI,EAAOzE,MAAQ4M,EAAM5M,MACrByE,EAAOxE,OAAS2M,EAAM3M,OACtBwF,EAAQtF,UAAUyM,EAAO,EAAG,GAGT,QAAnBC,EAAA3T,EAAiBmQ,UAAE,IAAAwD,GAAQ,QAARC,EAAnBD,EAAqBnM,cAAM,IAAAoM,GAA3BA,EAA6B/U,QAAQsF,SAAS6D,IACxC,GAAIA,EAAOyB,KAAM,CACX,MAAM,GAAEC,EAAE,GAAEC,EAAE,GAAEC,EAAE,GAAEC,GAAO7B,EAAOyB,KAClC8C,EAAQsH,YAAcxL,GAAeL,EAAO5L,MAC5CmQ,EAAQuH,UAAY,EACpBvH,EAAQwH,WAAWrK,EAAIC,EAAIC,EAAKF,EAAIG,EAAKF,GAGzC4C,EAAQyH,UAAY3L,GAAeL,EAAO5L,MAC1CmQ,EAAQ0H,KAAO,aACf1H,EAAQ2H,SAASlM,EAAO5L,KAAMsN,EAAIC,EAAK,EAC7C,KAGNhM,GAAS,CACd,IAIP,MAAMyJ,QAAa,IAAI5J,SAASG,GAAY4N,EAAOpE,OAAOxJ,EAAS,qBAC7D6V,EAAeW,MAAM/M,SACrBoM,EAAeY,QAGrB,MAAMC,EAAe,GAAGpB,gBAClBqB,QAAuB1B,EAAWW,cAAcc,EAAc,CAAE1B,QAAQ,IACxE4B,QAA2BD,EAAeb,iBAE1Ce,EAAa,CACbd,MAAOT,EACPpU,SAA4B,QAAnBgU,EAAA7S,EAAiBmQ,UAAE,IAAA0C,GAAQ,QAARC,EAAnBD,EAAqBrL,cAAM,IAAAsL,OAAR,EAAnBA,EAA6BjU,UAAW,GACjDC,YAA+B,QAAnBiU,EAAA/S,EAAiBmQ,UAAE,IAAA4C,GAAQ,QAARC,EAAnBD,EAAqBvL,cAAM,IAAAwL,OAAR,EAAnBA,EAA6BlU,aAAc,CAAC,SAGxDyV,EAAmBJ,MAAMxZ,KAAKC,UAAU4Z,EAAY,KAAM,UAC1DD,EAAmBH,OAC/B,CAEA9Z,IAAQC,QAAQ,yDACtB,CAAE,MAAOO,GACH0I,QAAQ1I,MAAM,wCAAWA,GACzBR,IAAQQ,MAAM,uCACpB,MApFMR,IAAQoL,QAAQ,+DAoFtB,EAwnBoKpM,SAAC,6BAGvIP,cAACoD,IAAM,CAACnD,UAAU,aAAaC,MAAO,CAAE6N,MAAO,SAAWwJ,KAAMvX,cAAC0b,IAAgB,CAACzb,UAAU,aAAe0W,QAxnBpHgF,KAErB,GAAK1U,GAAgD,IAA5BA,EAAiB0H,OAA1C,CAKApN,IAAQ/B,QAAQ,0CAAa,GAE7B,IAEM,MAAMoc,EAAkB/N,SAASC,cAAc,OAC/C8N,EAAgB1b,MAAM+H,SAAW,WACjC2T,EAAgB1b,MAAMwP,KAAO,UAC7BkM,EAAgB1b,MAAMyP,IAAM,UAC5BiM,EAAgB1b,MAAM6N,MAAQ,QAC9BF,SAASkI,KAAK8F,YAAYD,GAG1B,MAAMxP,EAAM,IAAID,KACV2P,EAAU1P,EAAI2P,mBAAmB,SACjCC,EAAU5P,EAAIoC,mBAAmB,SAGjCyN,EAAkB,CAClBC,YAAa3V,EAAUoI,OACvBwN,aAAc,EACdC,iBAAkB,CAAC,EACnBC,kBAAmB,EACnBC,uBAAwB,GAI9BrV,EAAiBmE,SAAQ+L,IACnB,GAAIA,EAAQ1I,QAAU0I,EAAQ1I,OAAO3I,QAAS,CACxC,MAAMA,EAAUqR,EAAQ1I,OAAO3I,QAC3BA,EAAQ6I,OAAS,GACfsN,EAAgBI,oBAEtBJ,EAAgBE,cAAgBrW,EAAQ6I,OAExC7I,EAAQsF,SAAQ6D,IACLgN,EAAgBG,iBAAiBnN,EAAO5L,QACvC4Y,EAAgBG,iBAAiBnN,EAAO5L,MAAQ,GAEtD4Y,EAAgBG,iBAAiBnN,EAAO5L,OAAO,GAE3D,KAIN4Y,EAAgBK,wBAA0BL,EAAgBE,aAAeF,EAAgBC,aAAaK,QAAQ,GAG9G,IAAIC,EAAiB,GACrBC,OAAOC,QAAQT,EAAgBG,kBAAkBhR,SAAQjM,IAAoB,IAAlBkE,EAAMsZ,GAAMxd,EACjE,MAAMyd,GAAeD,EAAQV,EAAgBE,aAAgB,KAAKI,QAAQ,GAC1EC,GAAkB,yDAEZnZ,uCACAsZ,uCACAC,kCACN,IAIN,IAAIC,EAA0B,GAC1BjX,GAAoBA,EAAiBE,SACnCF,EAAiBE,QAAQsF,SAAQ,CAAC6D,EAAQwB,KACpC,MAAMqM,EAAc7N,EAAOyB,KACrB,IAAIzB,EAAOyB,KAAKC,GAAG4L,QAAQ,MAAMtN,EAAOyB,KAAKE,GAAG2L,QAAQ,MAAMtN,EAAOyB,KAAKG,GAAG0L,QAAQ,MAAMtN,EAAOyB,KAAKI,GAAGyL,QAAQ,MAClH,eACAtK,EAAahD,EAAOgD,WAAa,GAAGhD,EAAOgD,cAAgB,eAEjE4K,GAA2B,yDAE3BpM,EAAQ,uCACRxB,EAAO5L,0CACPyZ,uCACA7K,iCACN,IAKN2J,EAAgBmB,UAAY,6uIAwFNjB,KAAWE,2aASiBC,EAAgBC,+SAIhBD,EAAgBE,gTAIhBF,EAAgBK,q/BAgBlCE,mcAUT/V,EAAoB,KAAKF,EAAUoI,kpBAWhCkO,uVAY1B,kCAAsB5R,MAAK+R,KAErBC,EADoBD,EAAkBE,SAC1BtB,EAAiB,CACvB7T,MAAO,EACPoV,SAAS,EACTC,SAAS,IACZnS,MAAKuH,IAEF,yCAAgBvH,MAAKoS,IACf,MAAM,MAAEC,GAAUD,EAEZE,EAAU/K,EAAOgL,UAAU,aAC3BC,EAAM,IAAIH,EAAM,CAChBI,YAAa,WACbC,KAAM,KACNC,OAAQ,OAMRC,EAFW,IAECrL,EAAOxE,OAAoBwE,EAAOzE,MAEpD,IAAI+P,EAAaD,EACb5V,EAAW,EAOf,IAJAwV,EAAIM,SAASR,EAAS,MAAO,EAAGtV,EARf,IAQmC4V,GACpDC,GARmB,IAWZA,EAAa,GACd7V,EAAW6V,EAAaD,EACxBJ,EAAIO,UACJP,EAAIM,SAASR,EAAS,MAAO,EAAGtV,EAfrB,IAeyC4V,GACpDC,GAfa,IAmBnB,MACMG,EAAW,2CADC7R,EAAI8R,gBAItBT,EAAIU,KAAKF,GAGTpQ,SAASkI,KAAKqI,YAAYxC,GAG1Bra,IAAQ8c,UACR9c,IAAQC,QAAQ,6CAAU,GAC9B,GACN,GAEd,CAAE,MAAOO,GAEHR,IAAQ8c,UACR5T,QAAQ1I,MAAM,wCAAWA,GACzBR,IAAQQ,MAAM,yCAAaA,EAAMR,SAGjC,MAAMqa,EAAkB/N,SAASyQ,cAAc,yBAC3C1C,GACE/N,SAASkI,KAAKqI,YAAYxC,EAEtC,CA3SA,MAFMra,IAAQoL,QAAQ,+DA6StB,EAwUqKpM,SAAC,mCAMpJP,cAAA,OAAKC,UAAU,gBAAeM,SACxBC,eAAA,OAAKP,UAAU,kBAAkBC,MAC3B,CACM8N,OAAQ,OACRD,MAAO,OACPiI,SAAU,UAErBzV,SAAA,CACKP,cAAA,OAAKC,UAAU,gBACTse,aAAcA,IAAMvX,GAAkB,GACtCwX,aAAcA,KACRxX,GAAkB,GAClBkP,IAAkB,EAExBS,QAlQT7K,IAAO,IAAD2S,EAEjC,MAAMpM,EAA6B,QAA1BoM,EAAGtW,GAAgB0C,eAAO,IAAA4T,OAAA,EAAvBA,EAAyBH,cAAc,OACnD,IAAKjM,EAAK,OAGV,MAAMqM,EAAUrM,EAAIpC,yBAIdnE,EAAE6S,QAAUD,EAAQhP,MACpB5D,EAAE6S,QAAUD,EAAQE,OACpB9S,EAAE+S,QAAUH,EAAQ/O,KACpB7D,EAAE+S,QAAUH,EAAQI,UAKpB9W,GAAS,GACTE,GAAY,CAAEP,EAAG,EAAGC,EAAG,IAC7B,EA8OqErH,SAEhCuI,GAEKtI,eAAA,OACMue,IAAK5W,GACLlI,UAAU,oCACVC,MAAO,CACD+H,SAAU,WACV8F,MAAO,OACPC,OAAQ,OACR0D,gBAAiB,OACjBsE,SAAU,UACdzV,SAAA,CAGFP,cAAA,SACM+e,IAAK7V,GACL8V,UAAQ,EACRC,aAAW,EACXC,OAAK,EACLhf,MAAO,CACD+H,SAAU,WACV0H,IAAK,EACLD,KAAM,EACN3B,MAAO,OACPC,OAAQ,OACRmR,UAAW,UACXpI,QAAS,QACTnF,OAAQ,MAKpB5R,cAAA,OACME,MAAO,CACD+H,SAAU,WACV0H,IAAK,EACLD,KAAM,EACN3B,MAAO,OACPC,OAAQ,OACR2D,cAAe,OACfC,OAAQ,IACZrR,SAEDiP,OAINrG,IACKnJ,cAAA,OACME,MAAO,CACD+H,SAAU,WACV0H,IAAK,GACLiP,MAAO,GACPlN,gBAAiB,0BACjBzO,MAAO,QACP6O,QAAS,UACT+F,aAAc,MACd9F,SAAU,OACVH,OAAQ,IACZrR,SACP,yCAKf0F,EACEzF,eAAA4e,WAAA,CAAA7e,SAAA,CACMP,cAAA,OACM+e,IAAK5W,GACLlI,UAAU,sBACVof,YAv2BnCvT,IACF,IAAbA,EAAEwT,SACA9X,IAAc,GACdE,GAAa,CACPC,EAAGmE,EAAE6S,QAAU1W,GAASN,EACxBC,EAAGkE,EAAE+S,QAAU5W,GAASL,IAEpC,EAi2BsD2X,YA91BnCzT,IACnB,GAAIvE,GAAY,CACV,MAAMiY,EAAO1T,EAAE6S,QAAUlX,GAAUE,EAC7B8X,EAAO3T,EAAE+S,QAAUpX,GAAUG,EAG7B8X,EAAY,KAAO3X,GAAQ,GAC3B4X,EAAWrT,KAAKyL,IAAIzL,KAAKpI,IAAIsb,EAAME,IAAaA,GAChDE,EAAWtT,KAAKyL,IAAIzL,KAAKpI,IAAIub,EAAMC,IAAaA,GAEtDxX,GAAY,CACNP,EAAGgY,EACH/X,EAAGgY,GAEf,GAi1BsDC,UA70BtCC,KAChBtY,IAAc,EAAM,EA60BkCgX,aAActI,GACd6J,QA15BvCjU,IAAO,IAADkU,EAGrB,KADmC,QAA1BA,EAAG7X,GAAgB0C,eAAO,IAAAmV,OAAA,EAAvBA,EAAyB1B,cAAc,QACzC,OAGVxS,EAAE6J,iBAGF,MAAMsK,GAAoB,KAAZnU,EAAEoU,OACVC,EAAW7T,KAAKpI,IAAIoI,KAAKyL,IAAIhQ,GAAQkY,EAzrChC,IACA,GA0rCX,GAAIE,IAAapY,GAAO,OAGxB,MAAMqY,EAAOjY,GAAgB0C,QAAQoF,wBAC/BoQ,EAASvU,EAAE6S,QAAUyB,EAAK1Q,KAC1B4Q,EAASxU,EAAE+S,QAAUuB,EAAKzQ,IAG1B4Q,EAAUH,EAAKrS,MAAQ,EACvByS,EAAUJ,EAAKpS,OAAS,EAGxByS,EAAcN,EAAWpY,GAC/B,IAAI2Y,EAAczY,GAIZyY,EAFFT,EAAQ,EAEQ,CACRtY,EAAGM,GAASN,EAA0B8Y,EAAc1Y,IAAnCsY,EAASE,GAC1B3Y,EAAGK,GAASL,EAA0B6Y,EAAc1Y,IAAnCuY,EAASE,IAIlB,CACR7Y,EAAGM,GAASN,GAAKwY,EAAWpY,IAC5BH,EAAGK,GAASL,GAAKuY,EAAWpY,KAKxCC,GAASmY,GACTjY,GAAYwY,EAAY,EAg3B8BxgB,MAAO,CACD4W,OAAQvP,GAAa,WAAa,OAClCU,SAAU,WACV8F,OAAsB,OAAf7D,SAAe,IAAfA,QAAe,EAAfA,GAAiB6D,QAAS,OACjCC,QAAuB,OAAf9D,SAAe,IAAfA,QAAe,EAAfA,GAAiB8D,SAAU,OACnC2S,SAAU,QACVC,UAAW,SACfrgB,SAGFC,eAAA,OAAKN,MAAO,CACN+H,SAAU,WACV8F,MAAO,OACPC,OAAQ,OACR6S,UAAW,SAAS9Y,iBAAoBE,GAASN,EAAII,SAAYE,GAASL,EAAIG,QAC9E+Y,gBAAiB,SACjBC,WAAYxZ,GAAa,OAAS,uBACtChH,SAAA,CACIP,cAAA,OACM6S,IAAK5M,EACLuQ,IAAI,MACJtW,MAAO,CACD6N,MAAO,OACPC,OAAQ,OACRmR,UAAW,UACX6B,WAAY,QAElBC,WAAW,IAGhBzR,UAGZjJ,EAAUoI,OAAS,GAAK5H,GACnBvG,eAAA,OAAKP,UAAU,mBAAkBM,SAAA,CAC3BP,cAACoD,IAAM,CACDmU,KAAMvX,cAACkhB,IAAY,IACnBvK,QA5rChDwK,KAClB/M,GAAkB3N,EAAoB,EAAE,EA4rC0BkS,SAAgC,IAAtBlS,IAEhBzG,cAACoD,IAAM,CACDmU,KAAMvX,cAACohB,IAAa,IACpBzK,QA5rChD0K,KAClBjN,GAAkB3N,EAAoB,EAAE,EA4rC0BkS,SAAUlS,IAAsBF,EAAUoI,OAAS,UAM3E3O,cAAA,OAAKC,UAAU,qBAAoBM,SAC7BP,cAACuY,IAAM,CACDC,OAAO,UACPC,gBAAgB,EAChBC,aAActG,GACdkP,OAASxV,IACH,MAAMwC,EAAOxC,EAAEyV,aAAaC,MAAM,GAC9BlT,GACE8D,GAAkB9D,EACxB,EACJ/N,SAEFC,eAAA,OAAKN,MAAO,CAAE4X,UAAW,SAAUhB,OAAQ,WAAYvW,SAAA,CACjDP,cAAC4Y,IAAc,CAAC1Y,MAAO,CAAE6R,SAAU,OAAQ0P,aAAc,SACzDzhB,cAAA,KAAAO,SAAG,oEAMjCC,eAAA,OAAKP,UAAU,qBAAoBM,SAAA,CAC7BP,cAAA,QAAAO,SAAM,8BACNC,eAAA,OAAKN,MAAO,CACN6W,QAAS,OACTW,WAAY,SACZE,UAAW,MACXZ,IAAK,QACTzW,SAAA,CACIP,cAAA,OAAKE,MAAO,CAAEwhB,KAAM,EAAGzZ,SAAU,YAAa1H,SACxCP,cAACiY,IAAQ,CACHC,QAAS/R,EACTgS,UAAU,MAGtB3X,eAAA,QAAMN,MAAO,CACP6R,SAAU,OACV9O,MAAO,UACP0e,WAAY,OAChBphB,SAAA,CACK4F,EAAkB,aAIpCI,EAAUoI,OAAS,GACd3O,cAAA,OAAKC,UAAU,mBAAkBM,SAC3BP,cAAC4hB,IAAU,CACL/W,QAASpE,EAAoB,EAC7Bob,MAAOtb,EAAUoI,OACjBmT,SAAU,EACVphB,SA/uC5BqhB,IACpB3N,GAAkB2N,EAAO,EAAE,EA+uCqB1f,KAAK,QACL2f,iBAAe,EACfC,iBAAiB,WAO/CzhB,eAAA,OAAKP,UAAU,kBAAiBM,SAAA,CAC1BC,eAAA,OAAKP,UAAU,iBAAgBM,SAAA,CACzBP,cAAA,MAAAO,SAAI,6BACJP,cAACkiB,IAAM,CACDhiB,MAAO,CAAE6N,MAAO,OAAQ6J,UAAW,OACnCpT,MAAO+D,GACP7H,SAlsDR8D,IAC5BgE,GAAgBhE,GAChBqK,GAAcrK,EAAM,EAgsDmDjE,SAElCoI,GAAY6H,KAAInN,GACXrD,cAACkiB,IAAOC,OAAM,CAAY3d,MAAOnB,EAAK9C,SACtB,QAAT8C,EAAiB,2BAASA,GADbA,UAOtCrD,cAAA,OACMC,UAAU,oBACVC,MAAO,CACD8N,OAAQ,QACRgI,SAAU,OACVyL,aAAc,QAClBlhB,SAEFP,cAAA,OACMC,UAAU,eACV8e,IAAKpV,GAAepJ,SAEnBkI,GAAiBkG,OAAS,EACrBlG,GAAiB+H,KAAI,CAACvB,EAAQwB,IACxBzQ,cAAA,OAAiBC,UAAU,cAAaM,SAClCC,eAAA,OAAKP,UAAU,cAAaM,SAAA,CACtBC,eAAA,MAAAD,SAAA,CAAIP,cAAA,QAAMC,UAAU,cAAaM,SAAC,kBAAU,IAAE0O,EAAO5L,QACpD4L,EAAOyB,MACFlQ,eAAA,KAAGP,UAAU,mBAAkBM,SAAA,CACzBC,eAAA,QAAMP,UAAU,YAAWM,SAAA,CACrBP,cAAA,QAAMC,UAAU,cAAaM,SAAC,kBAC9BC,eAAA,QAAMP,UAAU,aAAYM,SAAA,CAAC,MAAI0O,EAAOyB,KAAKC,MAC7CnQ,eAAA,QAAMP,UAAU,aAAYM,SAAA,CAAC,MAAI0O,EAAOyB,KAAKE,SAEnDpQ,eAAA,QAAMP,UAAU,YAAWM,SAAA,CACrBP,cAAA,QAAMC,UAAU,gBAChBO,eAAA,QAAMP,UAAU,aAAYM,SAAA,CAAC,MAAI0O,EAAOyB,KAAKG,MAC7CrQ,eAAA,QAAMP,UAAU,aAAYM,SAAA,CAAC,MAAI0O,EAAOyB,KAAKI,YAI9D7B,EAAOgD,YAAczR,eAAA,KAAAD,SAAA,CAAGP,cAAA,QAAMC,UAAU,cAAaM,SAAC,wBAAW,IAAE0O,EAAOgD,WAAW,WAjBxFxB,KAsBhBzQ,cAAA,OAAKC,UAAU,2BAA0BM,SACnCC,eAAA,OAAKP,UAAU,cAAaM,SAAA,CACtBP,cAAA,MAAAO,SAAI,yCACJP,cAAA,KAAAO,SAAG,kGAOjCP,cAAA,OAAKC,UAAU,qBAAqBC,MAAO,CAAEwhB,KAAM,IAAKU,UAAW,QAASrL,QAAS,OAAQY,cAAe,UAAWpX,SAChHqF,EAAiBG,WAAWC,cAAgByW,OAAO4F,KAAKzc,EAAiBG,WAAWC,cAAc2I,OAAS,EACtG3O,cAACsiB,IAAY,CACPC,OAnlBzBC,MAAO,IAADC,EAEvB,MAAM9Z,EAA8B,OAAhB/C,QAAgB,IAAhBA,GAA4B,QAAZ6c,EAAhB7c,EAAkBG,kBAAU,IAAA0c,OAAZ,EAAhBA,EAA8Bzc,aAClD,IAAK2C,GAAmD,IAApC8T,OAAO4F,KAAK1Z,GAAagG,OACvC,MAAO,CACD+T,QAAS,CAAEC,QAAS,QACpBC,OAAQ,CAAEC,MAAM,GAChBC,OAAQ,IAKpB,MAAMC,EAActG,OAAO4F,KAAK1Z,GAG1Bqa,EAASD,EAAYvS,KAAIzP,IAEzB,MAAMkiB,EAAW,MACX,OAAQliB,GACF,IAAK,eAAM,MAAO,aAClB,IAAK,eAAM,MAAO,eAClB,IAAK,eAAM,MAAO,QAClB,IAAK,eAAM,MAAO,OAClB,IAAK,eAAM,MAAO,kBAClB,QAAS,OAAOA,EAAKmO,cAEhC,EATgB,GAWjB,OAAOI,GAAe2T,EAAS,IAGrC,MAAO,CACDP,QAAS,CACHC,QAAS,OACTO,UAAW,4BAEjBN,OAAQ,CACFO,OAAQ,aACRrE,OAAQ,GACRpP,KAAM,SACNxO,KAAM6hB,EACNK,QAAS,GACTpV,OAAQ,IAEd/K,MAAO+f,EACPF,OAAQ,CACF,CACM/hB,KAAM,2BACNsC,KAAM,MACNggB,OAAQ,MACRC,OAAQ,CAAC,MAAO,OAChBpiB,KAAMub,OAAOC,QAAQ/T,GAAa6H,KAAIpM,IAAA,IAAErD,EAAMyD,GAAMJ,EAAA,MAAM,CACpDI,QACAzD,OACL,IACDwiB,MAAO,CACDV,MAAM,EACN5a,SAAU,UACVub,QAAS,YACTC,OAAQ,GACRP,UAAW,kBACXQ,WAAY,GACZC,KAAM,CACAC,EAAG,CACG7V,MAAO,GACP8V,MAAO,UAIzBC,UAAW,CACLjB,MAAM,EACNlU,OAAQ,GACRoV,QAAS,GACTC,aAAc,IACdC,gBAAiB,IAEvBC,SAAU,CACJC,UAAW,CACLC,WAAY,GACZC,cAAe,EACfC,YAAa,yBAK1C,EA8fiD9B,GACRtiB,MAAO,CAAE8N,OAAQ,OAAQ0T,KAAM,GAC/B6C,UAAU,IAGhB/jB,eAAA,OAAKN,MAAO,CACN6W,QAAS,OACTY,cAAe,SACfU,eAAgB,SAChBX,WAAY,SACZ1J,OAAQ,OACR/K,MAAO,QACX1C,SAAA,CACIP,cAAA,KAAGE,MAAO,CAAEujB,OAAQ,GAAIljB,SAAC,yFACzBP,cAAA,KAAGE,MAAO,CAAEujB,OAAQ,GAAIljB,SAAC,+GAQjDC,eAAA,OAAKP,UAAU,gBAAeM,SAAA,CACxBC,eAAA,OAAKP,UAAU,eAAcM,SAAA,CACvBP,cAAA,MAAAO,SAAI,6BACJC,eAAC0hB,IAAM,CACD1d,MAAO6P,GACP3T,SA/0Cf8D,IAErB,OADA8P,GAAiB9P,GACTA,GACF,IAAK,UACCjD,IAAQmL,KAAK,2CACb,MACN,IAAK,gBACCnL,IAAQmL,KAAK,iDACb,MACN,IAAK,gBACCnL,IAAQmL,KAAK,iDACb,MACN,QACMnL,IAAQoL,QAAQ,wCAC5B,EAk0CoCzM,MAAO,CAAE6N,MAAO,QAASxN,SAAA,CAEzBP,cAACkiB,IAAOC,OAAM,CAAC3d,MAAM,UAASjE,SAAC,YAC/BP,cAACkiB,IAAOC,OAAM,CAAC3d,MAAM,gBAAejE,SAAC,kBACrCP,cAACkiB,IAAOC,OAAM,CAAC3d,MAAM,gBAAejE,SAAC,wBAGjDC,eAAA,OAAKP,UAAU,UAASM,SAAA,CAClBC,eAAA,OAAKP,UAAU,cAAaM,SAAA,CACtBP,cAAA,QAAAO,SAAM,cACNP,cAAA,QAAMC,UAAU,eAAcM,SACL,YAAlB8T,GAA8B,SACP,kBAAlBA,GAAoC,SAC9B,cAGxB7T,eAAA,OAAKP,UAAU,cAAaM,SAAA,CACtBP,cAAA,QAAAO,SAAM,WACNP,cAAA,QAAMC,UAAU,eAAcM,SACL,YAAlB8T,GAA8B,SACP,kBAAlBA,GAAoC,SAC9B,cAGxB7T,eAAA,OAAKP,UAAU,cAAaM,SAAA,CACtBP,cAAA,QAAAO,SAAM,YACNP,cAAA,QAAMC,UAAU,eAAcM,SACL,YAAlB8T,GAA8B,SACP,kBAAlBA,GAAoC,SAC9B,cAGxB7T,eAAA,OAAKP,UAAU,cAAaM,SAAA,CACtBP,cAAA,QAAAO,SAAM,iBACNP,cAAA,QAAMC,UAAU,eAAcM,SACL,YAAlB8T,GAA8B,SACP,kBAAlBA,GAAoC,SAC9B,iBAI9B7T,eAAA,OAAKP,UAAU,qBAAoBM,SAAA,CAC7BP,cAAA,MAAAO,SAAI,6BACJC,eAAA,OAAKP,UAAU,iBAAgBM,SAAA,CACzBP,cAAA,QAAAO,SAAM,qBACNC,eAAA,OAAKN,MAAO,CAAE6W,QAAS,OAAQW,WAAY,SAAUV,IAAK,OAAQzW,SAAA,CAE5DC,eAAA,OAAKP,UAAU,sBAAqBM,SAAA,CAC9BP,cAACwkB,IAAW,CACNtgB,IAAK,GACL6T,IAAK,EACL0M,KAAM,IACNjgB,MAAO+P,GACP7T,SAAW8D,GAAUgQ,GAAgBhQ,GAAS,IAC9CtE,MAAO,CAAE6N,MAAO,QAChB2W,UAAU,EACVzkB,UAAU,oBAEhBO,eAAA,OAAKP,UAAU,kBAAiBM,SAAA,CAC1BP,cAAA,OAAKC,UAAU,aAAa0W,QAASA,KAC/B,MAAMgO,EAAWC,YAAYrQ,GAAe,KAAMgI,QAAQ,IACtDoI,GAAY,GAAKnQ,GAAgBmQ,EAAS,EAClDpkB,SACIP,cAAA,OAAKC,UAAU,eAAcM,SAAC,QAEpCP,cAAA,OAAKC,UAAU,eAAe0W,QAASA,KACjC,MAAMgO,EAAWC,YAAYrQ,GAAe,KAAMgI,QAAQ,IACtDoI,GAAY,IAAKnQ,GAAgBmQ,EAAS,EAClDpkB,SACIP,cAAA,OAAKC,UAAU,eAAcM,SAAC,cAKhDP,cAAC6kB,IAAM,CACD3gB,IAAK,GACL6T,IAAK,EACL0M,KAAM,IACNjgB,MAAO+P,GACP7T,SAAW8D,GAAUgQ,GAAgBhQ,GACrCke,QAAS,CAAEQ,UAAY1e,GAAU,QAAQA,EAAM+X,QAAQ,MACvDrc,MAAO,CAAEwhB,KAAM,WAIjClhB,eAAA,OAAKP,UAAU,iBAAgBM,SAAA,CACzBP,cAAA,QAAAO,SAAM,mCACNC,eAAA,OAAKN,MAAO,CAAE6W,QAAS,OAAQW,WAAY,SAAUV,IAAK,OAAQzW,SAAA,CAE5DC,eAAA,OAAKP,UAAU,sBAAqBM,SAAA,CAC9BP,cAACwkB,IAAW,CACNtgB,IAAK,GACL6T,IAAK,EACL0M,KAAM,IACNjgB,MAAOiQ,GACP/T,SAAW8D,GAAUkQ,GAAiBlQ,GAAS,IAC/CtE,MAAO,CAAE6N,MAAO,QAChB2W,UAAU,EACVzkB,UAAU,oBAEhBO,eAAA,OAAKP,UAAU,kBAAiBM,SAAA,CAC1BP,cAAA,OAAKC,UAAU,aAAa0W,QAASA,KAC/B,MAAMgO,EAAWC,YAAYnQ,GAAgB,KAAM8H,QAAQ,IACvDoI,GAAY,GAAKjQ,GAAiBiQ,EAAS,EACnDpkB,SACIP,cAAA,OAAKC,UAAU,eAAcM,SAAC,QAEpCP,cAAA,OAAKC,UAAU,eAAe0W,QAASA,KACjC,MAAMgO,EAAWC,YAAYnQ,GAAgB,KAAM8H,QAAQ,IACvDoI,GAAY,IAAKjQ,GAAiBiQ,EAAS,EACnDpkB,SACIP,cAAA,OAAKC,UAAU,eAAcM,SAAC,cAKhDP,cAAC6kB,IAAM,CACD3gB,IAAK,GACL6T,IAAK,EACL0M,KAAM,IACNjgB,MAAOiQ,GACP/T,SAAW8D,GAAUkQ,GAAiBlQ,GACtCke,QAAS,CAAEQ,UAAY1e,GAAU,SAASA,EAAM+X,QAAQ,MACxDrc,MAAO,CAAEwhB,KAAM,yBA7kBxD1hB,cAACd,EAAK,CAACE,eAAgB+W,IAulB1C,E,OC17EA2O,IAASC,OACH/kB,cAACglB,IAAMC,WAAU,CAAA1kB,SACXP,cAACsF,EAAG,MAEVuI,SAASqX,eAAe,Q","file":"static/js/main.85eb671c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, message, Tabs, Tooltip } from 'antd';\nimport { UserOutlined, LockOutlined, MailOutlined, PhoneOutlined, SafetyOutlined, InfoCircleOutlined } from '@ant-design/icons';\nimport './Login.css';\nimport axios from 'axios';\n\nconst { TabPane } = Tabs;\n\n// Remove mock user data; use backend APIs for auth\n\nconst Login = ({ onLoginSuccess }) => {\n      const [activeTab, setActiveTab] = useState('login');\n      const [loading, setLoading] = useState(false);\n      // Create separate form instances for login and register\n      const [loginForm] = Form.useForm();\n      const [registerForm] = Form.useForm();\n\n      // Reset form fields when switching tabs\n      useEffect(() => {\n            if (activeTab === 'login') {\n                  loginForm.resetFields();\n            } else {\n                  registerForm.resetFields();\n            }\n      }, [activeTab, loginForm, registerForm]);\n\n      // 使用本地图片\n      const pcbBackgroundUrl = '/output.png';\n\n      // Real backend login\n      const handleLogin = async (values) => {\n            setLoading(true);\n            try {\n                  const response = await axios.post('http://localhost:5000/api/login', values);\n                  const data = response.data;\n                  if (data.status === 'success') {\n                        message.success('登录成功！');\n                        localStorage.setItem('token', data.token);\n                        localStorage.setItem('user', JSON.stringify(data.user));\n                        onLoginSuccess(data.user);\n                  } else {\n                        message.error(data.error || '登录失败');\n                  }\n            } catch (error) {\n                  const errMsg = error.response?.data?.error || '登录失败，请重试';\n                  message.error(errMsg);\n            } finally {\n                  setLoading(false);\n            }\n      };\n\n      // Real backend registration\n      const handleRegister = async (values) => {\n            setLoading(true);\n            try {\n                  // 调用注册接口\n                  await axios.post('http://localhost:5000/api/register', {\n                        username: values.username,\n                        password: values.password,\n                        email: values.email,\n                        phone: values.phone\n                  });\n                  // 注册成功后跳转到登录标签\n                  message.success('注册成功！请登录');\n                  setActiveTab('login');\n                  // 在切换到登录标签后，预填充表单字段\n                  loginForm.setFieldsValue({ username: values.username, password: values.password });\n            } catch (error) {\n                  const errMsg = error.response?.data?.error || '注册失败，请重试';\n                  message.error(errMsg);\n            } finally {\n                  setLoading(false);\n            }\n      };\n\n      return (\n            <div className=\"login-container\" style={{\n                  backgroundImage: `url(${pcbBackgroundUrl})`,\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center center',\n                  backgroundSize: 'cover'\n            }}>\n                  <div className=\"login-content\">\n                        <div className=\"login-header\">\n                              <h1>欢迎使用慧眼识瑕系统</h1>\n                              <p className=\"login-subtitle\">基于YOLOv11和投票融合的PCB缺陷检测系统</p>\n                        </div>\n\n                        <div className=\"login-box\">\n                              <div className=\"light-effect\"></div>\n                              <div className=\"light-effect\"></div>\n\n                              <Tabs activeKey={activeTab} onChange={setActiveTab} centered className=\"login-tabs\">\n                                    <TabPane tab=\"登录\" key=\"login\">\n                                          <div className=\"login-welcome\">\n                                                <SafetyOutlined className=\"login-welcome-icon\" />\n                                                <p>请输入您的账号信息，安全登录系统</p>\n                                          </div>\n                                          <Form\n                                                form={loginForm}\n                                                name=\"login\"\n                                                onFinish={handleLogin}\n                                                layout=\"vertical\"\n                                                size=\"large\"\n                                          >\n                                                <Form.Item\n                                                      name=\"username\"\n                                                      rules={[{ required: true, message: '请输入用户名' }]}\n                                                >\n                                                      <Input\n                                                            prefix={<UserOutlined />}\n                                                            placeholder=\"用户名\"\n                                                            suffix={\n                                                                  <Tooltip title=\"支持字母、数字和下划线组合\">\n                                                                        <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                                                                  </Tooltip>\n                                                            }\n                                                      />\n                                                </Form.Item>\n                                                <Form.Item\n                                                      name=\"password\"\n                                                      rules={[{ required: true, message: '请输入密码' }]}\n                                                >\n                                                      <Input.Password\n                                                            prefix={<LockOutlined />}\n                                                            placeholder=\"密码\"\n                                                      />\n                                                </Form.Item>\n                                                <Form.Item>\n                                                      <Button\n                                                            type=\"primary\"\n                                                            htmlType=\"submit\"\n                                                            block\n                                                            loading={loading}\n                                                            className=\"login-button\"\n                                                      >\n                                                            登录\n                                                      </Button>\n                                                </Form.Item>\n                                          </Form>\n                                    </TabPane>\n                                    <TabPane tab=\"注册\" key=\"register\">\n                                          <div className=\"login-welcome\">\n                                                <UserOutlined className=\"login-welcome-icon\" style={{ color: '#1890ff' }} />\n                                                <p>欢迎注册，请填写以下信息</p>\n                                          </div>\n                                          <Form\n                                                form={registerForm}\n                                                name=\"register\"\n                                                onFinish={handleRegister}\n                                                layout=\"vertical\"\n                                                size=\"large\"\n                                          >\n                                                <Form.Item\n                                                      name=\"username\"\n                                                      rules={[{ required: true, message: '请输入用户名' }]}\n                                                >\n                                                      <Input\n                                                            prefix={<UserOutlined />}\n                                                            placeholder=\"用户名\"\n                                                            suffix={\n                                                                  <Tooltip title=\"支持字母、数字和下划线组合\">\n                                                                        <InfoCircleOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\n                                                                  </Tooltip>\n                                                            }\n                                                      />\n                                                </Form.Item>\n                                                <Form.Item\n                                                      name=\"email\"\n                                                      rules={[\n                                                            { required: true, message: '请输入邮箱' },\n                                                            { type: 'email', message: '请输入有效的邮箱地址' }\n                                                      ]}\n                                                >\n                                                      <Input\n                                                            prefix={<MailOutlined />}\n                                                            placeholder=\"邮箱\"\n                                                      />\n                                                </Form.Item>\n                                                <Form.Item\n                                                      name=\"phone\"\n                                                      rules={[\n                                                            { required: true, message: '请输入手机号' },\n                                                            { pattern: /^1[3-9]\\d{9}$/, message: '请输入有效的手机号' }\n                                                      ]}\n                                                >\n                                                      <Input\n                                                            prefix={<PhoneOutlined />}\n                                                            placeholder=\"手机号\"\n                                                      />\n                                                </Form.Item>\n                                                <Form.Item\n                                                      name=\"password\"\n                                                      rules={[\n                                                            { required: true, message: '请输入密码' },\n                                                            { min: 6, message: '密码长度至少为6位' }\n                                                      ]}\n                                                >\n                                                      <Input.Password\n                                                            prefix={<LockOutlined />}\n                                                            placeholder=\"密码\"\n                                                      />\n                                                </Form.Item>\n                                                <Form.Item\n                                                      name=\"confirmPassword\"\n                                                      dependencies={['password']}\n                                                      rules={[\n                                                            { required: true, message: '请确认密码' },\n                                                            ({ getFieldValue }) => ({\n                                                                  validator(_, value) {\n                                                                        if (!value || getFieldValue('password') === value) {\n                                                                              return Promise.resolve();\n                                                                        }\n                                                                        return Promise.reject(new Error('两次输入的密码不一致'));\n                                                                  },\n                                                            }),\n                                                      ]}\n                                                >\n                                                      <Input.Password\n                                                            prefix={<LockOutlined />}\n                                                            placeholder=\"确认密码\"\n                                                      />\n                                                </Form.Item>\n                                                <Form.Item>\n                                                      <Button\n                                                            type=\"primary\"\n                                                            htmlType=\"submit\"\n                                                            block\n                                                            loading={loading}\n                                                            className=\"login-button\"\n                                                      >\n                                                            注册\n                                                      </Button>\n                                                </Form.Item>\n                                          </Form>\n                                    </TabPane>\n                              </Tabs>\n\n                              <div className=\"login-footer\">\n                                    <p>技术支持: <span>从零开始的代码生活</span></p>\n                                    <p>系统版本: <span>V2.3.1</span></p>\n                              </div>\n                        </div>\n                  </div>\n            </div>\n      );\n};\n\nexport default Login; ","import React, { useState, useEffect, useRef } from 'react';\nimport { Layout, Button, Card, Statistic, Progress, Tabs, Upload, message, Select, Slider, Pagination, InputNumber, Spin, Tooltip } from 'antd';\nimport { CameraOutlined, VideoCameraOutlined, UploadOutlined, ZoomInOutlined, ZoomOutOutlined, SettingOutlined, BulbOutlined, UserOutlined, SearchOutlined, FolderOutlined, LeftOutlined, RightOutlined, LoadingOutlined } from '@ant-design/icons';\nimport ReactECharts from 'echarts-for-react';\n// 在文件顶部添加图标导入\nimport { PlayCircleOutlined, PauseCircleOutlined, FileTextOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport './App.css';\nimport Login from './components/Login';\n\n// 添加API基础URL配置\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://10.17.144.143:5000';\n\n// 配置axios默认值\naxios.defaults.baseURL = API_BASE_URL;\n\nconst { Header, Sider, Content } = Layout;\nconst { TabPane } = Tabs;\n\nfunction App() {\n      const [systemStatus, setSystemStatus] = useState({\n            status: 'normal',\n            cpuUsage: 0,\n            memoryUsage: 0,\n            uptime: '0h 0m'\n      });\n\n      const [detectionResults, setDetectionResults] = useState({\n            defects: [],\n            statistics: {\n                  defect_types: {}\n            }\n      });\n\n      const [selectedImage, setSelectedImage] = useState(null);\n      const [loading, setLoading] = useState(false);\n      const [detectionProgress, setDetectionProgress] = useState(0);\n      const [zoomLevel, setZoomLevel] = useState(1);\n      const MIN_ZOOM = 0.5;\n      const MAX_ZOOM = 2;\n      const ZOOM_STEP = 0.1;\n\n      // 添加新的状态变量\n      const [imageList, setImageList] = useState([]); // 存储所有要处理的图片\n      const [currentImageIndex, setCurrentImageIndex] = useState(0); // 当前处理的图片索引\n      const [isBatchProcessing, setIsBatchProcessing] = useState(false); // 是否正在批量处理\n      const [batchProgress, setBatchProgress] = useState(0); // 批量处理进度\n      const [showNavigation, setShowNavigation] = useState(false);\n      const [detectionHistory, setDetectionHistory] = useState([]); // 存储所有图片的检测结果\n      const [previewUrls, setPreviewUrls] = useState([]); // 存储所有图片的URL\n      const [isUploading, setIsUploading] = useState(false);\n      const [isDragging, setIsDragging] = useState(false);\n      const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n      const [imagePosition, setImagePosition] = useState({ x: 0, y: 0 });\n      const [scale, setScale] = useState(1);\n      const [position, setPosition] = useState({ x: 0, y: 0 });\n      const imageWrapperRef = useRef(null);\n      const [isPaused, setIsPaused] = useState(false); // 是否暂停检测\n      // 添加缺陷过滤相关的状态变量\n      const [defectFilter, setDefectFilter] = useState('all');\n      const [processedResults, setProcessedResults] = useState([]);\n      const [defectTypes, setDefectTypes] = useState(['all', 'mouse_bite', 'open_circuit', 'short', 'spur', 'spurious_copper']);\n      const isPausedRef = useRef(false);\n\n      // 添加到其他state变量之后\n      const [isCameraActive, setIsCameraActive] = useState(false);\n      const [videoStream, setVideoStream] = useState(null);\n      const videoRef = useRef(null);\n      const [isCapturing, setIsCapturing] = useState(false);\n      const [captureInterval, setCaptureInterval] = useState(null);\n\n      const [currentRunTime, setCurrentRunTime] = useState('0秒');\n      const [runTimeInterval, setRunTimeInterval] = useState(null);\n\n      const prevOverflowStyle = useRef('');\n      // 添加一个防抖函数，确保同一时间只处理一次上传请求\n      const debounce = (func, delay) => {\n            let debounceTimer;\n            return function (...args) {\n                  const context = this;\n                  clearTimeout(debounceTimer);\n                  debounceTimer = setTimeout(() => func.apply(context, args), delay);\n            };\n      };\n\n      // 添加缺陷列表的ref\n      const defectsListRef = useRef(null);\n      // 添加一个标志控制缺陷列表是否可以滚动\n      const [defectsListHover, setDefectsListHover] = useState(false);\n\n      const [isLoggedIn, setIsLoggedIn] = useState(false);\n      const [currentUser, setCurrentUser] = useState(null);\n      // 添加图像尺寸状态\n      const [imageDimensions, setImageDimensions] = useState(null);\n\n      // Add this with the other refs near the top of the component\n      const startTimeRef = useRef(null);\n\n      useEffect(() => {\n            const fetchSystemStatus = async () => {\n                  try {\n                        const response = await axios.get('/api/system-status');\n                        setSystemStatus({\n                              status: response.data.status,\n                              cpuUsage: response.data.cpu_usage,\n                              memoryUsage: response.data.memory_usage,\n                              uptime: response.data.uptime\n                        });\n                  } catch (error) {\n                        console.error('Error fetching system status:', error);\n                        message.error('系统状态更新失败');\n                  }\n            };\n\n            fetchSystemStatus();\n            const statusInterval = setInterval(fetchSystemStatus, 5000);\n            return () => clearInterval(statusInterval);\n      }, []);\n\n      useEffect(() => {\n            isPausedRef.current = isPaused;\n      }, [isPaused]);\n\n      useEffect(() => {\n            if (videoRef.current && videoStream) {\n                  console.log('videoStream变化，设置视频源...');\n                  videoRef.current.srcObject = videoStream;\n                  videoRef.current.play()\n                        .then(() => console.log('视频播放成功 [useEffect]'))\n                        .catch(err => {\n                              console.error('视频播放失败 [useEffect]:', err);\n                              message.error('视频播放失败: ' + err.message);\n                        });\n            }\n      }, [videoStream]);\n\n      // 添加useEffect清理资源\n      useEffect(() => {\n            return () => {\n                  previewUrls.forEach(url => URL.revokeObjectURL(url));\n            };\n      }, [previewUrls]);\n\n      // 清理视频和定时器资源\n      useEffect(() => {\n            return () => {\n                  if (runTimeInterval) {\n                        clearInterval(runTimeInterval);\n                  }\n                  if (videoStream) {\n                        videoStream.getTracks().forEach(track => track.stop());\n                  }\n                  if (captureInterval) {\n                        clearInterval(captureInterval);\n                  }\n            };\n      }, []);\n\n      useEffect(() => {\n            // Check if user is already logged in\n            const token = localStorage.getItem('token');\n            const user = localStorage.getItem('user');\n            if (token && user) {\n                  setIsLoggedIn(true);\n                  setCurrentUser(JSON.parse(user));\n            }\n      }, []);\n\n      // 打开摄像头\n      const handleOpenCamera = async () => {\n            try {\n                  console.log('开始打开/关闭摄像头操作, 当前状态:', { isCameraActive });\n\n                  if (isCameraActive) {\n                        // 关闭摄像头逻辑\n                        console.log('正在关闭摄像头...');\n                        if (videoStream) {\n                              videoStream.getTracks().forEach(track => track.stop());\n                        }\n                        setVideoStream(null);\n                        setIsCameraActive(false);\n\n                        // 停止实时检测\n                        if (isCapturing) {\n                              setIsCapturing(false);\n                              if (captureInterval) {\n                                    clearInterval(captureInterval);\n                                    setCaptureInterval(null);\n                              }\n                        }\n\n                        // 重置检测进度\n                        setDetectionProgress(0);\n\n                        message.success('摄像头已关闭');\n                        return;\n                  }\n\n                  // 先重置图像状态，确保界面干净\n                  resetImageAndDetectionStates();\n\n                  // 检查浏览器是否支持摄像头API\n                  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n                        message.error('您的浏览器不支持访问摄像头功能');\n                        return;\n                  }\n\n                  console.log('正在请求摄像头权限...');\n                  // 尝试访问摄像头\n                  const stream = await navigator.mediaDevices.getUserMedia({\n                        video: {\n                              width: { ideal: 1280 },\n                              height: { ideal: 720 }\n                        }\n                  });\n\n                  console.log('成功获取摄像头流');\n\n                  // 重要：先设置状态再处理视频元素\n                  setIsCameraActive(true);\n                  setVideoStream(stream);\n\n                  // 等待状态更新完成\n                  await new Promise(resolve => setTimeout(resolve, 50));\n\n                  // 直接设置视频源\n                  if (videoRef.current) {\n                        console.log('设置视频元素源...');\n                        videoRef.current.srcObject = stream;\n                        try {\n                              await videoRef.current.play();\n                              console.log('视频播放成功');\n                        } catch (err) {\n                              console.error('视频播放失败:', err);\n                        }\n                  }\n\n                  message.success('摄像头已打开');\n            } catch (error) {\n                  console.error('无法访问摄像头:', error);\n\n                  // 更详细的错误信息处理\n                  if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n                        message.error('摄像头访问被拒绝，请在浏览器中允许访问摄像头');\n                  } else if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\n                        message.error('未找到摄像头设备，请确保您的设备已连接摄像头');\n                  } else if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {\n                        message.error('无法读取摄像头，可能被其他应用程序占用');\n                  } else {\n                        message.error('无法访问摄像头: ' + error.message);\n                  }\n            }\n      };\n\n\n      const resetImageAndDetectionStates = () => {\n            console.log('重置图像和检测状态开始');\n\n            // 清理URL资源\n            previewUrls.forEach(url => {\n                  try {\n                        URL.revokeObjectURL(url);\n                  } catch (e) {\n                        console.error(\"撤销URL时出错:\", e);\n                  }\n            });\n\n            // 重置图像和检测相关状态，但保留摄像头状态\n            setImageList([]);\n            setPreviewUrls([]);\n            setSelectedImage(null);\n            setCurrentImageIndex(0);\n            setDetectionHistory([]);\n            setDetectionResults({\n                  defects: [],\n                  statistics: {\n                        defect_types: {}\n                  }\n            });\n            setProcessedResults([]);\n            setDetectionProgress(0);\n            setBatchProgress(0);\n            setScale(1);\n            setPosition({ x: 0, y: 0 });\n            // 重置图像尺寸\n            setImageDimensions(null);\n\n            console.log('重置图像和检测状态完成');\n      };\n\n      // 捕获视频帧并转换为文件\n      const captureVideoFrame = () => {\n            if (!videoRef.current || !isCameraActive) {\n                  console.error('视频元素不可用或摄像头未激活');\n                  return null;\n            }\n\n            // 检查视频是否在播放\n            if (videoRef.current.paused || videoRef.current.ended) {\n                  console.warn('视频已暂停或结束，尝试重新播放');\n                  videoRef.current.play().catch(err => {\n                        console.error('无法重新播放视频:', err);\n                  });\n                  return null;\n            }\n\n            // 确保视频尺寸有效\n            const videoWidth = videoRef.current.videoWidth;\n            const videoHeight = videoRef.current.videoHeight;\n\n            if (!videoWidth || !videoHeight) {\n                  console.warn('视频尺寸无效:', videoWidth, videoHeight);\n                  return null;\n            }\n\n            console.log('捕获视频帧，原始尺寸:', videoWidth, 'x', videoHeight);\n\n            // 计算等比例缩放后的尺寸\n            let newWidth, newHeight;\n\n            if (videoWidth > 600 || videoHeight > 600) {\n                  // 固定宽度为600, 高度按比例缩放\n                  newWidth = 600;\n                  newHeight = Math.round((videoHeight / videoWidth) * 600);\n            } else {\n                  // 小尺寸视频保持原始尺寸\n                  newWidth = videoWidth;\n                  newHeight = videoHeight;\n            }\n\n            console.log('捕获视频帧，缩放后尺寸:', newWidth, 'x', newHeight);\n\n            // 创建两个画布 - 一个用于捕获原始帧，一个用于缩放\n            const captureCanvas = document.createElement('canvas');\n            captureCanvas.width = videoWidth;\n            captureCanvas.height = videoHeight;\n\n            // 先在原始尺寸画布上绘制视频帧\n            const captureCtx = captureCanvas.getContext('2d');\n            captureCtx.drawImage(videoRef.current, 0, 0, videoWidth, videoHeight);\n\n            // 创建第二个画布用于缩放\n            const scaleCanvas = document.createElement('canvas');\n            scaleCanvas.width = newWidth;\n            scaleCanvas.height = newHeight;\n\n            // 在第二个画布上绘制缩放后的图像\n            const scaleCtx = scaleCanvas.getContext('2d');\n            scaleCtx.drawImage(captureCanvas, 0, 0, videoWidth, videoHeight, 0, 0, newWidth, newHeight);\n\n            // 保存缩放后的尺寸信息到state\n            setImageDimensions({ width: newWidth, height: newHeight });\n\n            // 将缩放后的画布转换为Blob\n            return new Promise((resolve) => {\n                  scaleCanvas.toBlob((blob) => {\n                        if (!blob) {\n                              console.error('无法创建Blob');\n                              resolve(null);\n                              return;\n                        }\n\n                        // 创建File对象\n                        const file = new File([blob], 'camera-capture.jpg', { type: 'image/jpeg' });\n                        resolve(file);\n                  }, 'image/jpeg', 0.95); // 高质量JPEG\n            });\n      };\n      // 开始或暂停实时检测\n      // 开始或暂停实时检测\n      const toggleContinuousCapture = async () => {\n            // Reset runtime variables at the start of continuous capture\n            setStartTime(null);\n            startTimeRef.current = null;\n            setEndTime(null);\n            setCurrentRunTime('0秒');\n            if (isCapturing) {\n                  // 如果正在捕获，则停止\n                  if (captureInterval) {\n                        clearInterval(captureInterval);\n                        setCaptureInterval(null);\n                  }\n\n                  // 停止运行时长计时\n                  if (runTimeInterval) {\n                        clearInterval(runTimeInterval);\n                        setRunTimeInterval(null);\n                  }\n\n                  // 设置结束时间\n                  if (startTimeRef.current) {\n                        const end = Date.now();\n                        setEndTime(end);\n\n                        // 计算最终运行时长\n                        const finalDuration = Math.floor((end - startTimeRef.current) / 1000);\n                        const hours = Math.floor(finalDuration / 3600);\n                        const minutes = Math.floor((finalDuration % 3600) / 60);\n                        const seconds = finalDuration % 60;\n                        setCurrentRunTime(`${hours}小时${minutes}分钟${seconds}秒`);\n                  }\n\n                  setIsCapturing(false);\n\n                  // 重置检测结果以清除边界框，但确保不影响视频流\n                  setDetectionResults({\n                        defects: [],\n                        statistics: {\n                              defect_types: {}\n                        }\n                  });\n\n                  message.info('已停止实时检测');\n                  return;\n            }\n\n            // 开始实时捕获\n            if (!isCameraActive) {\n                  message.warning('请先打开摄像头');\n                  return;\n            }\n\n            // 确保视频元素存在且正在播放\n            if (!videoRef.current || !videoRef.current.srcObject) {\n                  console.error('视频元素未准备就绪');\n                  message.error('视频未准备就绪，请重新打开摄像头');\n                  return;\n            }\n\n            // 检查视频流是否可用\n            try {\n                  if (videoRef.current.paused || videoRef.current.ended) {\n                        await videoRef.current.play();\n                        console.log('重新开始播放视频');\n                  }\n            } catch (err) {\n                  console.error('无法播放视频:', err);\n                  message.error('无法播放视频');\n                  return;\n            }\n\n            // 设置开始时间\n            const start = Date.now();\n            setStartTime(start);\n            startTimeRef.current = start;\n            setEndTime(null);\n\n            // 启动运行时长计时器\n            const timeInterval = setInterval(() => {\n                  const now = Date.now();\n                  // Use the ref instead of the closure value\n                  const duration = Math.floor((now - startTimeRef.current) / 1000); // 秒数\n                  const hours = Math.floor(duration / 3600);\n                  const minutes = Math.floor((duration % 3600) / 60);\n                  const seconds = duration % 60;\n                  setCurrentRunTime(`${hours}小时${minutes}分钟${seconds}秒`);\n            }, 1000);\n\n            setRunTimeInterval(timeInterval);\n\n            setIsCapturing(true);\n            message.info('开始实时检测');\n            console.log('开始实时检测，视频流状态:', videoRef.current.readyState);\n\n            // 设置定期捕获和检测\n            const interval = setInterval(async () => {\n                  try {\n                        // 检查视频状态，确保检测过程中摄像头未关闭\n                        if (!videoRef.current || !videoRef.current.srcObject || !isCameraActive) {\n                              console.warn('视频元素不存在或摄像头已关闭，停止检测');\n                              clearInterval(interval);\n\n                              // 停止运行时长计时\n                              if (runTimeInterval) {\n                                    clearInterval(runTimeInterval);\n                                    setRunTimeInterval(null);\n                              }\n\n                              setIsCapturing(false);\n                              setCaptureInterval(null);\n                              message.warning('摄像头已断开，实时检测停止');\n                              return;\n                        }\n\n                        // 如果视频暂停，尝试重新播放\n                        if (videoRef.current.paused || videoRef.current.ended) {\n                              console.warn('视频暂停或结束，尝试重新播放');\n                              try {\n                                    await videoRef.current.play();\n                              } catch (playErr) {\n                                    console.error('无法重新播放视频:', playErr);\n                                    message.error('无法恢复视频播放，实时检测停止');\n                                    clearInterval(interval);\n\n                                    // 停止运行时长计时\n                                    if (runTimeInterval) {\n                                          clearInterval(runTimeInterval);\n                                          setRunTimeInterval(null);\n                                    }\n\n                                    setIsCapturing(false);\n                                    setCaptureInterval(null);\n                                    return;\n                              }\n                        }\n\n                        // 捕获视频帧\n                        const capturedFrame = await captureVideoFrame();\n                        if (capturedFrame) {\n                              console.log('成功捕获视频帧', new Date().toLocaleTimeString());\n                              setDetectionProgress(20);\n\n                              // 处理捕获的帧并检测缺陷\n                              const result = await processImage(capturedFrame);\n                              console.log('检测结果:', result.defects.length > 0 ? `发现${result.defects.length}个缺陷` : '未发现缺陷');\n\n                              // 确保在摄像头活动且视频元素存在时更新结果\n                              if (isCameraActive && videoRef.current) {\n                                    // 确认视频仍在播放\n                                    if (videoRef.current.paused) {\n                                          console.log('检测期间视频暂停，尝试恢复');\n                                          videoRef.current.play().catch(e => console.error('无法恢复视频:', e));\n                                    }\n\n                                    // 更新检测结果之前先清除之前的结果\n                                    setProcessedResults([]);\n\n                                    // 更新检测结果\n                                    setDetectionResults(result);\n                              }\n\n                              setDetectionProgress(100);\n                        } else {\n                              console.warn('未能捕获视频帧');\n                        }\n                  } catch (error) {\n                        console.error('实时检测错误:', error);\n                        message.error('实时检测出错: ' + error.message);\n                  }\n            }, 2000); // 每2秒捕获一次\n\n            setCaptureInterval(interval);\n      };\n      // 处理缺陷过滤的变化\n      const handleDefectFilterChange = (value) => {\n            setDefectFilter(value);\n            filterDefects(value);\n      };\n      const resetAllStates = () => {\n            console.log('重置所有状态开始，摄像头状态:', isCameraActive);\n            if (runTimeInterval) {\n                  clearInterval(runTimeInterval);\n                  setRunTimeInterval(null);\n            }\n\n            // 重置运行时长\n            setCurrentRunTime('0秒');\n            setStartTime(null);\n            startTimeRef.current = null;\n            setEndTime(null);\n\n            // 如果摄像头处于活动状态，只重置图像相关状态\n            if (isCameraActive) {\n                  resetImageAndDetectionStates();\n                  return;\n            }\n\n            // 否则重置所有状态包括摄像头\n            // 清理URL资源\n            previewUrls.forEach(url => {\n                  try {\n                        URL.revokeObjectURL(url);\n                  } catch (e) {\n                        console.error(\"撤销URL时出错:\", e);\n                  }\n            });\n\n            // 清理摄像头资源\n            if (videoStream) {\n                  videoStream.getTracks().forEach(track => track.stop());\n            }\n            setVideoStream(null);\n            setIsCameraActive(false);\n\n            if (captureInterval) {\n                  clearInterval(captureInterval);\n                  setCaptureInterval(null);\n            }\n\n            // 重置其他状态\n            setImageList([]);\n            setPreviewUrls([]);\n            setSelectedImage(null);\n            setCurrentImageIndex(0);\n            setDetectionHistory([]);\n            setDetectionResults({\n                  defects: [],\n                  statistics: {\n                        defect_types: {}\n                  }\n            });\n            setProcessedResults([]);\n            setDetectionProgress(0);\n            setBatchProgress(0);\n            setScale(1);\n            setPosition({ x: 0, y: 0 });\n\n            console.log('重置所有状态完成');\n      };\n      // 过滤缺陷基于选择\n      const filterDefects = (filterType) => {\n            if (!detectionResults || !detectionResults.defects) return;\n\n            if (filterType === 'all') {\n                  setProcessedResults(detectionResults.defects);\n            } else {\n                  const filtered = detectionResults.defects.filter(defect =>\n                        defect.type.toLowerCase() === filterType.toLowerCase()\n                  );\n                  setProcessedResults(filtered);\n            }\n      };\n\n      // 当检测结果改变时更新处理后的结果\n      useEffect(() => {\n            if (detectionResults && detectionResults.defects) {\n                  // 根据实际结果更新缺陷类型\n                  const types = ['all'];\n                  detectionResults.defects.forEach(defect => {\n                        if (!types.includes(defect.type.toLowerCase())) {\n                              types.push(defect.type.toLowerCase());\n                        }\n                  });\n                  setDefectTypes(types);\n\n                  // 应用当前过滤器\n                  filterDefects(defectFilter);\n            }\n      }, [detectionResults]);\n\n      // 获取每种缺陷类型的颜色\n      const getDefectColor = (defectType) => {\n            const colorMap = {\n                  'mouse_bite': '#ff7875',      // 适中红色\n                  'open_circuit': '#40a9ff',     // 适中蓝色\n                  'short': '#ffc53d',           // 适中黄色\n                  'spur': '#73d13d',           // 适中绿色\n                  'spurious_copper': '#9254de'  // 适中紫色\n            };\n\n            return colorMap[defectType.toLowerCase()] || '#ff7875'; // 默认使用适中红色\n      };\n\n      // 渲染边界框\n      const renderBoundingBoxes = () => {\n            // 修改条件判断，针对摄像头模式添加特殊处理\n            if ((!selectedImage && !isCameraActive) || !processedResults || processedResults.length === 0) {\n                  return null;\n            }\n\n            // 获取视频元素的实际位置和尺寸\n            let videoPosition = { left: 0, top: 0, width: 0, height: 0 };\n            let scaleFactor = 1;\n\n            if (isCameraActive && videoRef.current && imageDimensions) {\n                  // 获取视频元素的计算样式和几何信息\n                  const videoElement = videoRef.current;\n                  const videoComputedStyle = window.getComputedStyle(videoElement);\n                  const videoRect = videoElement.getBoundingClientRect();\n                  const parentRect = videoElement.parentElement.getBoundingClientRect();\n\n                  // 计算视频相对于父容器的位置（由于objectFit: contain会留白）\n                  // 视频元素的位置会因为居中显示而有偏移\n                  videoPosition = {\n                        width: videoRect.width,\n                        height: videoRect.height,\n                        // 计算相对于父容器的左偏移\n                        left: videoRect.left - parentRect.left,\n                        // 计算相对于父容器的顶部偏移\n                        top: videoRect.top - parentRect.top\n                  };\n\n                  // 视频显示尺寸与原始图像尺寸比例\n                  const scaleX = videoPosition.width / imageDimensions.width;\n                  const scaleY = videoPosition.height / imageDimensions.height;\n                  scaleFactor = Math.min(scaleX, scaleY);\n\n                  console.log('视频位置计算:', {\n                        videoPosition,\n                        imageSize: imageDimensions,\n                        scale: scaleFactor,\n                        boxOffset: { x: videoPosition.left, y: videoPosition.top }\n                  });\n            }\n\n            return processedResults.map((defect, index) => {\n                  // 检查是否有实际的边界框数据\n                  if (defect.bbox) {\n                        let { x1, y1, x2, y2 } = defect.bbox;\n\n                        // 应用视频帧中的缩放因子和偏移\n                        if (isCameraActive && imageDimensions) {\n                              // 基于imageWrapperRef计算视频内容的实际显示区域\n                              let scale = 1;\n                              let offsetX = 0;\n                              let offsetY = 0;\n                              if (isCameraActive && imageDimensions && imageWrapperRef.current) {\n                                    const wrapperRect = imageWrapperRef.current.getBoundingClientRect();\n                                    const containerW = wrapperRect.width;\n                                    const containerH = wrapperRect.height;\n                                    const { width: imgW, height: imgH } = imageDimensions;\n                                    const imgRatio = imgW / imgH;\n                                    const containerRatio = containerW / containerH;\n                                    let contentW, contentH;\n                                    if (imgRatio > containerRatio) {\n                                          contentW = containerW;\n                                          contentH = contentW / imgRatio;\n                                    } else {\n                                          contentH = containerH;\n                                          contentW = contentH * imgRatio;\n                                    }\n                                    // 计算内容区域的偏移量（居中留白）\n                                    offsetX = (containerW - contentW) / 2;\n                                    offsetY = (containerH - contentH) / 2;\n                                    // 计算缩放比例\n                                    scale = contentW / imgW;\n                              }\n                              x1 = x1 * scale + offsetX;\n                              y1 = y1 * scale + offsetY;\n                              x2 = x2 * scale + offsetX;\n                              y2 = y2 * scale + offsetY;\n                        }\n\n                        const width = x2 - x1;\n                        const height = y2 - y1;\n\n                        return (\n                              <div\n                                    key={index}\n                                    style={{\n                                          position: 'absolute',\n                                          left: `${x1}px`,\n                                          top: `${y1}px`,\n                                          width: `${width}px`,\n                                          height: `${height}px`,\n                                          border: `2px solid ${getDefectColor(defect.type)}`,\n                                          backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                                          pointerEvents: 'none',\n                                          zIndex: 100,\n                                    }}\n                              >\n                                    <div style={{\n                                          position: 'absolute',\n                                          top: '-20px',\n                                          left: '0',\n                                          background: getDefectColor(defect.type),\n                                          color: 'white',\n                                          padding: '0 4px',\n                                          fontSize: '10px',\n                                          whiteSpace: 'nowrap'\n                                    }}>\n                                          {defect.type} {defect.confidence ? `(${defect.confidence}%)` : ''}\n                                    </div>\n                              </div>\n                        );\n                  } else if (defect.position) {\n                        // 使用位置数据的后备选项\n                        const boxWidth = 60;\n                        const boxHeight = 40;\n                        let x = defect.position.x - (boxWidth / 2);\n                        let y = defect.position.y - (boxHeight / 2);\n\n                        // 应用视频帧中的缩放因子和偏移\n                        if (isCameraActive && imageDimensions) {\n                              x = x * scaleFactor + videoPosition.left;\n                              y = y * scaleFactor + videoPosition.top;\n                        }\n\n                        return (\n                              <div\n                                    key={index}\n                                    style={{\n                                          position: 'absolute',\n                                          left: `${x}px`,\n                                          top: `${y}px`,\n                                          width: `${boxWidth}px`,\n                                          height: `${boxHeight}px`,\n                                          border: `2px solid ${getDefectColor(defect.type)}`,\n                                          backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                                          pointerEvents: 'none',\n                                          zIndex: 100,\n                                    }}\n                              >\n                                    <div style={{\n                                          position: 'absolute',\n                                          top: '-20px',\n                                          left: '0',\n                                          background: getDefectColor(defect.type),\n                                          color: 'white',\n                                          padding: '0 4px',\n                                          fontSize: '10px',\n                                          whiteSpace: 'nowrap'\n                                    }}>\n                                          {defect.type} {defect.confidence ? `(${defect.confidence}%)` : ''}\n                                    </div>\n                              </div>\n                        );\n                  }\n                  return null;\n            });\n      };\n\n\n      // 处理单个图片上传\n      const handleImageUpload = (file) => {\n            if (!file) {\n                  return false;\n            }\n\n            setIsUploading(true);\n\n            // 使用Image API预加载图片并计算尺寸\n            const img = new Image();\n            img.onload = () => {\n                  // 计算等比例缩放后的尺寸\n                  let newWidth, newHeight;\n\n                  if (img.width > 600 || img.height > 600) {\n                        // 固定宽度为600, 高度按比例缩放\n                        newWidth = 600;\n                        newHeight = Math.round((img.height / img.width) * 600);\n                  } else {\n                        // 小图维持原尺寸\n                        newWidth = img.width;\n                        newHeight = img.height;\n                  }\n\n                  // 创建canvas进行缩放\n                  const canvas = document.createElement('canvas');\n                  canvas.width = newWidth;\n                  canvas.height = newHeight;\n                  const ctx = canvas.getContext('2d');\n                  ctx.drawImage(img, 0, 0, newWidth, newHeight);\n\n                  // 转换为blob并上传\n                  canvas.toBlob(async (blob) => {\n                        try {\n                              // 将缩放后的图像尺寸保存到状态中\n                              setImageDimensions({ width: newWidth, height: newHeight });\n\n                              // 创建新的File对象并处理\n                              const resizedFile = new File([blob], file.name, { type: file.type });\n\n                              // 在UI上显示缩放后的图\n                              const imageUrl = URL.createObjectURL(blob);\n\n                              // 更新状态\n                              setImageList([resizedFile]);\n                              setPreviewUrls([imageUrl]);\n                              setSelectedImage(imageUrl);\n                              setCurrentImageIndex(0);\n\n                              // 重置检测历史\n                              setDetectionHistory([]);\n\n                              // 重置检测结果\n                              setDetectionResults({\n                                    defects: [],\n                                    statistics: {\n                                          defect_types: {}\n                                    }\n                              });\n\n                              // 重置处理后的结果\n                              setProcessedResults([]);\n\n                              setDetectionProgress(0);\n                              setBatchProgress(0);\n                              message.success('图片导入成功');\n                        } catch (error) {\n                              console.error('图片处理错误:', error);\n                              message.error('图片处理失败');\n                        } finally {\n                              setIsUploading(false);\n                        }\n                  }, file.type, 0.95); // 高质量\n            };\n\n            img.onerror = () => {\n                  console.error('图片加载失败');\n                  message.error('图片加载失败');\n                  setIsUploading(false);\n            };\n\n            img.src = URL.createObjectURL(file);\n            return false; // 阻止默认上传行为\n      };\n\n      // 处理文件夹上传的防抖版本\n      // 处理文件夹上传的防抖版本\n      const debouncedHandleFolderUpload = debounce((info) => {\n            console.log(\"文件夹上传信息 (防抖处理):\", info);\n            setIsUploading(true);\n\n            try {\n                  // 先重置所有状态，确保干净的开始\n                  resetAllStates();\n\n                  // 确保文件列表存在且不为空\n                  if (!info || !info.fileList || info.fileList.length === 0) {\n                        message.warning('未找到文件');\n                        setIsUploading(false);\n                        return;\n                  }\n\n                  // 处理新文件\n                  const newFiles = [];\n                  info.fileList.forEach(file => {\n                        const fileObj = file.originFileObj || file;\n                        if (fileObj && fileObj.type && fileObj.type.startsWith('image/')) {\n                              newFiles.push(fileObj);\n                        }\n                  });\n\n                  console.log(\"导入的图片文件数量:\", newFiles.length);\n\n                  if (newFiles.length === 0) {\n                        message.warning('未找到图片文件');\n                        setIsUploading(false);\n                        return;\n                  }\n\n                  // 创建新URL\n                  const urls = [];\n                  for (const file of newFiles) {\n                        try {\n                              const url = URL.createObjectURL(file);\n                              urls.push(url);\n                        } catch (e) {\n                              console.error(\"无法为文件创建URL:\", file.name, e);\n                        }\n                  }\n\n                  if (urls.length === 0) {\n                        message.error('无法处理图片文件');\n                        setIsUploading(false);\n                        return;\n                  }\n\n                  // 设置新的状态\n                  setImageList(newFiles);\n                  setPreviewUrls(urls);\n                  setSelectedImage(urls[0]);\n\n                  message.success(`成功导入 ${newFiles.length} 张图片`);\n            } catch (error) {\n                  console.error('文件夹导入错误:', error);\n                  message.error('文件夹导入失败');\n                  // 出错时也重置状态\n                  resetAllStates();\n            } finally {\n                  setIsUploading(false);\n            }\n      }, 300); // 300ms的防抖延迟\n\n      // 重置图片位置（在切换图片时调用）\n      const resetImagePosition = () => {\n            setScale(1);\n            setPosition({ x: 0, y: 0 });\n      };\n\n      // 处理图片切换\n      const handleImageChange = (index) => {\n            if (index >= 0 && index < imageList.length) {\n                  setCurrentImageIndex(index);\n                  setSelectedImage(previewUrls[index]);\n                  resetImagePosition(); // 重置缩放和位置\n                  // 如果有检测结果，显示对应结果\n                  if (detectionHistory[index]) {\n                        setDetectionResults(detectionHistory[index].result);\n                  }\n            }\n      };\n\n      // 处理上一张图片\n      const handlePrevImage = () => {\n            handleImageChange(currentImageIndex - 1);\n      };\n\n      // 处理下一张图片\n      const handleNextImage = () => {\n            handleImageChange(currentImageIndex + 1);\n      };\n\n      // 处理页码变化\n      const handlePageChange = (page) => {\n            handleImageChange(page - 1);\n      };\n\n      const [selectedModel, setSelectedModel] = useState('yolov11'); // 默认选择Yolov11模型\n\n      const handleModelChange = (value) => {\n            setSelectedModel(value);\n            switch (value) {\n                  case 'yolov11':\n                        message.info('切换到 Yolov11 模型');\n                        break;\n                  case 'yolov11-vote2':\n                        message.info('切换到 Yolov11-vote2 模型');\n                        break;\n                  case 'yolov11-vote4':\n                        message.info('切换到 Yolov11-vote4 模型');\n                        break;\n                  default:\n                        message.warning('未知模型选择');\n            }\n      };\n\n      const [iouThreshold, setIouThreshold] = useState(0.45); // 默认值为 0.45\n      const [confThreshold, setConfThreshold] = useState(0.4); // 默认值为 0.4\n\n      // 修改单个图片检测逻辑，传递 iou_threshold 和 conf_threshold 参数\n      const processImage = async (file) => {\n            try {\n                  const formData = new FormData();\n                  formData.append('image', file);\n\n                  // 添加图像尺寸信息到请求参数中\n                  const params = {\n                        vote_threshold: selectedModel === 'yolov11-vote2' ? 1 : selectedModel === 'yolov11-vote4' ? 2 : 1,\n                        orientation_count: selectedModel === 'yolov11-vote2' ? 2 : selectedModel === 'yolov11-vote4' ? 4 : 1,\n                        iou_threshold: iouThreshold,\n                        conf_threshold: confThreshold,\n                  };\n\n                  // 如果有图像尺寸信息，也传递给后端\n                  if (imageDimensions) {\n                        params.img_width = imageDimensions.width;\n                        params.img_height = imageDimensions.height;\n                  }\n\n                  const detectResponse = await axios.post('/api/detect', formData, {\n                        params: params,\n                  });\n\n                  return detectResponse.data;\n            } catch (error) {\n                  throw new Error(`检测失败: ${error.message}`);\n            }\n      };\n\n      // 批量检测处理\n      const [startTime, setStartTime] = useState(null); // 检测开始时间\n      const [endTime, setEndTime] = useState(null); // 检测结束时间\n\n      // 计算运行时长\n      const calculateUptime = () => {\n            if (!startTime || !endTime) return 'N/A';\n            const duration = Math.floor((endTime - startTime) / 1000); // 秒数\n            const hours = Math.floor(duration / 3600);\n            const minutes = Math.floor((duration % 3600) / 60);\n            const seconds = duration % 60;\n            return `${hours}小时${minutes}分钟${seconds}秒`;\n      };\n\n      // 修改 handleBatchDetection 函数，记录开始和结束时间\n      const handleBatchDetection = async () => {\n            // Reset runtime variables at the start of batch detection\n            setStartTime(null);\n            startTimeRef.current = null;\n            setEndTime(null);\n            setCurrentRunTime('0秒');\n            if (isCameraActive) {\n                  toggleContinuousCapture();\n                  return;\n            }\n            if (imageList.length === 0) {\n                  message.warning('请先导入图片');\n                  return;\n            }\n\n            if (isBatchProcessing) {\n                  const newPauseState = !isPaused;\n                  setIsPaused(newPauseState);\n                  isPausedRef.current = newPauseState;\n                  message.info(newPauseState ? '暂停检测' : '继续检测');\n                  return;\n            }\n\n            setIsBatchProcessing(true);\n            setLoading(true);\n            setIsPaused(false);\n            isPausedRef.current = false;\n\n            // 记录检测开始时间\n            const start = Date.now();\n            setStartTime(start);\n            startTimeRef.current = start;\n            setEndTime(null);\n\n            // 启动运行时长计时器\n            const interval = setInterval(() => {\n                  const now = Date.now();\n                  // Use the ref instead of the closure value\n                  const duration = Math.floor((now - startTimeRef.current) / 1000); // 秒数\n                  const hours = Math.floor(duration / 3600);\n                  const minutes = Math.floor((duration % 3600) / 60);\n                  const seconds = duration % 60;\n                  setCurrentRunTime(`${hours}小时${minutes}分钟${seconds}秒`);\n            }, 1000);\n\n            setRunTimeInterval(interval);\n\n            let history = [];\n            let i = 0;\n\n            try {\n                  setDetectionProgress(1);\n\n                  while (i < imageList.length) {\n                        if (isPausedRef.current) {\n                              await new Promise(resolve => {\n                                    const checkPauseInterval = setInterval(() => {\n                                          if (!isPausedRef.current) {\n                                                clearInterval(checkPauseInterval);\n                                                resolve();\n                                          }\n                                    }, 100);\n                              });\n                              continue;\n                        }\n\n                        setDetectionResults({\n                              defects: [],\n                              statistics: {\n                                    defect_types: {}\n                              }\n                        });\n\n                        setProcessedResults([]);\n                        setCurrentImageIndex(i);\n                        setSelectedImage(previewUrls[i]);\n\n                        const progress = Math.round(((i + 1) / imageList.length) * 100);\n                        setBatchProgress(progress);\n                        setDetectionProgress(progress);\n\n                        const result = await processImage(imageList[i]);\n\n                        history.push({\n                              imageUrl: previewUrls[i],\n                              result: result\n                        });\n\n                        setDetectionResults(result);\n\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n\n                        if (!isPausedRef.current) {\n                              i++;\n                        }\n                  }\n\n                  setDetectionHistory(history);\n\n                  // 停止计时器并记录结束时间\n                  clearInterval(runTimeInterval);\n                  setRunTimeInterval(null);\n                  const end = Date.now();\n                  setEndTime(end);\n\n                  // 计算并设置最终运行时长\n                  const finalDuration = Math.floor((end - startTimeRef.current) / 1000);\n                  const hours = Math.floor(finalDuration / 3600);\n                  const minutes = Math.floor((finalDuration % 3600) / 60);\n                  const seconds = finalDuration % 60;\n                  setCurrentRunTime(`${hours}小时${minutes}分钟${seconds}秒`);\n\n                  message.success('检测完成');\n                  setIsBatchProcessing(false);\n            } catch (error) {\n                  // 停止计时器\n                  clearInterval(runTimeInterval);\n                  setRunTimeInterval(null);\n\n                  message.error(error.message);\n                  setIsBatchProcessing(false);\n            } finally {\n                  setLoading(false);\n            }\n      };\n      // 修改useEffect中的全局滚轮事件处理\n      useEffect(() => {\n            if (selectedImage) {\n                  // 我们只需要为图片区域添加滚轮处理，不影响全局滚动\n                  const handleImageScrolling = (e) => {\n                        // 检查事件是否发生在图片容器内\n                        let targetElement = e.target;\n                        let isInsideImageWrapper = false;\n\n                        while (targetElement) {\n                              if (targetElement === imageWrapperRef.current) {\n                                    isInsideImageWrapper = true;\n                                    break;\n                              }\n                              targetElement = targetElement.parentElement;\n                        }\n\n                        // 仅当在图片区域内才阻止默认行为\n                        if (isInsideImageWrapper) {\n                              e.preventDefault();\n                        }\n                  };\n\n                  // 添加事件监听器到图片容器\n                  if (imageWrapperRef.current) {\n                        imageWrapperRef.current.addEventListener('wheel', handleImageScrolling, { passive: false });\n                  }\n\n                  return () => {\n                        // 移除事件监听器\n                        if (imageWrapperRef.current) {\n                              imageWrapperRef.current.removeEventListener('wheel', handleImageScrolling);\n                        }\n                  };\n            }\n      }, [selectedImage]);\n\n      // 移除之前的全局滚轮事件监听代码，改为下面的代码\n      // 这个处理只针对图片容器，允许其他区域正常滚动\n      useEffect(() => {\n            // 清理之前的样式\n            document.body.style.overflow = '';\n            document.documentElement.style.overflow = '';\n      }, []);\n\n      // 修改handleWheel函数，只处理图片缩放，不影响其他区域的滚动\n      const handleWheel = (e) => {\n            // 获取图片元素\n            const img = imageWrapperRef.current?.querySelector('img');\n            if (!img) return;\n\n            // 阻止默认行为，这样图片容器的滚轮操作不会引起页面滚动\n            e.preventDefault();\n\n            // 减小缩放系数，使缩放更平滑\n            const delta = e.deltaY * -0.005;\n            const newScale = Math.min(Math.max(scale + delta, MIN_ZOOM), MAX_ZOOM);\n\n            if (newScale === scale) return;\n\n            // 获取鼠标在图片容器中的相对位置\n            const rect = imageWrapperRef.current.getBoundingClientRect();\n            const mouseX = e.clientX - rect.left;\n            const mouseY = e.clientY - rect.top;\n\n            // 计算鼠标位置相对于图片中心的偏移\n            const centerX = rect.width / 2;\n            const centerY = rect.height / 2;\n\n            // 计算新的位置\n            const scaleChange = newScale - scale;\n            let newPosition = position;\n\n            if (delta > 0) { // 放大时\n                  // 以鼠标位置为中心进行放大\n                  newPosition = {\n                        x: position.x - (mouseX - centerX) * (scaleChange / scale),\n                        y: position.y - (mouseY - centerY) * (scaleChange / scale)\n                  };\n            } else { // 缩小时\n                  // 以图片中心为基准点进行缩小\n                  newPosition = {\n                        x: position.x * (newScale / scale),\n                        y: position.y * (newScale / scale)\n                  };\n            }\n\n            // 更新状态\n            setScale(newScale);\n            setPosition(newPosition);\n      };\n\n      // 处理鼠标拖动\n      const handleMouseDown = (e) => {\n            if (e.button === 0) {\n                  setIsDragging(true);\n                  setDragStart({\n                        x: e.clientX - position.x,\n                        y: e.clientY - position.y\n                  });\n            }\n      };\n\n      const handleMouseMove = (e) => {\n            if (isDragging) {\n                  const newX = e.clientX - dragStart.x;\n                  const newY = e.clientY - dragStart.y;\n\n                  // 限制拖动范围\n                  const maxOffset = 300 * (scale - 1);\n                  const boundedX = Math.max(Math.min(newX, maxOffset), -maxOffset);\n                  const boundedY = Math.max(Math.min(newY, maxOffset), -maxOffset);\n\n                  setPosition({\n                        x: boundedX,\n                        y: boundedY\n                  });\n            }\n      };\n\n      // 处理鼠标释放事件\n      const handleMouseUp = () => {\n            setIsDragging(false);\n      };\n\n      // 处理鼠标离开事件\n      const handleMouseLeave = () => {\n            setIsDragging(false);\n      };\n\n      // 修改缩放处理函数，添加位置重置\n      const handleZoomIn = () => {\n            setZoomLevel(prev => {\n                  const newZoom = Math.min(prev + ZOOM_STEP, MAX_ZOOM);\n                  if (newZoom === 1) {\n                        resetImagePosition();\n                  }\n                  return newZoom;\n            });\n      };\n\n      const handleZoomOut = () => {\n            setZoomLevel(prev => {\n                  const newZoom = Math.max(prev - ZOOM_STEP, MIN_ZOOM);\n                  if (newZoom === 1) {\n                        resetImagePosition();\n                  }\n                  return newZoom;\n            });\n      };\n\n      const handleExportResults = async () => {\n            if (!detectionResults.defects.length) {\n                  message.warning('没有可导出的检测结果');\n                  return;\n            }\n\n            try {\n                  // 检查浏览器是否支持文件系统访问 API\n                  if (!window.showDirectoryPicker) {\n                        message.error('当前浏览器不支持文件夹选择功能');\n                        return;\n                  }\n\n                  // 弹出文件夹选择器\n                  const directoryHandle = await window.showDirectoryPicker();\n\n                  // 创建子文件夹：标注图片和 JSON 文件\n                  const annotatedImagesFolder = await directoryHandle.getDirectoryHandle('Annotated_Images', { create: true });\n                  const jsonFolder = await directoryHandle.getDirectoryHandle('JSON_Files', { create: true });\n\n                  // 遍历所有图片，导出标注图片和对应的 JSON 文件\n                  for (let i = 0; i < imageList.length; i++) {\n                        const imageFile = imageList[i];\n                        const imageName = imageFile.name.split('.').slice(0, -1).join('.'); // 去掉文件扩展名\n\n                        // 导出标注图片\n                        const annotatedImageName = `${imageName}_annotated.png`;\n                        const annotatedImageHandle = await annotatedImagesFolder.getFileHandle(annotatedImageName, { create: true });\n                        const writableStream = await annotatedImageHandle.createWritable();\n\n                        // 创建标注图片的 Canvas\n                        const canvas = document.createElement('canvas');\n                        const context = canvas.getContext('2d');\n                        const image = new Image();\n\n                        // 加载图片并绘制到 Canvas 上\n                        image.src = previewUrls[i];\n                        await new Promise((resolve) => {\n                              image.onload = () => {\n                                    canvas.width = image.width;\n                                    canvas.height = image.height;\n                                    context.drawImage(image, 0, 0);\n\n                                    // 绘制检测框\n                                    detectionHistory[i]?.result?.defects.forEach((defect) => {\n                                          if (defect.bbox) {\n                                                const { x1, y1, x2, y2 } = defect.bbox;\n                                                context.strokeStyle = getDefectColor(defect.type);\n                                                context.lineWidth = 2;\n                                                context.strokeRect(x1, y1, x2 - x1, y2 - y1);\n\n                                                // 绘制缺陷类型标签\n                                                context.fillStyle = getDefectColor(defect.type);\n                                                context.font = '16px Arial';\n                                                context.fillText(defect.type, x1, y1 - 5);\n                                          }\n                                    });\n\n                                    resolve();\n                              };\n                        });\n\n                        // 将 Canvas 转换为 Blob 并写入文件\n                        const blob = await new Promise((resolve) => canvas.toBlob(resolve, 'image/png'));\n                        await writableStream.write(blob);\n                        await writableStream.close();\n\n                        // 导出对应的 JSON 文件\n                        const jsonFileName = `${imageName}_result.json`;\n                        const jsonFileHandle = await jsonFolder.getFileHandle(jsonFileName, { create: true });\n                        const jsonWritableStream = await jsonFileHandle.createWritable();\n\n                        const jsonResult = {\n                              image: imageName,\n                              defects: detectionHistory[i]?.result?.defects || [],\n                              statistics: detectionHistory[i]?.result?.statistics || {},\n                        };\n\n                        await jsonWritableStream.write(JSON.stringify(jsonResult, null, 2));\n                        await jsonWritableStream.close();\n                  }\n\n                  message.success('检测结果已成功导出');\n            } catch (error) {\n                  console.error('导出结果失败:', error);\n                  message.error('导出结果失败');\n            }\n      };\n\n      const handleExportReport = () => {\n            // 检查是否有检测结果可供导出\n            if (!detectionHistory || detectionHistory.length === 0) {\n                  message.warning('没有检测结果可供导出');\n                  return;\n            }\n\n            message.loading('正在生成报告...', 0);\n\n            try {\n                  // 创建一个临时的隐藏div来渲染HTML内容\n                  const reportContainer = document.createElement('div');\n                  reportContainer.style.position = 'absolute';\n                  reportContainer.style.left = '-9999px';\n                  reportContainer.style.top = '-9999px';\n                  reportContainer.style.width = '794px'; // A4宽度 (mm到px的近似值)\n                  document.body.appendChild(reportContainer);\n\n                  // 获取当前日期和时间\n                  const now = new Date();\n                  const dateStr = now.toLocaleDateString('zh-CN');\n                  const timeStr = now.toLocaleTimeString('zh-CN');\n\n                  // 计算批次统计数据\n                  const batchStatistics = {\n                        totalImages: imageList.length,\n                        totalDefects: 0,\n                        defectTypeCounts: {},\n                        imagesWithDefects: 0,\n                        averageDefectsPerImage: 0\n                  };\n\n                  // 遍历所有检测历史计算统计数据\n                  detectionHistory.forEach(history => {\n                        if (history.result && history.result.defects) {\n                              const defects = history.result.defects;\n                              if (defects.length > 0) {\n                                    batchStatistics.imagesWithDefects++;\n                              }\n                              batchStatistics.totalDefects += defects.length;\n\n                              defects.forEach(defect => {\n                                    if (!batchStatistics.defectTypeCounts[defect.type]) {\n                                          batchStatistics.defectTypeCounts[defect.type] = 0;\n                                    }\n                                    batchStatistics.defectTypeCounts[defect.type]++;\n                              });\n                        }\n                  });\n\n                  // 计算平均每张图片的缺陷数\n                  batchStatistics.averageDefectsPerImage = (batchStatistics.totalDefects / batchStatistics.totalImages).toFixed(2);\n\n                  // 准备批次统计表格\n                  let batchStatsRows = '';\n                  Object.entries(batchStatistics.defectTypeCounts).forEach(([type, count]) => {\n                        const percentage = ((count / batchStatistics.totalDefects) * 100).toFixed(1);\n                        batchStatsRows += `\n                  <tr>\n                        <td>${type}</td>\n                        <td>${count}</td>\n                        <td>${percentage}%</td>\n                  </tr>`;\n                  });\n\n                  // 准备当前图片的检测结果表格\n                  let currentImageDefectsRows = '';\n                  if (detectionResults && detectionResults.defects) {\n                        detectionResults.defects.forEach((defect, index) => {\n                              const positionStr = defect.bbox ?\n                                    `(${defect.bbox.x1.toFixed(0)},${defect.bbox.y1.toFixed(0)},${defect.bbox.x2.toFixed(0)},${defect.bbox.y2.toFixed(0)})` :\n                                    '未知';\n                              const confidence = defect.confidence ? `${defect.confidence}%` : '未知';\n\n                              currentImageDefectsRows += `\n                  <tr>\n                        <td>${index + 1}</td>\n                        <td>${defect.type}</td>\n                        <td>${positionStr}</td>\n                        <td>${confidence}</td>\n                  </tr>`;\n                        });\n                  }\n\n                  // 使用HTML创建报告内容\n                  reportContainer.innerHTML = `\n                  <div style=\"font-family: 'Microsoft YaHei', 'SimHei', sans-serif; padding: 20px; color: #333;\">\n                        <style>\n                              table {\n                                    width: 100%;\n                                    border-collapse: collapse;\n                                    margin: 15px 0;\n                              }\n                              th, td {\n                                    border: 1px solid #ddd;\n                                    padding: 8px;\n                                    text-align: center;\n                              }\n                              th {\n                                    background-color: #00539c;\n                                    color: white;\n                                    font-weight: bold;\n                              }\n                              tr:nth-child(even) {\n                                    background-color: #f2f2f2;\n                              }\n                              h1, h2, h3 {\n                                    color: #00539c;\n                                    margin-bottom: 10px;\n                              }\n                              .report-header {\n                                    text-align: center;\n                                    margin-bottom: 20px;\n                              }\n                              .report-date {\n                                    text-align: right;\n                                    color: #666;\n                                    font-size: 12px;\n                                    margin-bottom: 15px;\n                              }\n                              .section {\n                                    margin-bottom: 25px;\n                              }\n                              .footer {\n                                    text-align: center;\n                                    margin-top: 30px;\n                                    font-size: 10px;\n                                    color: #999;\n                                    position: absolute;\n                                    bottom: 20px;\n                                    width: 100%;\n                              }\n                              hr {\n                                    border: 0;\n                                    height: 1px;\n                                    background: #ddd;\n                                    margin: 20px 0;\n                              }\n                              .stats-card {\n                                    background: #f8f9fa;\n                                    border-radius: 8px;\n                                    padding: 15px;\n                                    margin: 10px 0;\n                                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                              }\n                              .stats-grid {\n                                    display: grid;\n                                    grid-template-columns: repeat(3, 1fr);\n                                    gap: 15px;\n                                    margin: 15px 0;\n                              }\n                              .stat-item {\n                                    background: white;\n                                    padding: 10px;\n                                    border-radius: 6px;\n                                    text-align: center;\n                              }\n                              .stat-value {\n                                    font-size: 24px;\n                                    font-weight: bold;\n                                    color: #00539c;\n                              }\n                              .stat-label {\n                                    font-size: 14px;\n                                    color: #666;\n                              }\n                        </style>\n                        \n                        <div class=\"report-header\">\n                              <h1>PCB缺陷检测报告</h1>\n                        </div>\n                        \n                        <div class=\"report-date\">\n                              报告生成时间: ${dateStr} ${timeStr}\n                        </div>\n                        \n                        <hr>\n                        \n                        <div class=\"section\">\n                              <h2>批次检测概述</h2>\n                              <div class=\"stats-grid\">\n                                    <div class=\"stat-item\">\n                                          <div class=\"stat-value\">${batchStatistics.totalImages}</div>\n                                          <div class=\"stat-label\">检测总图片数</div>\n                                    </div>\n                                    <div class=\"stat-item\">\n                                          <div class=\"stat-value\">${batchStatistics.totalDefects}</div>\n                                          <div class=\"stat-label\">检出总缺陷数</div>\n                                    </div>\n                                    <div class=\"stat-item\">\n                                          <div class=\"stat-value\">${batchStatistics.averageDefectsPerImage}</div>\n                                          <div class=\"stat-label\">平均每图缺陷数</div>\n                                    </div>\n                              </div>\n                              \n                              <div class=\"stats-card\">\n                                    <h3>批次缺陷类型分布</h3>\n                                    <table>\n                                          <thead>\n                                                <tr>\n                                                      <th>缺陷类型</th>\n                                                      <th>数量</th>\n                                                      <th>占比</th>\n                                                </tr>\n                                          </thead>\n                                          <tbody>\n                                                ${batchStatsRows}\n                                          </tbody>\n                                    </table>\n                              </div>\n                        </div>\n                        \n                        <hr>\n                        \n                        <div class=\"section\">\n                              <h2>当前图片检测详情</h2>\n                              <p>图片序号: ${currentImageIndex + 1}/${imageList.length}</p>\n                              <table>\n                                    <thead>\n                                          <tr>\n                                                <th>缺陷ID</th>\n                                                <th>缺陷类型</th>\n                                                <th>位置坐标(x1,y1,x2,y2)</th>\n                                                <th>置信度</th>\n                                          </tr>\n                                    </thead>\n                                    <tbody>\n                                          ${currentImageDefectsRows}\n                                    </tbody>\n                              </table>\n                        </div>\n                        \n                        <div class=\"footer\">\n                              PCB缺陷检测系统\n                        </div>\n                  </div>\n                  `;\n\n                  // 使用html2canvas将HTML转换为canvas\n                  import('html2canvas').then(html2canvasModule => {\n                        const html2canvas = html2canvasModule.default;\n                        html2canvas(reportContainer, {\n                              scale: 2, // 提高清晰度\n                              useCORS: true,\n                              logging: false\n                        }).then(canvas => {\n                              // 创建PDF\n                              import('jspdf').then(jsPdfModule => {\n                                    const { jsPDF } = jsPdfModule;\n\n                                    const imgData = canvas.toDataURL('image/png');\n                                    const pdf = new jsPDF({\n                                          orientation: 'portrait',\n                                          unit: 'mm',\n                                          format: 'a4'\n                                    });\n\n                                    // 计算合适的图像尺寸以适合A4页面\n                                    const imgWidth = 210; // A4宽度，单位mm\n                                    const pageHeight = 297; // A4高度，单位mm\n                                    const imgHeight = canvas.height * imgWidth / canvas.width;\n\n                                    let heightLeft = imgHeight;\n                                    let position = 0;\n\n                                    // 添加第一页\n                                    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n                                    heightLeft -= pageHeight;\n\n                                    // 如果内容超过一页，添加更多页面\n                                    while (heightLeft > 0) {\n                                          position = heightLeft - imgHeight;\n                                          pdf.addPage();\n                                          pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n                                          heightLeft -= pageHeight;\n                                    }\n\n                                    // 添加文件名，包含时间戳以避免重复\n                                    const timestamp = now.getTime();\n                                    const filename = `PCB缺陷检测报告_${timestamp}.pdf`;\n\n                                    // 保存PDF文件\n                                    pdf.save(filename);\n\n                                    // 清理临时DOM元素\n                                    document.body.removeChild(reportContainer);\n\n                                    // 关闭加载提示并显示成功消息\n                                    message.destroy();\n                                    message.success('报告已成功导出');\n                              });\n                        });\n                  });\n            } catch (error) {\n                  // 发生错误时关闭加载提示并显示错误消息\n                  message.destroy();\n                  console.error(\"导出报告出错:\", error);\n                  message.error('导出报告失败: ' + error.message);\n\n                  // 确保清理可能的临时DOM元素\n                  const reportContainer = document.querySelector('div[style*=\"-9999px\"]');\n                  if (reportContainer) {\n                        document.body.removeChild(reportContainer);\n                  }\n            }\n      };\n\n      const getChartOption = () => {\n            // 检查是否有有效的统计数据\n            const defectTypes = detectionResults?.statistics?.defect_types;\n            if (!defectTypes || Object.keys(defectTypes).length === 0) {\n                  return {\n                        tooltip: { trigger: 'item' },\n                        legend: { show: false },\n                        series: [] // 返回空的 series，避免绘制灰色圆\n                  };\n            }\n\n            // 获取所有缺陷类型\n            const defectNames = Object.keys(defectTypes);\n\n            // 为每种缺陷类型生成对应的颜色\n            const colors = defectNames.map(name => {\n                  // 将中文名称映射到英文键名以获取颜色\n                  const colorKey = (() => {\n                        switch (name) {\n                              case '鼠咬': return 'mouse_bite';\n                              case '开路': return 'open_circuit';\n                              case '短路': return 'short';\n                              case '毛刺': return 'spur';\n                              case '杂铜': return 'spurious_copper';\n                              default: return name.toLowerCase();\n                        }\n                  })();\n\n                  return getDefectColor(colorKey);\n            });\n\n            return {\n                  tooltip: {\n                        trigger: 'item',\n                        formatter: '{a} <br/>{b}: {c} ({d}%)'\n                  },\n                  legend: {\n                        orient: 'horizontal',\n                        bottom: 10,\n                        left: 'center',\n                        data: defectNames,\n                        itemGap: 15,\n                        height: 50\n                  },\n                  color: colors,\n                  series: [\n                        {\n                              name: '缺陷类型',\n                              type: 'pie',\n                              radius: '65%',\n                              center: ['50%', '40%'],\n                              data: Object.entries(defectTypes).map(([name, value]) => ({\n                                    value,\n                                    name\n                              })),\n                              label: {\n                                    show: true,\n                                    position: 'outside',\n                                    alignTo: 'labelLine',\n                                    margin: 20,\n                                    formatter: '{b}\\n{c} ({d}%)',\n                                    lineHeight: 15,\n                                    rich: {\n                                          b: {\n                                                width: 60,\n                                                align: 'left'\n                                          }\n                                    }\n                              },\n                              labelLine: {\n                                    show: true,\n                                    length: 15,\n                                    length2: 20,\n                                    minTurnAngle: 120,\n                                    maxSurfaceAngle: 80\n                              },\n                              emphasis: {\n                                    itemStyle: {\n                                          shadowBlur: 10,\n                                          shadowOffsetX: 0,\n                                          shadowColor: 'rgba(0, 0, 0, 0.5)'\n                                    }\n                              }\n                        }\n                  ]\n            };\n      };\n      const handleImageWrapperClick = (e) => {\n            // 获取图片元素\n            const img = imageWrapperRef.current?.querySelector('img');\n            if (!img) return;\n\n            // 获取图片元素的位置和尺寸\n            const imgRect = img.getBoundingClientRect();\n\n            // 检查点击是否在图片区域外\n            const isOutsideImage = (\n                  e.clientX < imgRect.left ||\n                  e.clientX > imgRect.right ||\n                  e.clientY < imgRect.top ||\n                  e.clientY > imgRect.bottom\n            );\n\n            if (isOutsideImage) {\n                  // 重置缩放和位置\n                  setScale(1);\n                  setPosition({ x: 0, y: 0 });\n            }\n      };\n\n      const handleLoginSuccess = (user) => {\n            setIsLoggedIn(true);\n            setCurrentUser(user);\n      };\n\n      const handleLogout = () => {\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            setIsLoggedIn(false);\n            setCurrentUser(null);\n      };\n\n      // 添加在其他useEffect之后\n      // 监听imageDimensions的变化，确保在渲染边界框前已获取图像尺寸\n      useEffect(() => {\n            // 当imageDimensions变化时，重新计算和应用边界框\n            if (imageDimensions && detectionResults && detectionResults.defects) {\n                  console.log('图像尺寸更新，重新应用边界框:', imageDimensions);\n                  // 触发边界框重新应用\n                  filterDefects(defectFilter);\n            }\n      }, [imageDimensions]);\n\n      // 添加一个useEffect来监听视频元素的大小和位置变化\n      useEffect(() => {\n            if (isCameraActive && videoRef.current) {\n                  // 创建一个ResizeObserver来监听视频元素的大小变化\n                  const resizeObserver = new ResizeObserver(() => {\n                        // 触发边界框重新渲染\n                        if (processedResults && processedResults.length > 0) {\n                              console.log('视频元素尺寸变化，重新应用边界框');\n                              // 创建一个新的过滤结果副本以触发渲染\n                              setProcessedResults([...processedResults]);\n                        }\n                  });\n\n                  // 开始观察视频元素\n                  resizeObserver.observe(videoRef.current);\n\n                  // 清理函数\n                  return () => {\n                        resizeObserver.disconnect();\n                  };\n            }\n      }, [isCameraActive, videoRef.current, processedResults]);\n\n      if (!isLoggedIn) {\n            return <Login onLoginSuccess={handleLoginSuccess} />;\n      }\n\n      return (\n            <Layout className=\"app-container\">\n                  <Header className=\"header\">\n                        <div className=\"header-left\">\n                              <img src=\"/logo.svg\" alt=\"logo\" className=\"logo\" />\n                              <h1>基于YOLOv11和投票融合的PCB缺陷检测系统</h1>\n                        </div>\n                        <div className=\"header-right\">\n                              <SettingOutlined className=\"header-icon\" />\n                              <BulbOutlined className=\"header-icon\" />\n                              <Tooltip title=\"退出登录\">\n                                    <UserOutlined className=\"header-icon\" onClick={handleLogout} style={{ cursor: 'pointer' }} />\n                              </Tooltip>\n                        </div>\n                  </Header>\n                  <Layout style={{ padding: '24px', background: '#f0f2f5' }}>\n                        <div style={{ display: 'flex', gap: '24px', minWidth: 'fit-content' }}>\n                              <div className=\"sidebar\">\n                                    <Button\n                                          type=\"primary\"\n                                          className=\"start-detection-button\"\n                                          style={{\n                                                background: (isBatchProcessing && !isPaused) || isCapturing ? '#f5222d' : '#37c537',\n                                                border: 'none',\n                                          }}\n                                          onClick={handleBatchDetection}\n                                          icon={isBatchProcessing && !isPaused ? <LoadingOutlined /> : <SearchOutlined />}\n                                    >\n                                          {isCameraActive && isCapturing ? '停止检测' :\n                                                isCameraActive ? '开始检测' :\n                                                      isBatchProcessing ? (isPaused ? '继续检测' : '暂停检测') : '开始检测'}\n                                    </Button>\n                                    <div className=\"system-status-section\">\n                                          <h3>系统状态</h3>\n                                          <div className=\"status-item status-cpu\" style={{ display: 'flex', alignItems: 'flex-start' }}>\n                                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '50px' }}>\n                                                      <div className=\"status-icon status-icon-cpu\"></div>\n                                                      <span className=\"status-value\" style={{\n                                                            marginTop: '5px',\n                                                            backgroundColor: 'rgba(24, 144, 255, 0.2)',\n                                                            padding: '2px 8px',\n                                                            borderRadius: '10px',\n                                                            fontSize: '12px',\n                                                            color: '#1890ff',\n                                                            textAlign: 'center'\n                                                      }}>\n                                                            {Math.min(Math.max(Math.round(systemStatus.cpuUsage || 0), 0), 100)}%\n                                                      </span>\n                                                </div>\n                                                <div className=\"status-content\" style={{ marginLeft: '10px', marginTop: '2px' }}>\n                                                      <div className=\"status-header\">\n                                                            <span className=\"status-label\">CPU使用率</span>\n                                                      </div>\n                                                      <div style={{ position: 'relative' }}>\n                                                            <Progress\n                                                                  percent={Math.min(Math.max(Math.round(systemStatus.cpuUsage || 0), 0), 100)}\n                                                                  size=\"small\"\n                                                                  status={systemStatus.cpuUsage > 80 ? 'exception' : 'normal'}\n                                                                  showInfo={false}\n                                                                  strokeColor={{\n                                                                        '0%': '#108ee9',\n                                                                        '100%': systemStatus.cpuUsage > 80 ? '#f5222d' : '#52c41a',\n                                                                  }}\n                                                            />\n                                                      </div>\n                                                </div>\n                                          </div>\n                                          <div className=\"status-item status-memory\" style={{ display: 'flex', alignItems: 'flex-start' }}>\n                                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '50px' }}>\n                                                      <div className=\"status-icon status-icon-memory\"></div>\n                                                      <span className=\"status-value\" style={{\n                                                            marginTop: '5px',\n                                                            backgroundColor: 'rgba(114, 46, 209, 0.2)',\n                                                            padding: '2px 8px',\n                                                            borderRadius: '10px',\n                                                            fontSize: '12px',\n                                                            color: '#722ed1',\n                                                            textAlign: 'center'\n                                                      }}>\n                                                            {Math.min(Math.max(Math.round(systemStatus.memoryUsage || 0), 0), 100)}%\n                                                      </span>\n                                                </div>\n                                                <div className=\"status-content\" style={{ marginLeft: '10px', marginTop: '2px' }}>\n                                                      <div className=\"status-header\">\n                                                            <span className=\"status-label\">内存使用率</span>\n                                                      </div>\n                                                      <div style={{ position: 'relative' }}>\n                                                            <Progress\n                                                                  percent={Math.min(Math.max(Math.round(systemStatus.memoryUsage || 0), 0), 100)}\n                                                                  size=\"small\"\n                                                                  status={systemStatus.memoryUsage > 80 ? 'exception' : 'normal'}\n                                                                  showInfo={false}\n                                                                  strokeColor={{\n                                                                        '0%': '#722ed1',\n                                                                        '100%': systemStatus.memoryUsage > 80 ? '#f5222d' : '#13c2c2',\n                                                                  }}\n                                                            />\n                                                      </div>\n                                                </div>\n                                          </div>\n                                          <div className=\"status-item status-time\" style={{ display: 'flex', alignItems: 'flex-start' }}>\n                                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', width: '50px' }}>\n                                                      <div className=\"status-icon status-icon-time\"></div>\n                                                </div>\n                                                <div className=\"status-content\" style={{ marginLeft: '10px', marginTop: '2px' }}>\n                                                      <div className=\"status-header\">\n                                                            <span className=\"status-label\">运行时长</span>\n                                                      </div>\n                                                      <div style={{\n                                                            display: 'flex',\n                                                            justifyContent: 'center',\n                                                            marginTop: '5px'\n                                                      }}>\n                                                            <span className=\"status-time-value\" style={{\n                                                                  backgroundColor: 'rgba(250, 173, 20, 0.2)',\n                                                                  padding: '4px 12px',\n                                                                  borderRadius: '30px',\n                                                                  fontSize: '12px',\n                                                                  color: '#faad14',\n                                                                  whiteSpace: 'nowrap',\n                                                                  textAlign: 'center'\n                                                            }}>\n                                                                  {isBatchProcessing || isCapturing ? currentRunTime : (endTime && startTime ? calculateUptime() : '0秒')}\n                                                            </span>\n                                                      </div>\n                                                </div>\n                                          </div>\n                                    </div>\n                                    <div className=\"sidebar-actions\">\n                                          <Upload\n                                                accept=\"image/*\"\n                                                showUploadList={false}\n                                                beforeUpload={handleImageUpload}\n                                                disabled={isUploading || loading || isCameraActive}\n                                          >\n                                                <Button className=\"action-btn\" style={{ width: '160px' }} icon={<UploadOutlined className=\"btn-icon\" />} disabled={isUploading || loading || isCameraActive}>\n                                                      导入图像\n                                                </Button>\n                                          </Upload>\n                                          <Upload\n                                                directory\n                                                multiple\n                                                accept=\"image/*\"\n                                                showUploadList={false}\n                                                beforeUpload={() => false}\n                                                onChange={debouncedHandleFolderUpload}\n                                                disabled={isUploading || loading || isCameraActive}\n                                                fileList={[]}\n                                          >\n                                                <Button className=\"action-btn\" style={{ width: '160px' }} icon={<FolderOutlined className=\"btn-icon\" />} disabled={isUploading || loading || isCameraActive}>\n                                                      导入文件夹\n                                                </Button>\n                                          </Upload>\n                                          {/* 添加摄像头按钮 */}\n                                          <Button\n                                                className=\"action-btn\"\n                                                icon={isCameraActive ? <VideoCameraOutlined className=\"btn-icon\" /> : <CameraOutlined className=\"btn-icon\" />}\n                                                onClick={handleOpenCamera}\n                                                style={{ width: '160px', color: isCameraActive ? '#f5222d' : '' }}\n                                          >\n                                                {isCameraActive ? '关闭摄像头' : '打开摄像头'}\n                                          </Button>\n                                          <Button className=\"action-btn\" style={{ width: '160px' }} icon={<SearchOutlined className=\"btn-icon\" />} onClick={handleExportResults}>\n                                                导出结果\n                                          </Button>\n                                          <Button className=\"action-btn\" style={{ width: '160px' }} icon={<FileTextOutlined className=\"btn-icon\" />} onClick={handleExportReport}>\n                                                导出报告\n                                          </Button>\n                                    </div>\n                              </div>\n\n                              <div className=\"image-section\">\n                                    <div className=\"image-container\" style={\n                                          {\n                                                height: '100%',\n                                                width: '100%',\n                                                overflow: 'hidden'\n                                          }\n                                    }>\n                                          <div className=\"image-wrapper\"\n                                                onMouseEnter={() => setShowNavigation(true)}\n                                                onMouseLeave={() => {\n                                                      setShowNavigation(false);\n                                                      handleMouseLeave();\n                                                }}\n                                                onClick={handleImageWrapperClick}\n                                          >\n                                                {isCameraActive ? (\n                                                      // 摄像头模式保持不变\n                                                      <div\n                                                            ref={imageWrapperRef}\n                                                            className=\"image-scale-wrapper camera-active\"\n                                                            style={{\n                                                                  position: 'relative',\n                                                                  width: '100%',\n                                                                  height: '100%',\n                                                                  backgroundColor: '#000',\n                                                                  overflow: 'hidden'\n                                                            }}\n                                                      >\n                                                            {/* 视频元素 */}\n                                                            <video\n                                                                  ref={videoRef}\n                                                                  autoPlay\n                                                                  playsInline\n                                                                  muted\n                                                                  style={{\n                                                                        position: 'absolute',\n                                                                        top: 0,\n                                                                        left: 0,\n                                                                        width: '100%',\n                                                                        height: '100%',\n                                                                        objectFit: 'contain',\n                                                                        display: 'block',\n                                                                        zIndex: 10\n                                                                  }}\n                                                            />\n\n                                                            {/* 边界框层 */}\n                                                            <div\n                                                                  style={{\n                                                                        position: 'absolute',\n                                                                        top: 0,\n                                                                        left: 0,\n                                                                        width: '100%',\n                                                                        height: '100%',\n                                                                        pointerEvents: 'none',\n                                                                        zIndex: 20\n                                                                  }}\n                                                            >\n                                                                  {renderBoundingBoxes()}\n                                                            </div>\n\n                                                            {/* 检测状态指示 */}\n                                                            {isCapturing && (\n                                                                  <div\n                                                                        style={{\n                                                                              position: 'absolute',\n                                                                              top: 10,\n                                                                              right: 10,\n                                                                              backgroundColor: 'rgba(24, 144, 255, 0.8)',\n                                                                              color: 'white',\n                                                                              padding: '4px 8px',\n                                                                              borderRadius: '4px',\n                                                                              fontSize: '12px',\n                                                                              zIndex: 30\n                                                                        }}\n                                                                  >\n                                                                        实时检测中...\n                                                                  </div>\n                                                            )}\n                                                      </div>\n                                                ) : selectedImage ? (\n                                                      <>\n                                                            <div\n                                                                  ref={imageWrapperRef}\n                                                                  className=\"image-scale-wrapper\"\n                                                                  onMouseDown={handleMouseDown}\n                                                                  onMouseMove={handleMouseMove}\n                                                                  onMouseUp={handleMouseUp}\n                                                                  onMouseLeave={handleMouseLeave}\n                                                                  onWheel={handleWheel}\n                                                                  style={{\n                                                                        cursor: isDragging ? 'grabbing' : 'grab',\n                                                                        position: 'relative',\n                                                                        width: imageDimensions?.width || 'auto',\n                                                                        height: imageDimensions?.height || 'auto',\n                                                                        maxWidth: '600px',\n                                                                        maxHeight: '600px'\n                                                                  }}\n                                                            >\n                                                                  {/* 使用相对定位，并在transform中应用缩放和平移 */}\n                                                                  <div style={{\n                                                                        position: 'relative',\n                                                                        width: '100%',\n                                                                        height: '100%',\n                                                                        transform: `scale(${scale}) translate(${position.x / scale}px, ${position.y / scale}px)`,\n                                                                        transformOrigin: 'center',\n                                                                        transition: isDragging ? 'none' : 'transform 0.1s ease',\n                                                                  }}>\n                                                                        <img\n                                                                              src={selectedImage}\n                                                                              alt=\"PCB\"\n                                                                              style={{\n                                                                                    width: '100%',\n                                                                                    height: '100%',\n                                                                                    objectFit: 'contain',\n                                                                                    userSelect: 'none'\n                                                                              }}\n                                                                              draggable={false}\n                                                                        />\n                                                                        {/* 边界框相对于图像定位 */}\n                                                                        {renderBoundingBoxes()}\n                                                                  </div>\n                                                            </div>\n                                                            {imageList.length > 1 && showNavigation && (\n                                                                  <div className=\"image-navigation\">\n                                                                        <Button\n                                                                              icon={<LeftOutlined />}\n                                                                              onClick={handlePrevImage}\n                                                                              disabled={currentImageIndex === 0}\n                                                                        />\n                                                                        <Button\n                                                                              icon={<RightOutlined />}\n                                                                              onClick={handleNextImage}\n                                                                              disabled={currentImageIndex === imageList.length - 1}\n                                                                        />\n                                                                  </div>\n                                                            )}\n                                                      </>\n                                                ) : (\n                                                      <div className=\"upload-placeholder\">\n                                                            <Upload\n                                                                  accept=\"image/*\"\n                                                                  showUploadList={false}\n                                                                  beforeUpload={handleImageUpload} // 处理单个图片上传\n                                                                  onDrop={(e) => {\n                                                                        const file = e.dataTransfer.files[0];\n                                                                        if (file) {\n                                                                              handleImageUpload(file);\n                                                                        }\n                                                                  }}\n                                                            >\n                                                                  <div style={{ textAlign: 'center', cursor: 'pointer' }}>\n                                                                        <UploadOutlined style={{ fontSize: '24px', marginBottom: '8px' }} />\n                                                                        <p>点击或拖拽上传图片</p>\n                                                                  </div>\n                                                            </Upload>\n                                                      </div>\n                                                )}\n                                          </div>\n                                          <div className=\"detection-progress\">\n                                                <span>检测进度:</span>\n                                                <div style={{\n                                                      display: 'flex',\n                                                      alignItems: 'center',\n                                                      marginTop: '5px',\n                                                      gap: '10px'\n                                                }}>\n                                                      <div style={{ flex: 1, position: 'relative' }}>\n                                                            <Progress\n                                                                  percent={detectionProgress}\n                                                                  showInfo={false}\n                                                            />\n                                                      </div>\n                                                      <span style={{\n                                                            fontSize: '14px',\n                                                            color: '#1890ff',\n                                                            fontWeight: '500'\n                                                      }}>\n                                                            {detectionProgress}%\n                                                      </span>\n                                                </div>\n                                          </div>\n                                          {imageList.length > 1 && (\n                                                <div className=\"image-pagination\">\n                                                      <Pagination\n                                                            current={currentImageIndex + 1}\n                                                            total={imageList.length}\n                                                            pageSize={1}\n                                                            onChange={handlePageChange}\n                                                            size=\"small\"\n                                                            showQuickJumper\n                                                            showSizeChanger={false}\n                                                      />\n                                                </div>\n                                          )}\n                                    </div>\n                              </div>\n\n                              <div className=\"results-section\" >\n                                    <div className=\"results-header\">\n                                          <h2>检测结果</h2>\n                                          <Select\n                                                style={{ width: '100%', marginTop: '8px' }}\n                                                value={defectFilter}\n                                                onChange={handleDefectFilterChange}\n                                          >\n                                                {defectTypes.map(type => (\n                                                      <Select.Option key={type} value={type}>\n                                                            {type === 'all' ? '全部缺陷' : type}\n                                                      </Select.Option>\n                                                ))}\n                                          </Select>\n                                    </div>\n                                    {/* 检测结果列表部分 */}\n                                    <div\n                                          className=\"defects-container\"\n                                          style={{\n                                                height: '350px', // 固定高度\n                                                overflow: 'auto',\n                                                marginBottom: '16px',\n                                          }}\n                                    >\n                                          <div\n                                                className=\"defects-list\"\n                                                ref={defectsListRef}\n                                          >\n                                                {processedResults.length > 0 ? (\n                                                      processedResults.map((defect, index) => (\n                                                            <div key={index} className=\"defect-item\">\n                                                                  <div className=\"defect-info\">\n                                                                        <h4><span className=\"label-width\">类别:</span> {defect.type}</h4>\n                                                                        {defect.bbox && (\n                                                                              <p className=\"coordinates-info\">\n                                                                                    <span className=\"coord-row\">\n                                                                                          <span className=\"label-width\">坐标:</span>\n                                                                                          <span className=\"coord-pair\">x1={defect.bbox.x1}</span>\n                                                                                          <span className=\"coord-pair\">y1={defect.bbox.y1}</span>\n                                                                                    </span>\n                                                                                    <span className=\"coord-row\">\n                                                                                          <span className=\"label-width\"></span>\n                                                                                          <span className=\"coord-pair\">x2={defect.bbox.x2}</span>\n                                                                                          <span className=\"coord-pair\">y2={defect.bbox.y2}</span>\n                                                                                    </span>\n                                                                              </p>\n                                                                        )}\n                                                                        {defect.confidence && <p><span className=\"label-width\">置信度:</span> {defect.confidence}%</p>}\n                                                                  </div>\n                                                            </div>\n                                                      ))\n                                                ) : (\n                                                      <div className=\"defect-item empty-defect\">\n                                                            <div className=\"defect-info\">\n                                                                  <h4>暂无检测结果</h4>\n                                                                  <p>开始检测后将在此显示详细信息</p>\n                                                            </div>\n                                                      </div>\n                                                )}\n                                          </div>\n                                    </div>\n                                    {/* 饼图和图例部分 */}\n                                    <div className=\"statistics-section\" style={{ flex: '2', minHeight: '300px', display: 'flex', flexDirection: 'column' }}>\n                                          {detectionResults.statistics.defect_types && Object.keys(detectionResults.statistics.defect_types).length > 0 ? (\n                                                <ReactECharts\n                                                      option={getChartOption()}\n                                                      style={{ height: '100%', flex: 1 }}\n                                                      notMerge={true}\n                                                />\n                                          ) : (\n                                                <div style={{\n                                                      display: 'flex',\n                                                      flexDirection: 'column',\n                                                      justifyContent: 'center',\n                                                      alignItems: 'center',\n                                                      height: '100%',\n                                                      color: '#aaa'\n                                                }}>\n                                                      <p style={{ margin: 0 }}>检测完成后将在此显示统计数据</p>\n                                                      <p style={{ margin: 0 }}>\n                                                            可检测: 鼠咬, 开路, 短路, 毛刺和杂铜等\n                                                      </p>\n                                                </div>\n                                          )}\n                                    </div>\n                              </div>\n\n                              <div className=\"model-section\">\n                                    <div className=\"model-header\">\n                                          <h2>模型管理</h2>\n                                          <Select\n                                                value={selectedModel}\n                                                onChange={handleModelChange}\n                                                style={{ width: '100%' }}\n                                          >\n                                                <Select.Option value=\"yolov11\">Yolov11</Select.Option>\n                                                <Select.Option value=\"yolov11-vote2\">Yolov11-vote2</Select.Option>\n                                                <Select.Option value=\"yolov11-vote4\">Yolov11-vote4</Select.Option>\n                                          </Select>\n                                    </div>\n                                    <div className=\"metrics\">\n                                          <div className=\"metric-item\">\n                                                <span>Precision</span>\n                                                <span className=\"metric-value\">\n                                                      {selectedModel === 'yolov11' ? '97.72%' :\n                                                            selectedModel === 'yolov11-vote2' ? '97.45%' :\n                                                                  '96.99%'}\n                                                </span>\n                                          </div>\n                                          <div className=\"metric-item\">\n                                                <span>Recall</span>\n                                                <span className=\"metric-value\">\n                                                      {selectedModel === 'yolov11' ? '84.41%' :\n                                                            selectedModel === 'yolov11-vote2' ? '85.97%' :\n                                                                  '87.32%'}\n                                                </span>\n                                          </div>\n                                          <div className=\"metric-item\">\n                                                <span>mAP@0.5</span>\n                                                <span className=\"metric-value\">\n                                                      {selectedModel === 'yolov11' ? '92.39%' :\n                                                            selectedModel === 'yolov11-vote2' ? '93.02%' :\n                                                                  '93.58%'}\n                                                </span>\n                                          </div>\n                                          <div className=\"metric-item\">\n                                                <span>mAP@0.5:0.95</span>\n                                                <span className=\"metric-value\">\n                                                      {selectedModel === 'yolov11' ? '68.18%' :\n                                                            selectedModel === 'yolov11-vote2' ? '69.20%' :\n                                                                  '69.49%'}\n                                                </span>\n                                          </div>\n                                    </div>\n                                    <div className=\"threshold-settings\">\n                                          <h3>阈值设置</h3>\n                                          <div className=\"threshold-item\">\n                                                <span>IoU 阈值</span>\n                                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                                                      {/* 左侧显示当前值并支持用户输入 */}\n                                                      <div className=\"custom-input-number\">\n                                                            <InputNumber\n                                                                  min={0.1}\n                                                                  max={1.0}\n                                                                  step={0.01}\n                                                                  value={iouThreshold}\n                                                                  onChange={(value) => setIouThreshold(value || 0.1)} // 防止输入为空\n                                                                  style={{ width: '80px' }}\n                                                                  controls={false}\n                                                                  className=\"threshold-input\"\n                                                            />\n                                                            <div className=\"custom-controls\">\n                                                                  <div className=\"control-up\" onClick={() => {\n                                                                        const newValue = parseFloat((iouThreshold + 0.01).toFixed(2));\n                                                                        if (newValue <= 1.0) setIouThreshold(newValue);\n                                                                  }}>\n                                                                        <div className=\"control-icon\">+</div>\n                                                                  </div>\n                                                                  <div className=\"control-down\" onClick={() => {\n                                                                        const newValue = parseFloat((iouThreshold - 0.01).toFixed(2));\n                                                                        if (newValue >= 0.1) setIouThreshold(newValue);\n                                                                  }}>\n                                                                        <div className=\"control-icon\">-</div>\n                                                                  </div>\n                                                            </div>\n                                                      </div>\n                                                      {/* 右侧滑动条 */}\n                                                      <Slider\n                                                            min={0.1}\n                                                            max={1.0}\n                                                            step={0.01}\n                                                            value={iouThreshold}\n                                                            onChange={(value) => setIouThreshold(value)}\n                                                            tooltip={{ formatter: (value) => `IoU: ${value.toFixed(2)}` }}\n                                                            style={{ flex: 1 }}\n                                                      />\n                                                </div>\n                                          </div>\n                                          <div className=\"threshold-item\">\n                                                <span>置信度阈值</span>\n                                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                                                      {/* 左侧显示当前值并支持用户输入 */}\n                                                      <div className=\"custom-input-number\">\n                                                            <InputNumber\n                                                                  min={0.1}\n                                                                  max={1.0}\n                                                                  step={0.01}\n                                                                  value={confThreshold}\n                                                                  onChange={(value) => setConfThreshold(value || 0.1)} // 防止输入为空\n                                                                  style={{ width: '80px' }}\n                                                                  controls={false}\n                                                                  className=\"threshold-input\"\n                                                            />\n                                                            <div className=\"custom-controls\">\n                                                                  <div className=\"control-up\" onClick={() => {\n                                                                        const newValue = parseFloat((confThreshold + 0.01).toFixed(2));\n                                                                        if (newValue <= 1.0) setConfThreshold(newValue);\n                                                                  }}>\n                                                                        <div className=\"control-icon\">+</div>\n                                                                  </div>\n                                                                  <div className=\"control-down\" onClick={() => {\n                                                                        const newValue = parseFloat((confThreshold - 0.01).toFixed(2));\n                                                                        if (newValue >= 0.1) setConfThreshold(newValue);\n                                                                  }}>\n                                                                        <div className=\"control-icon\">-</div>\n                                                                  </div>\n                                                            </div>\n                                                      </div>\n                                                      {/* 右侧滑动条 */}\n                                                      <Slider\n                                                            min={0.1}\n                                                            max={1.0}\n                                                            step={0.01}\n                                                            value={confThreshold}\n                                                            onChange={(value) => setConfThreshold(value)}\n                                                            tooltip={{ formatter: (value) => `Conf: ${value.toFixed(2)}` }}\n                                                            style={{ flex: 1 }}\n                                                      />\n                                                </div>\n                                          </div>\n                                    </div>\n                              </div>\n                        </div>\n                  </Layout>\n            </Layout>\n      );\n}\n\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n      <React.StrictMode>\r\n            <App />\r\n      </React.StrictMode>,\r\n      document.getElementById('root')\r\n);"],"sourceRoot":""}